<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ycx&#39;Blog</title>
  
  <subtitle>今天怎么不下雨</subtitle>
  <link href="https://ycx6666.github.io/atom.xml" rel="self"/>
  
  <link href="https://ycx6666.github.io/"/>
  <updated>2024-04-15T10:46:22.411Z</updated>
  <id>https://ycx6666.github.io/</id>
  
  <author>
    <name>Ycx.Cc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统小班讨论GPU图形接口虚拟化技术</title>
    <link href="https://ycx6666.github.io/2024/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%8F%E7%8F%AD%E8%AE%A8%E8%AE%BAGPU%E5%9B%BE%E5%BD%A2%E6%8E%A5%E5%8F%A3%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E3%80%81%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://ycx6666.github.io/2024/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%8F%E7%8F%AD%E8%AE%A8%E8%AE%BAGPU%E5%9B%BE%E5%BD%A2%E6%8E%A5%E5%8F%A3%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E3%80%81%20-%20%E5%89%AF%E6%9C%AC/</id>
    <published>2024-04-15T09:37:44.076Z</published>
    <updated>2024-04-15T10:46:22.411Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><p>GPU图形接口虚拟化的原理主要是通过软件和硬件技术，将单个物理GPU资源虚拟化成多个独立的虚拟显卡资源，从而可以供多个虚拟机或用户同时使用。</p><p>在没有虚拟化的情况下，物理GPU直接与单一的主机操作系统和应用程序交互，为其提供图形处理能力。虚拟化后，GPU的物理资源（如处理器核心、显存等）被抽象、封装成多个独立的虚拟GPU（vGPU），每个vGPU可以被单独分配给不同的虚拟机。这样，多个虚拟机就能够共享同一个物理GPU的资源，同时享有GPU加速的优势。</p><h3 id="主流的gpu虚拟化技术"><a class="markdownIt-Anchor" href="#主流的gpu虚拟化技术"></a> 主流的GPU虚拟化技术：</h3><ol><li><strong>NVIDIA vGPU:</strong> NVIDIA的虚拟GPU(vGPU)技术使得一块物理GPU可以被分割为多个独立的虚拟GPU，每个虚拟GPU都可以被一个虚拟机独立使用。每个虚拟GPU都有自己的分配的GPU内存和独立的GPU调度，此外NVIDIA的vGPU支持CUDA和OpenCL，可以运行AI和深度学习工作负载。</li></ol><p><a href="https://docs.nvidia.com/grid/16.0/grid-vgpu-user-guide/index.html">参考：vGPU使用文档</a></p><ol start="2"><li><strong>AMD MxGPU:</strong> AMD的MxGPU是另一款主流的GPU虚拟化解决方案，它使用基于硬件的SR-IOV（Single Root I/O Virtualization）技术，将一个物理PCIe GPU变成多个PCIe vGPU，每个PCIe vGPU直接透传给虚拟机，实现多虚拟机共享一个物理GPU。每个虚拟机都有自己的虚拟GPU，并且可以使用标准的AMD驱动和开发工具。</li></ol><p><a href="https://zhuanlan.zhihu.com/p/683147438">参考：AMD与NVIDIA vGPU方案对比</a></p><p><a href="https://community.amd.com/t5/visual-cloud/sr-iov-baser-gpu-virtualization-for-a-true-workstation/ba-p/414277">参考：SR-IOV-Baser GPU 虚拟化，实现真正的工作状态</a></p><ol start="3"><li><strong>Intel GVT-g:</strong> Intel的图形虚拟化技术GVT-g可以将一个物理GPU分割成多个虚拟GPU，每个虚拟GPU可以被一个虚拟机使用。GVT-g使用软件调度来管理多个虚拟GPU的共享访问，支持Windows和Linux虚拟机，并且可以使虚拟机运行游戏和图形设计软件。</li></ol><p>​英特尔 GVT-g 是一种为英特尔 GPU（Broadwell 和更高版本）提供中介设备直通的技术。它可用于虚拟化多个客户机虚拟机的 GPU，从而有效地在虚拟机中提供近乎本机的图形性能，并且仍允许主机正常使用虚拟化 GPU。如果希望在没有专用 GPU 的超极本上运行的 Windows 虚拟机中加速图形，以实现完全设备直通</p><p><a href="https://wiki.archlinux.org/title/Intel_GVT-g">参考：英特尔GVT-g</a></p><ol start="4"><li><strong>Virgil 3D project:</strong> Virgil是一个开源项目，旨在允许模拟出的虚拟硬件有GPU，从而为虚拟机提供3D硬件加速。Virgil 3D还可以向客户虚拟机翻译OpenGL和其他GPU命令。</li></ol><p><a href="https://lwn.net/Articles/611212/">参考：Virgil 3D：虚拟 GPU </a></p><h3 id="gpu图形化接口"><a class="markdownIt-Anchor" href="#gpu图形化接口"></a> GPU图形化接口</h3><p>GPU图形接口虚拟化涉及将GPU的图形渲染能力划分并分配给多个虚拟机或用户，从而使它们能够独立运行图形密集型的应用程序。这包括3D建模、图形设计、视频编辑和游戏等。图形接口虚拟化允许在虚拟环境中使用GPU来进行硬件加速的图形处理，可以显著提升远程桌面和云游戏的体验。</p><p>一些关键的技术和产品包括：</p><ol><li><p><strong>NVIDIA GRID</strong>:</p><ul><li>NVIDIA GRID可用于提供虚拟桌面和应用程序的硬件加速图形。</li><li>利用NVIDIA的Kepler及更高架构的GPU，其中的vGPU（虚拟GPU）技术可以将单个GPU划分成多个虚拟GPU实例供用户使用。</li><li>支持多种虚拟化环境，包括VMware vSphere/ESXi, Citrix XenServer以及云服务如Amazon Web Services。</li></ul></li><li><p><strong>AMD Multiuser GPU (MxGPU)</strong>:</p><ul><li>基于SR-IOV（单根I/O虚拟化）的技术，AMD的MxGPU技术能在GPU硬件级别上实现虚拟化。</li><li>不同于NVIDIA的软件虚拟化方案，MxGPU提供了硬件隔离，旨在提高安全性。</li><li>每个虚拟机都有自己的虚拟GPU，可以直接运行AMD的原生图形驱动。</li></ul></li><li><p><strong>Intel Graphics Virtualization Technology (Intel GVT)</strong>:</p><ul><li>Intel GVT分成几个模式，GVT-d, GVT-g 和 GVT-s。</li><li>GVT-g允许一个物理GPU在多个VM之间分享，每个虚拟机可以独立访问它的虚拟GPU资源。</li></ul></li><li><p><strong>Virglrenderer(Virgil 3D project)</strong>:</p><ul><li>Virglrenderer是一个实现3D加速的项目，它通过GNU/Linux上的QEMU使用GPU硬件加速，提供OpenGL加速渲染。</li><li>它允许客户机通过虚拟化的环境使用GPU，提供图形加速。</li></ul></li><li><p><strong>VMware vSphere / Horizon View</strong>:</p><ul><li>VMware的vSphere提供GPU虚拟化方案，通过DirectX或OpenGL</li></ul></li></ol><h3 id="其中的关键技术"><a class="markdownIt-Anchor" href="#其中的关键技术"></a> 其中的关键技术</h3><ol><li><p><strong>虚拟化软件或Hypervisor</strong>：</p><ul><li>它是虚拟化的核心，控制并管理物理硬件资源与虚拟机之间的分配与调度。</li><li>Hypervisor在物理主机和虚拟机之间提供一层抽象，拦截虚拟机的硬件请求，并将这些请求转换为对实际物理硬件的操作。</li></ul></li><li><p><strong>虚拟GPU (vGPU) 技术</strong>：</p><ul><li>物理GPU被分割成多个vGPU实例，每个实例都有自己的一部分GPU资源，比如一定量的显存、GPU核心的时间片等。</li><li>每个虚拟机都认为它有自己的GPU，实际上只是使用了物理GPU的一部分资源。</li></ul></li><li><p><strong>图形驱动和API虚拟化</strong>：</p><ul><li>图形驱动程序需要能够理解vGPU，并且转换虚拟机的图形调用到物理GPU。</li><li>API虚拟化确保了虚拟环境中的图形API调用（如OpenGL或DirectX）可以正确解释并映射到物理硬件。</li></ul></li><li><p><strong>资源管理和调度</strong>：</p><ul><li>虚拟化平台需要合理管理和调度物理GPU资源给各个vGPU实例。</li><li>好的调度策略可以保证所有虚拟机的图形任务公平且有效率地执行。</li></ul></li><li><p><strong>直通 (Pass-Through) 和SR-IOV技术</strong>：</p><ul><li>直通技术不涉及资源分割，它允许一个虚拟机直接控制和访问一个物理GPU，提供几乎原生的性能。</li><li>SR-IOV技术允许一个物理设备呈现为多个分离的虚拟化设备，每个都可以被直接分配给虚拟机。</li></ul></li></ol><h5 id="附1关于intel-gvt的三种模式介绍"><a class="markdownIt-Anchor" href="#附1关于intel-gvt的三种模式介绍"></a> 附1：关于Intel GVT的三种模式介绍</h5><ol><li><p><strong>GVT-d（直通式/Direct Assignment）</strong>：</p><p>GVT-d是一种完全分配的虚拟化方法，将物理GPU直接分配给一个虚拟机使用。在这种模式下，虚拟机可以直接访问GPU的全部功能，它能提供几乎等同于物理机上的GPU性能。由于GPU被完全分配了，所以同一时间只能有一个虚拟机使用这块GPU，不支持资源共享。</p></li><li><p><strong>GVT-g（时间共享/Time-sharing）</strong>：</p><p>GVT-g是一种基于时间片的共享GPU资源方法。它将GPU资源分割成多个独立的虚拟GPU（vGPU实例），每个虚拟机获得一个vGPU实例。每个vGPU能够访问物理GPU的一部分资源，并且可以根据时间片轮流访问GPU，以此实现同时多个虚拟机共享GPU资源。这种方法可以支持多用户或多任务场景，适用于需要为多个虚拟机提供图形加速的情况。</p></li><li><p><strong>GVT-s（空间共享/Space-sharing）</strong>：</p><p>GVT-s与GVT-g相似，都是共享模式，但它通常是在具有SR-IOV（Single Root I/O Virtualization）支持的GPU上使用的。GVT-s通过将GPU的资源划分成多个虚拟功能（VF），然后这些VF可以静态分配给不同的虚拟机。这种模式适合于那些需要固定且隔离GPU资源的场合，每个VF都有独立的GPU资源，不与其他VF共享。</p></li></ol><h5 id="附2英伟达nvidiavgpu架构"><a class="markdownIt-Anchor" href="#附2英伟达nvidiavgpu架构"></a> 附2：英伟达(NVIDIA)vGPU架构</h5><p><img src="https://s2.loli.net/2024/04/15/nEa6i517DIrXSfK.png" alt="image-20240415170250289"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#原理&quot;&gt;&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;GPU图形接口虚拟化的原理主要是通过软件和硬件技术，将单个物理GPU资源虚拟化成多个独立的虚拟显卡资源，从而可以供多个虚拟机或用户同时使用。&lt;/</summary>
      
    
    
    
    <category term="操作系统" scheme="https://ycx6666.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="GPU虚拟化" scheme="https://ycx6666.github.io/tags/GPU%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据库复习</title>
    <link href="https://ycx6666.github.io/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A01-md/"/>
    <id>https://ycx6666.github.io/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A01-md/</id>
    <published>2024-04-14T14:19:08.528Z</published>
    <updated>2024-04-15T10:46:33.437Z</updated>
    
    <content type="html"><![CDATA[<p>#数据库复习(算是?)</p><p align="center">  <br>  </p><h2 style="text-align:center;color:#F4E0EA">    樱春雪</h2>  <br>  <br><div style="text-align:center">    <a href="https://codeload.github.com/liangjingkanji/DrakeTyporaTheme/zip/refs/heads/master">湖南大学</a>  | <a href="https://theme.typora.io/theme/Drake/">软件工程</a>  | <a href="https://github.com/liangjingkanji/DrakeTyporaTheme/blob/master/issues.md">22级</a></div><br><br>  <br><p></p><h3 id="一-绪论"><a class="markdownIt-Anchor" href="#一-绪论"></a> 一、绪论</h3><h4 id="1数据库管理的五个问题"><a class="markdownIt-Anchor" href="#1数据库管理的五个问题"></a> 1.数据库管理的五个问题</h4><ul><li>数据<strong>正</strong>确性问题</li><li>数据<strong>易</strong>用性问题</li><li>数据<strong>完</strong>整性</li><li>数据安<strong>全</strong>性问题</li><li>数据处理<strong>性</strong>能问题</li></ul><h4 id="2数据库技术的演进"><a class="markdownIt-Anchor" href="#2数据库技术的演进"></a> 2.数据库技术的演进</h4><ol><li>分布式数据库</li><li>面向对象数据库</li><li>NoSql数据库</li><li>数据仓库，大数据</li></ol><h4 id="3数据有用性信息"><a class="markdownIt-Anchor" href="#3数据有用性信息"></a> 3.数据+有用性=信息</h4><ol><li><p>类别性:</p><p>每类数据都有很多项，构成一个数据集</p></li><li><p>有用性：</p></li><li><p>语义性：</p></li></ol><h4 id="4数据库需要解决三个问题空间距离-交通运输成本-速度"><a class="markdownIt-Anchor" href="#4数据库需要解决三个问题空间距离-交通运输成本-速度"></a> 4.数据库需要解决三个问题：空间距离、交通运输成本、速度</h4><h4 id="5数据库的特点"><a class="markdownIt-Anchor" href="#5数据库的特点"></a> 5.数据库的特点</h4><p><img src="https://s2.loli.net/2024/04/07/Ch2gwibI9faXLR5.png" alt="image-20240405222701146"></p><h5 id="数据库的组成"><a class="markdownIt-Anchor" href="#数据库的组成"></a> 数据库的组成：</h5><p>数据库有表组成，表包括模式和数据</p><blockquote><p>数据库是一个数据的集合，所有的数据都存放在数据库中，数据库中的数据是<strong>海量的、共享的</strong></p></blockquote><p>数据库严格按类的概念来<strong>组织数据、分类存储</strong></p><p>一份类对应一张表，同类数据都存储在一张表中。</p><p>一个<strong>实例</strong>对应表中的<strong>一行数据</strong>，表中的一行数据对应一个实例</p><p>类与类之间有关系~&gt;实例与实例之间有关系</p><h4 id="6数据操作"><a class="markdownIt-Anchor" href="#6数据操作"></a> 6.数据操作</h4><p><strong>添加数据、修改数据、删除数据、查询数据、统计数据</strong></p><p><mark>数据库管理系统</mark>(DBMS)来受理用户的数据操作请求，完成数据操作，反馈结果给用户。</p><p>数据库模式中，数据的用户通过数据库应用程序来完成。</p><p><strong>数据库、数据库管理系统和数据库应用程序构成了数据库系统</strong></p><h4 id="7数据库系统的基本特征"><a class="markdownIt-Anchor" href="#7数据库系统的基本特征"></a> 7.数据库系统的基本特征</h4><p>•各种各类的业务数据将<strong>集中</strong>到数据库中，<strong>统一管理</strong>，实现<strong>共享</strong>。</p><p>•特性：数据库的<strong>拥有者</strong>相对明确，数据库的<strong>用户</strong>则在<strong>不断扩增，难以事先预测</strong>。</p><p>•<strong>数据库应用程序</strong>的<strong>通用性</strong>：能够对不同的<strong>数据库</strong>进行访问。</p><p>•<strong>数据库管理系统</strong>、<strong>数据库应用程序</strong>既具有<strong>相互独立性</strong>，又具有<strong>可对接性</strong>，构成<strong>邦联式系统</strong>。数据库访问标准和规范。DBMS开发厂家和数据库应用程序开发商。</p><p>•数据库访问标准和规范：<strong>关系数据模型，数据操作表达语言，数据库访问编程接口</strong>。</p><h4 id="8db的三级模式架构"><a class="markdownIt-Anchor" href="#8db的三级模式架构"></a> 8.DB的三级模式架构</h4><p><strong>内模式</strong>~<s>&gt;(概念模式\内模式映射)</s>~&gt;概念模式~~~~&gt;(外模式\概念模式映射)~~~&gt;外模式</p><ul><li><strong>系统的结构特性：模块化，分层结构。数据库应用程序和数据库管理系统构成邦联式系统，它俩彼此之间既具有相互独立性，又具有可对接集成性。原因是数据操作的表达，以及数据库访问编程接口，都已形成了国际标准</strong>。</li></ul><h4 id="9数据库其他"><a class="markdownIt-Anchor" href="#9数据库其他"></a> 9.数据库其他</h4><p>•<strong>关系模型</strong>，<strong>事务处理</strong>，<strong>数据库设计方法</strong>m，<strong>SQL</strong>，<strong>ODBC/ JDBC</strong>是数据库技术<strong>发展中的标志性成果，也是数据库技术的核心内容。</strong></p><p>•数据库应用领域的<strong>从业人员</strong>角色有三种：<strong>数据库设计人员</strong>，<strong>数据库系统管理人员</strong>，<strong>数据库应用程序开发人员</strong>。</p><p>•流行的数据库管理系统<strong>产品</strong>有<strong>Oracle</strong>，<strong>SQL Server</strong>，<strong>DB2</strong>，<strong>MySQL</strong>。它们各有特色。</p><h3 id="二-关系数据模型"><a class="markdownIt-Anchor" href="#二-关系数据模型"></a> 二、关系数据模型</h3><p>数据模型</p><p>​关系数据模型；</p><p>​数据完整性约束；</p><p>​关系代数；</p><p>​关系数据库基本特征；</p><h4 id="1数据模型"><a class="markdownIt-Anchor" href="#1数据模型"></a> 1.数据模型</h4><blockquote><p>数据模型是指描述数据、数据间的关系、对数据的约束的有关概念。数据模型包括</p><p><strong>数据结构、数据完整性约束、数据运算</strong>三个部分，其目的是<strong>提供一个框架，实现数据操作简单容易，做到数据正确、安全、完整</strong></p></blockquote><h4 id="2关系数据模型"><a class="markdownIt-Anchor" href="#2关系数据模型"></a> 2.关系数据模型</h4><p><mark>关系就是表</mark></p><ul><li>数据结构：二维表</li><li>数据完整性约束：实体、引用、域、业务规则</li><li>数据运算：关系代数</li></ul><h4 id="3关系的特性"><a class="markdownIt-Anchor" href="#3关系的特性"></a> 3.关系的特性</h4><ol><li>在一个数据库中，表的名字要唯一，不能出现同名的表</li><li>在一个表中，列的名字要唯一，不能出现同名的列</li><li>每行数据表达一个实例，一个实例在一个表中<strong>只有一行数据</strong></li><li>表中的列具有<strong>对等性、没有等级区别</strong></li><li>表中的列具有<strong>对等性、没有先后概念</strong></li></ol><h4 id="4按照原样存储的表的三个问题"><a class="markdownIt-Anchor" href="#4按照原样存储的表的三个问题"></a> 4.按照原样存储的表的三个问题</h4><ul><li>数据冗余问题</li><li>删除问题</li><li>修改问题</li></ul><h4 id="5解决"><a class="markdownIt-Anchor" href="#5解决"></a> 5.解决</h4><ul><li><p>判断数据重复</p><p><mark>列重复</mark></p><p><strong>主键约束</strong>(一个表中是否存在两行数据指向一个对象)</p><p>在一个数据库中，当定义一个表的模式时，必须指明该表的主键</p><p><mark>行重复</mark></p><p>如果行重复，DBMS会拒绝修改，</p><p><mark>外键约束</mark></p><p>在含<strong>外键</strong>的表中**，添加<strong>行数据</strong>，或者<strong>修改</strong>已有<strong>行数据中的外键字段</strong>的值时，DBMS要检查，看**是否违背外键约束</p><p>当定义一个表的模式时，如果引用了其他表的外键，就必须指明，不能遗漏。</p><p>表分为关系表和实体表，实体表中也可能含有外键</p></li><li><p>业务规则约束</p></li></ul><h4 id="6超键和候选键"><a class="markdownIt-Anchor" href="#6超键和候选键"></a> 6.超键和候选键</h4><p>~~超键（Super Key） （键也成为 码，如 超码）</p><p>关系中的一个属性组（含有1个或多个列的组），其值能唯一标识一个元组（即：行）。这样的属性组称作该关系的超键</p><p>如学生信息表中的<code>学号</code> 可作为超键，<code>号，姓名</code>也是超键</p><p>又如，学院信息表中<code>学院编号</code>，<code>学院名称</code> 都是超键</p><p>又如，选课表中<code>学号，课程号，学期</code> 是超键</p><p>一个属性组，如果其子集是超键，则该属性组也是超键，即任何超键的超集还是超键</p><pre class="highlight"><code class="候选键（Candidate">满足特殊条件的超键：如果一个超键删除任何一个属性后都不再是超键，则该键为该关系的候选键。即子集都不是超键的超键为候选键选课表中` 学院编号，学院名称 ` **不是候选键**任何一个候选键中的属性称作主属性（Prime Attribute）  不属于任何一个候选键中的属性称作非主属性#### 7.关系模式关系的描述称作关系模式，包括关系名、关系中的属性名、属性向域的映象、属性间的数据依赖关系等，记作R(A1 , A2 ,…, An ) R是关系名（表名），Ai是属性名（列）属性向域的映象一般直接说明为属性的类型、长度等某一时刻对应某个关系模式的内容(元组的集合)称作关系关系模式是型（schema），是稳定的关系是某一时刻的值，是随时间不断变化的#### 8.数据完整的反义词是数据损坏#### 9.确保数据完整性&gt;**数据**有现实含义，与现实情况相符一致；满足业务规则；- **实体完整性(约束)**：每个表都有主键，并且作为主键的一个或者多个列对应的值唯一- **参照完整性(约束)：**任何外键的值，要么为null，要么存在于另一张表中主键的值，确保不会引用一个==不存在的值==- **域完整性(约束):**每一列有明确的数据类型、数据格式和数值范围以及是否可以为==null==- **用户自定义完整性(约束)：**针对某一具体应用的数据必须满足的语义要求。–例如，家庭地址数据中，地址相同的两行，其邮政编码也必须相同。又如：列值唯一性，学院编码是主键，学院名称不是主键的一部分，但学院名称也必须保持唯一性，这个唯一性是现实语义上不同学院不能重名**，列唯一性在关系模型中用unique关键字指明某列取值唯一。**#### 10.DBMS负责数据库中的数据具有完整性&gt; 如果用户操作会导致数据的完整性被打破，那么DBMS就会拒绝受理他&gt;&gt; 如果不违背完整性约束，那么就会受理他#### 11.数据库系统的特性##### 关系型数据库的表有三种：- 专一性:数据严格按类分表保存- 全局性：一个数据在数据库只存一份，不能重复存储，一个类只对应一个表。- 联系性：表与表之间存在联系，体现在外键上。##### 用户的业务数据表也有三种：局部性、综合性、多样性- 局部性是指他仅只是数据库中表的部分行和部分列- 综合性是指他的列分布在数据库不同的表之中、- 多样性是指用户业务所需的表各式各样#### 12.关系代数的运算类型![image-20240406205401493](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240406205401493.png)**投影运算会去除相同的行****并运算：**![image-20240406210123580](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240406210123580.png)**差运算**![image-20240406210146574](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240406210146574.png)**交运算**![image-20240406210223825](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240406210223825.png)**笛卡尔乘积运算**![image-20240406211448729](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240406211448729.png)![image-20240406211503212](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240406211503212.png)**更名运算**P_&#123;(改名) (表格)##### θ链接![image-20240406212325068](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240406212325068.png)##### 自然连接![image-20240406213246413](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240406213246413.png)**自然连接需要两个表有共同的属性；而其中没有的产生联系的行(没有等值的行，不会出现在结果中)；含外键的表是主干表时，对于外简直为null的行，不会出现在结果中。**#### 13.外联接&gt; 笛卡尔积、θ链接等待称为内联接![image-20240406214223357](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240406214223357.png)##### 半联接半联接起返回左表中与有右表至少匹配依次的数据行==通俗的来说==就是只按照组左表中的列来，左表中没有的列不会算进去##### 除运算见1.5实际上就是解决一类问题：**如何得到全部_副表_的_主表_元素&gt; 全部的那张表是被除的如：得到选修了全部课程的学生那么就直接将选课表除以课程表，**注意这样会将他们公共的属性剔除**![image-20240406215722752](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240406215722752.png)#### 13.运算的有优先级- 关系代数具有优先级- 一元运算(\sigma,\Pi)的优先级高于二元运算，二元运算中横向链接运算(\times,\bowtie)高于纵向运算(\cup,\cap,\neg)- 括号的运算级最高##### 五个基本运算$$\sigma \Pi \cup - \times$$其他运算都可以被表达出来### 三、数据操作语言DML（SQL的子集)#### 1.数据操作中，最核心、最关键的问题是查询#### 2.SQL规范中，select的结果允许重复#### 3.where子句比较运算符：**&lt;**、**&lt;** **=**、**&gt;**、**&gt;****=**、=、 **&lt;** **&gt;**逻辑运算符：**and**，**or**，**not**between：判断表达式的值是否在某范围内列出工资在500~800之间的老师姓名#### 4.重复元组的处理如果要去掉重复元组，可以用distinct指明<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> Ssharp</span><br><span class="line">form SC</span><br></pre></td></tr></table></figure>#### 5.元组显示顺序命令：order by 列名/第几列 [asc\desc]//从小到大，从大到小<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> S</span><br><span class="line">orderd <span class="keyword">by</span> AGE <span class="keyword">asc</span>,SNAME <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>#### 6.更名运算old_name as new_name==as 可选==#### 7.字符串操作列名 [not] like ‘字符串'**匹配规则**&gt;- ’%‘：匹配零个或者多个字符串&gt;- '_':单个下户线匹配任意单个字符&gt;- '[]'：任何在指定范围内的字符&gt;&gt;[a-f],[abcdef] &gt;&gt;- '[^]':任何不在指定范围内的字符&gt;&gt;- [^a-f]##### Escape&gt; 被定义为转义字符，&gt;&gt; 如escape'\'，定义\为转移字符，则可用\%去匹配%,用\_取匹配_<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> C</span><br><span class="line"><span class="keyword">where</span> CNAME <span class="keyword">LIKE</span><span class="string">&#x27;%_d\__&#x27;</span> <span class="keyword">escape</span><span class="string">&#x27;\&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>#### 8.空值is [not] null注意事项：&gt;除is [not] null 之外，空值不满足任何查找条件&gt;&gt;如果null参与算术运算，则该算术表达式的值为==null==&gt;&gt;如果null参与比较运算，则可以视为==false==,在SQL-92中可看成unknown**示例：**找出成绩值为空的学生号<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Ssharp</span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">where</span> GRADE <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line">不可写为 <span class="keyword">where</span> GRADE<span class="operator">=</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure>##### isnull<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isnull(check_expression,relacement_value)</span><br></pre></td></tr></table></figure>如果check_expression 值为空，则返回replacement，否则返回check_expression(类似于三元表达式?)##### coalesce<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">coalesce</span>(expression1,expression2)</span><br></pre></td></tr></table></figure>返回第一个不为null的expression<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ssharp,csharp,coalesec(grade,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">from</span> sc</span><br></pre></td></tr></table></figure>##### 缺省情况下空值是==最后输出的==，当指定order by时，降序情况下==首先输出空值==，升序情况下==最后输出空值==。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> is_null,sal</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>首先输出空值，然后在从小到大输出</span><br></pre></td></tr></table></figure>#### 9.统计##### 五个基本聚集函数&gt;- COUNT ~ 求行数&gt;- SUM ~求和&gt;- AVG ~求平均值&gt;- MIN ~求最小值&gt;- MAX ~求最大值注意事项1. COUNT,MAX,MIN可对**任意类型的字段**，而SUM and AVG只对**数值型字段**2. SUM,AVG,MIN,MAX要求**查询结果只有有一列**3. 除了COUNT(*),其他函数都**忽略null值，count(列)也会忽略null**4. 统计结果是单一的值，从表概念来说，**只有一行**##### count(*) 和 count(列名)count(*)统计所有行，有些字段为空的也统计count(列名)该字段为NULL的不统计#### 10.分组统计(GROUP BY)&gt; 先对查询结果，选定某一字段或者某些字段进行分组，对查询结果的行，将分组字段的==值相同的行==放在一起构成一个组，于是，可能会形成多个组，再对每个组进行统计<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 列名 [<span class="keyword">having</span> 条件表达式]</span><br></pre></td></tr></table></figure>group by将表中的元组按照指定列上相等的原则分则，然后再每一份组上使用聚集函数，得到单一值having 对分组进行额外选择，只将聚集函数作用在满足额条件的分组上##### having 和 where 的区别having的粒度是==分组==，where的粒度是==行==#### 11.集合成员资格:int 子查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式 [<span class="keyword">not</span>] <span class="keyword">in</span> (子查询)</span><br></pre></td></tr></table></figure>用于判断表达式的值是否在子查询的结果中。E.G.<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">where</span> SNAME <span class="keyword">in</span> </span><br><span class="line">(<span class="string">&#x27;张军&#x27;</span>，<span class="string">&#x27;王宏&#x27;</span>)</span><br></pre></td></tr></table></figure>#### 12.集合之间的比较:some/all子查询$$表达式\quad  比较运算符 \quad \theta\quad  some\quad (子查询)$$&gt; 表达式的值至少与子查询结果中的一个值相比满徐比较运算符$$表达式\quad 比较运算符\theta \quad all \quad (子查询)$$&gt; 表达式的值与子查询结果中的所有的值相比都满足比较运算符![image-20240407103019311](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240407103019311.png)#### 13.集合基数的测试:exist子查询**测试集合是否为空**<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[not] exists (子查询)</span><br></pre></td></tr></table></figure>判断子查询的结果集合中是否有任何元组存在&gt; in后的子查询与外层查询无关，每个子查询执行依次，而exists后的子查询与外层查询有关，需要执行多次，称之为==相关子查询==#### 14.反半联接not in \ not exists#### 15.除法在SQL中的表达$$\Pi_&#123;s\#,c\#&#125;(SC)\div\Pi_&#123;c\#&#125;(C) &lt;=&gt; not\quad exists...not\quad exists ...$$E.G.列出选修了全部课程的学生姓名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNAME</span><br><span class="line"><span class="keyword">FROM</span> S S1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> Csharp</span><br><span class="line">   <span class="keyword">FROM</span> C C1</span><br><span class="line">   <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">   (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">      <span class="keyword">FROM</span> SC</span><br><span class="line">      <span class="keyword">WHERE</span> Csharp<span class="operator">=</span>C1.Csharp</span><br><span class="line">      <span class="keyword">AND</span> Ssharp<span class="operator">=</span>S1.Ssharp))</span><br></pre></td></tr></table></figure>&gt;1. 从学生表S（别名S1）中选择一个学生。&gt;2. 接着查看课程表C（别名C1）中的每一条课程记录。&gt;3. 对于每个课程，查询选课记录表SC看是否存在一条记录满足以下两个条件：课程号Csharp与当前遍历到的课程C1.Csharp相同，且学生号Ssharp与之前选取的学生S1.Ssharp相同。&gt;4. 如果某个课程没有对应上述条件的记录，即某个课程没有被这名学生选修，那么NOT EXISTS条件为真，这意味着C1（即当前遍历的课程）就是这名学生没有选修的课程之一。&gt;5. 如果存在任何一个这样的课程（即第二层NOT EXISTS条件为真），说明这名学生并没有选修所有的课程，那么外层的NOT EXISTS条件就为假，这名学生就不会被包含在最终的结果集中。&gt;6. 只有当一个学生选修了所有课程，即内层SELECT语句没有找到任何课程（第二层NOT EXISTS条件为假），外层的NOT EXISTS才为真，这名学生的SNAME才会被SELECT语句选取。#### 16.测试集合是否存在重复元组unique (子查询)如果子查询中没有重复元组，则返回true<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> PNAME</span><br><span class="line"><span class="keyword">from</span> PROFF</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">unique</span></span><br><span class="line">(<span class="keyword">select</span> Psharp</span><br><span class="line">   <span class="keyword">from</span> PC</span><br><span class="line">   <span class="keyword">where</span> PC.Psharp<span class="operator">=</span>PROF.Psharp)</span><br></pre></td></tr></table></figure>#### 17.派生关系<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(子查询) <span class="keyword">as</span> 关系名(列名，列名,...)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>       SNAME ， AVG_GRADE</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (<span class="keyword">select</span>SNAME ， avg（GRADE）</span><br><span class="line"><span class="keyword">from</span>  S，SC</span><br><span class="line"><span class="keyword">where</span> SC.Ssharp <span class="operator">=</span> S.Ssharp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>SNAME)</span><br><span class="line">       <span class="keyword">as</span>    <span class="keyword">result</span>(SNAME ， AVG_GRADE )</span><br><span class="line"><span class="keyword">where</span>   AVG_GRADE  <span class="operator">&gt;=</span>  <span class="number">60</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>#### 18.集合操作**集合并(union(all))****集合交(intersect(all))****集合差(except(all))**&gt; #### 无all的结果会去重，有all的结果不会去重&gt;&gt; intersect 的优先级高于其他集合操作的优先级#### 19.笛卡尔乘积 自然连接运算==笛卡尔乘积运算==<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b<span class="operator">*</span>,s<span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Branch <span class="keyword">AS</span> B,staff <span class="keyword">AS</span> s</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="number">2.</span></span><br><span class="line"><span class="keyword">SELECT</span> b<span class="operator">*</span>,s<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Brach b</span><br><span class="line"><span class="keyword">JOIN</span> staff </span><br></pre></td></tr></table></figure>//from两个表就做了一次笛卡尔乘积运算==自然连接运算==<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b<span class="operator">*</span>,s.name,staffNo,position </span><br><span class="line"><span class="keyword">FROM</span> Branch <span class="keyword">AS</span> b,staff s</span><br><span class="line"><span class="keyword">WHERE</span> b.deptNo<span class="operator">=</span>s.deptNo</span><br></pre></td></tr></table></figure>#### 20.关系的链接![image-20240407112419661](%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0(%E7%AE%97%E6%98%AF).assets/image-20240407112419661.png)#### 21.不等号 &lt;&gt;#### 22.查询结果作为添加操作的输入<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> enroll(sno, cno, semester) (<span class="keyword">SELECT</span> sno, ‘H61030008’, ’<span class="number">2018</span><span class="operator">/</span><span class="number">01</span>’ <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> dno <span class="operator">=</span>’<span class="number">24</span>’ <span class="keyword">AND</span> sno <span class="keyword">LIKE</span> ’<span class="number">2018</span><span class="operator">%</span>’);</span><br></pre></td></tr></table></figure>**insert into 表明 [(列名[,列名]...)] (子查询)**#### 23.复制**复制一个数据文件到数据库中**<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bulk <span class="keyword">insert</span> 表名 </span><br><span class="line"><span class="keyword">from</span>  数据文件</span><br><span class="line"><span class="keyword">with</span></span><br><span class="line">(batchsize <span class="operator">=</span> 指定批处理中的行数,</span><br><span class="line">check_constraints,</span><br><span class="line">datafiletype <span class="operator">=</span> 数据文件类型,</span><br><span class="line">fieldterminator <span class="operator">=</span> 字段终止符, </span><br><span class="line">maxerrors <span class="operator">=</span> 所容忍的最大错误数目, </span><br><span class="line">rowterminator <span class="operator">=</span> 行终止符)</span><br></pre></td></tr></table></figure>#### 24.更新操作<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名</span><br><span class="line"><span class="keyword">set</span> 列名<span class="operator">=</span>表达式<span class="operator">|</span>子查询</span><br><span class="line">列名<span class="operator">=</span>[.表达式<span class="operator">|</span>子查询]</span><br><span class="line">[<span class="keyword">where</span> 条件表达式]</span><br></pre></td></tr></table></figure>e.g.老师工资上调5%<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> PROF</span><br><span class="line"><span class="keyword">set</span> SAL<span class="operator">=</span>SAL<span class="operator">*</span><span class="number">1.05</span></span><br></pre></td></tr></table></figure>类似于switch...case<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> PROF</span><br><span class="line"><span class="keyword">set</span> SAL<span class="operator">=</span></span><br><span class="line"><span class="keyword">case</span> SAL</span><br><span class="line"><span class="keyword">when</span> SAL<span class="operator">&gt;</span><span class="number">200</span> <span class="keyword">then</span> SAL<span class="operator">*</span><span class="number">0.9</span></span><br><span class="line"><span class="keyword">when</span> SAL<span class="operator">&lt;=</span><span class="number">200</span> <span class="keyword">then</span> SAL<span class="operator">*</span><span class="number">0.95</span></span><br></pre></td></tr></table></figure>#### 25.删除操作==delete==<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件表达式]</span><br></pre></td></tr></table></figure>&gt; 从表中删除符合条件的元组，没有就全部删除#### ==truncate table==- 删除表中的所有行，而不记录单个行删除操作- truncate table在功能上与不带where子句的delete语句相同。但truncate table比delete速度快，且使用的系统和事务日志资源少- identity计数器重置为种子值#### 26.总结关系型数据库中部的表有三性：专一性、全局性、联系性用户的业务数据表：局部性、综合性、多样性### 五.数据库定义功能（创建表、三级模式、视图、存储过程）#### 1.操作符| SQL功能  | 操作符               || -------- | -------------------- || 数据查询 | SELECT               || 数据定义 | CREATE,ALTER,DROP    || 数据操纵 | INSERT,UPDATE,DELETE || 数据控制 | GRANT,REVOKE         |#### 2.域类型- char(n):固定长度的字符串- varchar(n)：可变长字符串- int：整数- smallint：小整数类型- numeric(p,d)：定点数，小数点左边p位，右边q位- real:浮点数- double prrecision：双精度浮点数- date:日期- time：时间- inerval：两个date或time类型数据之间的差#### 3.基本表的定义(CREATE)<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span>   表名（</span><br><span class="line">   列名  数据类型  [<span class="keyword">default</span>  缺省值]  [<span class="keyword">not</span> <span class="keyword">null</span>] [<span class="keyword">unique</span>]</span><br><span class="line">   [，列名 数据类型  [<span class="keyword">default</span>  缺省值]  [<span class="keyword">not</span> <span class="keyword">null</span>]]</span><br><span class="line">   [，<span class="keyword">primary</span>  key（列名 [，列名] …）]</span><br><span class="line">   [，<span class="keyword">foreign</span>  key （列名 [，列名] …） </span><br><span class="line">      <span class="keyword">references</span>  表名 （列名 [，列名] …）]</span><br><span class="line">    [，<span class="keyword">check</span>（条件）]）</span><br><span class="line"></span><br></pre></td></tr></table></figure>![image-20240408195435827](https://s2.loli.net/2024/04/13/HjP9hXM85GdApWq.png)#### 4.修改表的定义(ALTER)格式：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"> [<span class="keyword">add</span> 子句] <span class="operator">/</span><span class="operator">/</span>增加新列和约束</span><br><span class="line"> [<span class="keyword">drop</span> 子句] <span class="operator">/</span><span class="operator">/</span>删除列和约束</span><br><span class="line"> [modify 子句] <span class="operator">/</span><span class="operator">/</span>修改列定义</span><br></pre></td></tr></table></figure>#### 5.撤销基本表的定义(drop)格式：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure>#### 6.临时表&gt;- 草稿簿，试验中间的数据处理&gt;- 只记录回滚信息，不记录重做信息&gt;- 临时表上的数据更新比其他表快4倍==私有临时表==<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sharpmy_table</span><br></pre></td></tr></table></figure>==全局临时表==<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sharpsharpmy_table</span><br></pre></td></tr></table></figure>==tempdb==<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> my_table</span><br></pre></td></tr></table></figure>#### 7.结构数据模型的三要素- 数据结构- 数据操作- 数据的约束条件#### 8.关系模型==优点==- 简单，表的概念直观、单一，用户易理解- 非过程化的数据请求，数据请求可以不指明路径- 数据独立性，用户只需提出“做什么”，无须说明“怎么做”- 坚实的理论基础==缺点==- 效率低~&gt;nosql#### 9.数据库模式![image-20240408200739499](https://s2.loli.net/2024/04/12/X94POZcoJabg1KQ.png)- 外模式  - 用户的数据视图  - 是数据的局部逻辑结构，模式的子集- 模式或者概念模式  - 所用用户的公共数据视图  - 是数据库中全体数据的全局逻辑结构和特性的描述- 内模式  - 又称存储模式  - 是数据的物理结构及存储方式==外模式/模式映像==- 定义某一个外模式和模式之间的对应关系，映象定义通常包含在各外模式中- 当模式改变时，修改外模式/模式映象，使外模式保持不变，从而应用程序可以保持不变，称为数据的逻辑独立性==模式/内模式影响==- 定义数据逻辑结构与存储结构之间的对应关系- 存储结构改变时，修改模式/内模式映象，使模式保持不变，从而应用程序可以保持不变，称为数据的物理独立性**外模式/模式映射 视图，存储过程**三级模式结构及二级映像实现了数据库系统的数据独立性#### 10.视图##### **定义视图**<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_name[(列名[,列名]...)]</span><br><span class="line"><span class="keyword">as</span> (查询表达式)</span><br><span class="line">[<span class="keyword">with</span> <span class="keyword">check</span> option]</span><br></pre></td></tr></table></figure>&gt;视图的属性名缺省为子查询结果中的属性名，也可以显式指明&gt;&gt;with check option指明当对视图进行insert，update时，要检查是否满足视图定义中的条件##### **撤销视图**<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> view_name</span><br></pre></td></tr></table></figure>&gt; 视图是一个虚拟表，定义在一个查询上，因此视图对应的虚拟表的行的集合就是该查询的结果集##### **特点**- 当用户需要读取视图对应的结果集时，系统会**临时执行**视图对应的查询，生成临时表供使用，临时表在执行完后不再存在，视图保持为虚拟表- sql的语句中，子查询容易大幅增加查询语句的复杂度，因此视图有利于简化用户的查询，也能对用户屏蔽底层细节，并且**视图并不实际存储数据**，空间开销忽略不计- 实际上，有时也存在物化视图，即实际生成一个持久化的针对视图的数据表，以提升频繁访问视图的操作的效率##### **优点**==个性化服务==简化了用户观点，不同用户可以从不同角度观察同一数据==安全性==“纸币所需&quot;,限制用户数据的访问范围==逻辑独立性==试图作为基本表与外模式之间的映像![image-20240408202641861](https://s2.loli.net/2024/04/12/JlX4SyF5RiQwxBa.png)##### **进行权限授权**<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> avg_sal <span class="keyword">to</span>&quot;Tom&quot;<span class="operator">/</span><span class="operator">/</span>授予Tom只有查看职工平均工资的权限</span><br></pre></td></tr></table></figure>##### **进行视图更新**<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> S </span><br><span class="line"><span class="keyword">values</span> (<span class="keyword">null</span>,&quot;张立&quot;,<span class="number">23</span>,<span class="keyword">null</span>)<span class="operator">/</span><span class="operator">/</span>向视图中插入数据</span><br></pre></td></tr></table></figure>（其实就是把表明换成视图名)##### 视图更新约束- select子句中的目标列不能包含聚集函数- select子句中不能使用unique或distinct关键字- 不能包括group by子句- 不能包括经算术表达式计算出来的列- 对于行列子集视图一般可以更新（视图是从单个基本表使用选择、投影操作导出的，并且包含了基本表的主码）##### 物化视图- 视图的计算结果被实际存储起来- 物化视图可以看成是数据库的cache- 查询物化视图比重新计算视图要快许多- 需要进行物化视图与基本表之间的一致性维护- 应用场合  &gt; 任何需要快速访问派生数据、或视图的重新计算非常昂贵、或查询需要耗费非常高的CPU和磁盘吞吐量的应用场合，都可以使用物化视图来提高效率**其他好处**1. 实现了应用程序与数据库的彼此独立，通用性增强，应用程序只见视图，不见表2. 增强安全。##### 视图存在的问题没有灵活应变性#### 11.存储过程##### 优点：提升试图的适应性，使其通用化e.g.<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> my_students(<span class="variable">@semesterV</span> <span class="keyword">IN</span> <span class="type">VARCHAR</span>, <span class="variable">@courserV</span> <span class="keyword">IN</span> <span class="type">VARCHAR</span>, <span class="variable">@teacherV</span> <span class="keyword">IN</span> <span class="type">VARCHAR</span>）<span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> studentNo, name, class </span><br><span class="line">    <span class="keyword">FROM</span> student <span class="keyword">AS</span> S, enroll <span class="keyword">AS</span> E, course <span class="keyword">AS</span> C, teacher <span class="keyword">AS</span> T</span><br><span class="line">    <span class="keyword">WHERE</span> S.studentNo <span class="operator">=</span> E.studentNo </span><br><span class="line">                   <span class="keyword">AND</span> C.courseNo <span class="operator">=</span> E.courseNo </span><br><span class="line">                   <span class="keyword">AND</span> T.teacherNo <span class="operator">=</span>E.teacherNo </span><br><span class="line">                   <span class="keyword">AND</span>Ｃ.name <span class="operator">=</span> <span class="variable">@courseV</span> </span><br><span class="line">                   <span class="keyword">AND</span>  Ｅ.semester <span class="operator">=</span><span class="variable">@semesterV</span> </span><br><span class="line">                   <span class="keyword">AND</span> T.name<span class="operator">=</span><span class="variable">@teacherV</span>;</span><br><span class="line"><span class="keyword">END</span>; </span><br></pre></td></tr></table></figure>用户:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> my_students(<span class="string">&#x27;2014/01&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>,<span class="string">&#x27;杨金珉&#x27;</span>)</span><br></pre></td></tr></table></figure>##### 存储过程带来的好处- 应用程序或者用户见到的是存储过程，视图，而不是表- 用户不用学SQL- 因为带变量，有很强的适用性和通用性- 能够将业务规则约束，放在存储过程中加以实现- 函数可以带上返回值##### 视图和存储过程的差异和联系- 在用户看来，视图是一个表，存储过程是一个具备特定功能的函数；- 视图既然是一个表，用户就可在其上进行五大数据操作；对存储过程，则不具备这种特性；- 存储过程尽管它的功能固定，但是带有变量，因此具有适配性，能够满足不同参数下的同一功能要求；</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#数据库复习(算是?)&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;br&gt;
  &lt;/p&gt;&lt;h2 style=&quot;text-align:center;color:#F4E0EA&quot;&gt;
    樱春雪
	&lt;/h2&gt;
  &lt;br&gt;
  &lt;br&gt;
	&lt;div style=&quot;te</summary>
      
    
    
    
    <category term="数据库" scheme="https://ycx6666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="总结" scheme="https://ycx6666.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库的一些问题</title>
    <link href="https://ycx6666.github.io/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://ycx6666.github.io/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2024-04-04T14:00:00.000Z</published>
    <updated>2024-04-15T10:46:05.683Z</updated>
    
    <content type="html"><![CDATA[<p>#数据库的一些问题</p><p align="center">  <br>  </p><h2 style="text-align:center;color:#F4E0EA">    樱春雪</h2>  <br>  <br><div style="text-align:center">    <a href="https://codeload.github.com/liangjingkanji/DrakeTyporaTheme/zip/refs/heads/master">湖南大学</a>  | <a href="https://theme.typora.io/theme/Drake/">软件工程</a>  | <a href="https://github.com/liangjingkanji/DrakeTyporaTheme/blob/master/issues.md">22级</a></div><br><br>  <br><p></p>### sharp一点想法<h4 id="1检索至少选修两门课程的学生学号"><a class="markdownIt-Anchor" href="#1检索至少选修两门课程的学生学号"></a> 1.检索至少选修两门课程的学生学号</h4><p>**思路：**将选修表做<mark>自连接</mark>。也就是把自己和自己做笛卡尔积</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mi>C</mi><mn>1</mn><mo>∗</mo><mi>S</mi><mi>C</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">SC1*SC2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">2</span></span></span></span></span></p><p>如果SC1和SC2的sno(学号)相同，但是cno(课程编号)不同，说明这个人至少选修了两门课程。</p><p>那么就可以做如下运算</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \and at position 25: …sc1.sno=sc2.sno\̲a̲n̲d̲ ̲sc1.cno!=sc2.cn…">\sigma _{sc1.sno=sc2.sno\and sc1.cno!=sc2.cno}(SC1*SC2)</p><p>最后将学号投影出来</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \and at position 35: …sc1.sno=sc2.sno\̲a̲n̲d̲ ̲sc1.cno!=sc2.cn…">\Pi_{sno}(\sigma _{sc1.sno=sc2.sno\and sc1.cno!=sc2.cno}(SC1*SC2))</p><p><strong>我们对此进行扩展，如果需要至少选择三门课程的</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mi>C</mi><mn>1</mn><mo>∗</mo><mi>S</mi><mi>C</mi><mn>2</mn><mo>∗</mo><mi>S</mi><mi>C</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">SC1*SC2*SC3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">3</span></span></span></span></span></p><h4 id="2除法运算的应用"><a class="markdownIt-Anchor" href="#2除法运算的应用"></a> 2.除法运算的应用</h4><p><strong>例：检索全部学生都选修的课程号和课程名</strong></p><p><strong>思路：</strong></p><ul><li>获取所有学生的学号</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mrow><mi>s</mi><mi>n</mi><mi>o</mi></mrow></msub><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_{sno}(S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span></span></p><ul><li>获取所有的选课记录，然后除以所有学生学号</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mrow><mi>c</mi><mi>n</mi><mi>o</mi><mo separator="true">,</mo><mi>s</mi><mi>n</mi><mi>o</mi></mrow></msub><mo stretchy="false">(</mo><mi>S</mi><mi>C</mi><mo stretchy="false">)</mo><mo>÷</mo><msub><mi mathvariant="normal">Π</mi><mrow><mi>s</mi><mi>n</mi><mi>o</mi></mrow></msub><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_{cno,sno}(SC)\div\Pi_{sno}(S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span></span></p><p><strong>这样子会筛选出选课记录中有全部学号的课程的cno</strong></p><p>只有包含了被除数所有的条目才会将除数中的非sno属性筛选出</p><ul><li>最后投影即可，无需赘述</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#数据库的一些问题&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;br&gt;
  &lt;/p&gt;&lt;h2 style=&quot;text-align:center;color:#F4E0EA&quot;&gt;
    樱春雪
	&lt;/h2&gt;
  &lt;br&gt;
  &lt;br&gt;
	&lt;div style=&quot;text</summary>
      
    
    
    
    <category term="数据库" scheme="https://ycx6666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="总结" scheme="https://ycx6666.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库复习2</title>
    <link href="https://ycx6666.github.io/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/"/>
    <id>https://ycx6666.github.io/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/</id>
    <published>2024-04-04T14:00:00.000Z</published>
    <updated>2024-04-15T10:46:36.406Z</updated>
    
    <content type="html"><![CDATA[<p>#数据库复习(算是?)2</p><p align="center">  <br>  </p><h2 style="text-align:center;color:#F4E0EA">    樱春雪</h2>  <br>  <br><div style="text-align:center">    <a href="https://codeload.github.com/liangjingkanji/DrakeTyporaTheme/zip/refs/heads/master">湖南大学</a>  | <a href="https://theme.typora.io/theme/Drake/">软件工程</a>  | <a href="https://github.com/liangjingkanji/DrakeTyporaTheme/blob/master/issues.md">22级</a></div><br><br>  <br><p></p><h3 id="六数据库定义功能2"><a class="markdownIt-Anchor" href="#六数据库定义功能2"></a> 六.数据库定义功能2</h3><h4 id="1索引查询"><a class="markdownIt-Anchor" href="#1索引查询"></a> 1.索引查询</h4><p><strong>定义</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">unique</span>] [cluster] index 索引名</span><br><span class="line"><span class="keyword">on</span> 表名 (列名[<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>] [,列名 <span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>])</span><br></pre></td></tr></table></figure><ol><li>unique：唯一性索引，不允许表中不同的行在索引列上取相同值。若已经有相同值存在，则系统给出相关信息，不坚辞索引。系统拒绝未被唯一性的插入和更新</li><li>cluster：聚簇索引，表中元组按照索引项的值排序并物理的聚簇在一起(索引码到指针的则是非物理聚簇)。一个基本表上只能建一个聚簇索引。</li><li>asc/desc:索引表中索引值的排序次序，缺省为asc。</li></ol><p><mark>注意</mark></p><blockquote><p>create table时指定的主键或者unique列，均会出发系统<strong>自动创建</strong>响应的索引用作重复性检查。</p></blockquote><p>![image-20240408165335994](<a href="https://cdn.jsdelivr.net/Ycx6666">https://cdn.jsdelivr.net/Ycx6666</a> / TyporaImage/KahGvUJ961qYsMb.png)</p><h4 id="2组合索引"><a class="markdownIt-Anchor" href="#2组合索引"></a> 2.组合索引</h4><ul><li>建立在多个属性列上的索引</li><li>如果组合索引建立在A,B,C上，那他只对检索A,A+B,A+B+C列的查询起作用。</li></ul><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/OBAinmqZMIeY3aS.png" alt="image-20240408165634068"></p><h4 id="3索引的删除"><a class="markdownIt-Anchor" href="#3索引的删除"></a> 3.索引的删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index 索引名</span><br></pre></td></tr></table></figure><blockquote><p>drop index 语句不适用于定义主键或者unique约束时系统自动创建的索引，他们必须通过删除约束来撤销</p></blockquote><h4 id="4索引的其他说明"><a class="markdownIt-Anchor" href="#4索引的其他说明"></a> 4.索引的其他说明</h4><ul><li><p>可以动态地定义索引，即可以随时建立和删除索引</p></li><li><p>不允许用户在数据操作中引用索引。索引如何使用完全由系统决定，这支持了数据的物理独立性</p></li><li><p>应该在使用频率高的、经常用于连接的列上建索引</p></li><li><p>一个表上可建多个索引。索引可以提高查询效率，但索引过多耗费空间，且降低了插入、删除、更新的效率</p></li></ul><h4 id="5数据完整性的四大保障措施"><a class="markdownIt-Anchor" href="#5数据完整性的四大保障措施"></a> 5.数据完整性的四大保障措施</h4><ul><li>主键约束</li><li>外键约束</li><li>域约束</li><li>业务规则约束</li></ul><h4 id="6一个带有唯一性声明的属性上有多少个null-不限制"><a class="markdownIt-Anchor" href="#6一个带有唯一性声明的属性上有多少个null-不限制"></a> 6.一个带有唯一性声明的属性上有多少个NULL  --不限制</h4><h4 id="7foreign-key"><a class="markdownIt-Anchor" href="#7foreign-key"></a> 7.Foreign key</h4><blockquote><p>作为主码的关系成为基本关系，作为外码的关系称为依赖关系</p></blockquote><p><mark>删除基本关系元组</mark></p><ul><li>RESTRICT方式</li></ul><p>​只有当依赖关系中没有一个外码与要删除的基本关系的主码值相对应时，才可以删除该元组，否则系统拒绝此删除操作。</p><ul><li>CASCADE方式</li></ul><p>​将依赖关系中所有的外码之与基本关系中要删除的主码值所对应的元组一起删除。</p><ul><li><p>SET NULL方式</p><p>删除基本关系中元组时，将依赖关系中与基本关系中被删主码值相对应的外码值置为空值。</p><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/RAF6QjY3gpoyPXd.png" alt="image-20240408171436210"></p></li></ul><h4 id="8全局约束"><a class="markdownIt-Anchor" href="#8全局约束"></a> 8.全局约束</h4><blockquote><p>全局约束涉及多个属性见的或多个关系间的联系</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> SC</span><br><span class="line">(Ssharp   <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"> Csharp   <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"> GRADE   <span class="type">SMALLINT</span>,</span><br><span class="line"> primay key (Ssharp, Csharp),</span><br><span class="line"> <span class="keyword">check</span>(Ssharp <span class="keyword">in</span> (<span class="keyword">select</span> Ssharp <span class="keyword">from</span> S)),</span><br><span class="line"> <span class="keyword">check</span>(Csharp <span class="keyword">in</span> (<span class="keyword">select</span> Csharp <span class="keyword">from</span> C)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><mark>如果S中删除元组，不会触发CHECK子句，只有对SC表的更新才会触发。</mark></p><h4 id="9对约束的命名-撤销和添加"><a class="markdownIt-Anchor" href="#9对约束的命名-撤销和添加"></a> 9.对约束的命名、撤销和添加</h4><p>命名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constraint</span> 约束名 <span class="operator">&lt;</span>约束条件<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ssharp <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">constraint</span> S_PK <span class="keyword">primary</span> key</span><br></pre></td></tr></table></figure><h5 id="关系上约束的撤销和添加"><a class="markdownIt-Anchor" href="#关系上约束的撤销和添加"></a> 关系上约束的撤销和添加</h5><p>撤销用 <code>alter table...drop constraint... </code></p><p>添加用 <code>alter table...add constraint...</code></p><p><strong>示例：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> S <span class="keyword">drop</span> <span class="keyword">constraint</span> S_PK</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> SC <span class="keyword">add</span> <span class="keyword">constraint</span> SC_CHECK <span class="keyword">check</span> (Ssharp <span class="keyword">in</span> <span class="keyword">select</span> Ssharp <span class="keyword">from</span> S)</span><br></pre></td></tr></table></figure><h4 id="10触发器"><a class="markdownIt-Anchor" href="#10触发器"></a> 10.触发器</h4><ul><li>表模式(Schema)的定义中，包含了主键、外键、域约束的定义；</li><li>业务规则约束用触发器来定义；</li><li>所有完整性约束在DBMS内部最终都用触发器来表示；</li><li>操作会先出发约束检查和处理，确认可以操作之后才完成操作。</li></ul><blockquote><p><mark>BEFORE触发器</mark>在语句开始做任何增删改查之前就被触发。</p><p><mark>AFTER触发器</mark>在语句结束后触发</p><p><mark>INSTEAD OF触发器</mark>只能在定义视图上</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_insertEnroll</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> enroll</span><br><span class="line"><span class="keyword">REFERENCING</span> <span class="keyword">NEW</span> <span class="type">ROW</span> <span class="keyword">AS</span> <span class="keyword">new</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">creditAll <span class="type">integer</span><span class="operator">/</span><span class="operator">/</span>定义一个整型变量</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(credit) <span class="keyword">INTO</span> credit <span class="keyword">FROM</span> course <span class="operator">/</span><span class="operator">/</span>给这个整型变量赋值</span><br><span class="line"><span class="keyword">WHERE</span> courseld <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> courseld <span class="keyword">FROM</span> enroll</span><br><span class="line"><span class="keyword">WHERE</span> studentld<span class="operator">=</span><span class="variable">@new</span>.studentld</span><br><span class="line"><span class="keyword">AND</span> semester<span class="operator">=</span><span class="variable">@new</span>.semester) </span><br><span class="line"><span class="keyword">OR</span> couseld<span class="operator">=</span><span class="variable">@new</span>.courseld;</span><br><span class="line"><span class="keyword">WHEN</span>(creditAll<span class="operator">&gt;</span><span class="number">25</span>)<span class="operator">/</span><span class="operator">/</span>当大于<span class="number">25</span>分时，就会输出错误信息</span><br><span class="line">raise_application_error(<span class="number">200</span>,<span class="string">&#x27;这个学期已经选修学分&#x27;</span><span class="operator">+</span><span class="variable">@creditAll</span>);</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>上面这个用于使用触发器实现每学期选课不超过25学分。</p><p><strong>DBMS内部，所有完整性约束，地使用触发器来表示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHEN</span> (<span class="keyword">NOT</span> EXIST <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sudentNo <span class="operator">=</span> <span class="variable">@new</span>.studentNo <span class="keyword">OR</span>  <span class="keyword">NOT</span> EXIST <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> courseNo <span class="operator">=</span> <span class="variable">@new</span>.courseNo)</span><br><span class="line">           raise_application_error(“违背外键约束”);</span><br></pre></td></tr></table></figure><h4 id="11删除或者修改中的一个对象"><a class="markdownIt-Anchor" href="#11删除或者修改中的一个对象"></a> 11.删除或者修改中的一个对象</h4><blockquote><p>•<strong>DROP TABLE</strong> <strong>emp;</strong></p><p>•<strong>ALTER TABLE</strong> <strong>emp ………;</strong></p><p>•<strong>DROP VIEW</strong> <strong>staff;</strong></p><p>•<strong>ALTER VIEW</strong> <strong>staff ………;</strong></p><p>•<strong>DROP PROCEDURE</strong> <strong>add_enroll;</strong></p><p>•<strong>ALTER PROCEDURE</strong> <strong>add_enroll;</strong></p><p>•<strong>DROP TRIGGER</strong> <strong>staff_insert;</strong></p><p>•<strong>ALTER TRIGGER</strong> <strong>staff_insert;</strong></p></blockquote><h4 id="12数据库中的对象"><a class="markdownIt-Anchor" href="#12数据库中的对象"></a> 12.数据库中的对象</h4><p>![image-20240408174225483](<a href="https://cdn.jsdelivr.net/Ycx6666">https://cdn.jsdelivr.net/Ycx6666</a> / TyporaImage/image-20240408174225483.png)</p><p>e.g.</p><p>假定Booking表漏定义了外键(hotelNo, roomNo), 请针对往Booking表中添加记录，写一个触发器实现此这2个字段的引用完整性；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> Booking_trigger </span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Booking</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> room_exists <span class="type">INT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> room_exists </span><br><span class="line"><span class="keyword">FROM</span> Room</span><br><span class="line"><span class="keyword">WHERE</span> hotelNo<span class="operator">=</span>new.hotel <span class="keyword">AND</span> roomNo<span class="operator">=</span>new.roomNo</span><br><span class="line">IF(room_exist<span class="operator">=</span><span class="number">0</span>) <span class="keyword">THEN</span></span><br><span class="line">SINGAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line"><span class="keyword">SET</span> MESSAGE_TEXT<span class="operator">=</span><span class="string">&#x27;外键引用错误&#x27;</span></span><br><span class="line"><span class="keyword">END</span> IF</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h4 id="13约束检查延迟约束"><a class="markdownIt-Anchor" href="#13约束检查延迟约束"></a> 13.约束检查–延迟约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deferred contraints</span><br></pre></td></tr></table></figure><h4 id="14用户自定义数据类型"><a class="markdownIt-Anchor" href="#14用户自定义数据类型"></a> 14.用户自定义数据类型</h4><p>UDDT:</p><blockquote><p>保证数据一致性</p></blockquote><p>格式:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> domain 域名 数据类型</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> domain person<span class="operator">-</span>name <span class="type">char</span>(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><strong>类似于C语言中的</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedf ADDRESS_LIST&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> telephone[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> location[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line">ADDRESS_LIST tom;</span><br></pre></td></tr></table></figure><h3 id="七事务概念-性质和调度"><a class="markdownIt-Anchor" href="#七事务概念-性质和调度"></a> 七.事务（概念、性质和调度)</h3><h4 id="1事务概念"><a class="markdownIt-Anchor" href="#1事务概念"></a> 1.事务概念</h4><blockquote><p>事务是由一系列操作的序列构成的程序执行单元，这些操作要么都做，要么都不做，是一个不可分割的工作单位.</p></blockquote><p><mark>SQL中事务的定义</mark></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">事务以<span class="keyword">Begin</span> transaction开始，以<span class="keyword">Commit</span> transaction或 <span class="keyword">Rollback</span> transaction结束（回滚，也就是撤销已经执行的那部分操作）</span><br><span class="line"><span class="keyword">Commit</span> transaction表示提交，事务正常结束</span><br><span class="line"><span class="keyword">Rollback</span> transaction表示事务非正常结束，撤消事务已做的操作，回滚到事务开始时状态</span><br></pre></td></tr></table></figure><h4 id="2事务特征"><a class="markdownIt-Anchor" href="#2事务特征"></a> 2.事务特征</h4><p><mark>要求:中间状态对外部不可见</mark></p><p><strong>例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TRANSACTION <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">10000</span></span><br><span class="line"><span class="keyword">WHERE</span> accountNo <span class="operator">=</span> <span class="string">&#x27;2008043101&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10000</span></span><br><span class="line"><span class="keyword">WHERE</span> accountNo<span class="operator">=</span><span class="string">&#x27;2008043214&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p><mark>事务特性</mark> --一个DBMS支持事务的化，其所必须满足的特性</p><ul><li><strong>原子性</strong></li></ul><p>事务中包含的所有操作要么全做，要么全不做</p><p><strong>原子性由恢复机制实现</strong></p><ul><li><strong>一致性</strong></li></ul><p>在外部看来，数据库中的数据总是正确的,数据库的一致性状态<strong>由用户负责</strong>；</p><p>–数据正确性问题</p><p>-有故障时，数据会丢失或者残缺不全</p><p>-无故障时，因为数据阻止不合理，导致数据更新异常，冗余，数据不正确；</p><ul><li><strong>隔离性</strong></li></ul><p>– 系统必须保证事务不受其它并发执行事务的影响</p><p>– 对任何一对事务T1，T2，在T1看来，T2要么在T1开始之前已经结束，要么在T1完成之后再开始执行</p><p>– 隔离性通过<strong>并发控制机制</strong>实现</p><ul><li><strong>持久性</strong></li></ul><p>一个事务一旦提交之后，他对数据库的影响必须是永久的</p><p>系统发生故障不能改变事务的持久性</p><p>持久性通过恢复机制实现</p><blockquote><p>一个事务一旦提交了，即使随后发生故障，其结果不会在数据库中丢失</p></blockquote><h4 id="3事务生命周期图"><a class="markdownIt-Anchor" href="#3事务生命周期图"></a> 3.事务生命周期图</h4><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/NvYt7VwBHFJqjuG.png" alt="image-20240412101836367"></p><h4 id="4事务调度及其分类"><a class="markdownIt-Anchor" href="#4事务调度及其分类"></a> 4.事务调度及其分类</h4><blockquote><p>有多个事务需要执行时，这组事务对应的的所有操作的执行顺序称为对这组事务的一个调度，表示事务的指令在系统中执行的时间顺序</p></blockquote><h5 id="一组事务的调度必须保证"><a class="markdownIt-Anchor" href="#一组事务的调度必须保证"></a> 一组事务的调度必须保证</h5><ul><li>包含了该组所有事务的操作指令</li><li>同一个事务中的指令，再调度中的先后顺序，同其在事务内部的先后顺序必须保持一致</li></ul><h5 id="串行调度"><a class="markdownIt-Anchor" href="#串行调度"></a> 串行调度</h5><ul><li>在串行调度中，属于同一事务的指令紧凑在一起</li><li>对于有n个事务的事务组，可以有n！个不同的串行调度</li></ul><h5 id="并行调度"><a class="markdownIt-Anchor" href="#并行调度"></a> 并行调度</h5><ul><li>在并行调度中，来自不同事物的指令可以交叉执行</li><li>当并行调度等价于某个串行调度时，则称他是正确的。</li></ul><h4 id="5事务调度"><a class="markdownIt-Anchor" href="#5事务调度"></a> 5.事务调度</h4><p><strong>并行和串行</strong></p><p><mark>基本比较</mark></p><ul><li>并行十五容易破坏数据库的一致性</li><li>串行事务效率低</li></ul><p><mark>并行的优点</mark></p><ul><li>一个事务由不同的步骤组成，所涉及的系统资源也不同。这些步骤可以并发执行，以提高系统的<strong>吞吐量</strong></li><li>系统中存在着周期不等的各种事务，串行会导致难于预测的时延。如果各个事务所涉及的是数据库的不同部分，采用并发会减少<strong>平均响应时间</strong>（例如事务操作的表各不相同）</li></ul><p><mark>总结</mark></p><blockquote><p>事务可以提高系统的吞吐量，也会减少响应时间</p></blockquote><h4 id="6可恢复调度"><a class="markdownIt-Anchor" href="#6可恢复调度"></a> 6.可恢复调度</h4><h5 id="事物的恢复"><a class="markdownIt-Anchor" href="#事物的恢复"></a> 事物的恢复</h5><blockquote><p><strong>事务的恢复</strong>：一个事务失败了，为保证事务的原子性，我们应该能够撤消（回滚）该事务对数据库已经造成的影响，如write过的数据项。如果有其它事务Tx读取了失败事务写入的数据，则该事务Tx也应该撤消（前提是Tx尚未commit，如果已经commited，那么就无法恢复，出现不一致）</p></blockquote><p><strong>注：</strong></p><blockquote><p>对于每对事物T1和T2，如果T2读取了T1所写的数据，则T1必须先于T2提交</p></blockquote><h5 id="级联回滚"><a class="markdownIt-Anchor" href="#级联回滚"></a> 级联回滚：</h5><p>应该避免级联回滚</p><h4 id="7无级联回滚-不会发生级联回滚的调度"><a class="markdownIt-Anchor" href="#7无级联回滚-不会发生级联回滚的调度"></a> 7.无级联回滚 --不会发生级联回滚的调度</h4><h5 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h5><blockquote><p>对于每对事物T1和T2，如果T2读取了T1所写的数据，则T1必须先于T2提交</p></blockquote><h4 id="8write和commit"><a class="markdownIt-Anchor" href="#8write和commit"></a> 8.Write和Commit</h4><h5 id="write又称save临时性"><a class="markdownIt-Anchor" href="#write又称save临时性"></a> Write又称save：临时性</h5><p>将数据项的值从内存中写入到数据库中，同时会备份好旧值，以便事务失败的时候需要回滚（将旧值写回该数据项），因此Write对数据库的修改是临时性的</p><h5 id="commit永久性"><a class="markdownIt-Anchor" href="#commit永久性"></a> Commit：永久性</h5><p>事务提交之后，会终止该事务，并且所有的备份旧值会被清除，事务对数据项的修改（Write）将因为commit的完成，实现由临时性变为永久性。</p><h4 id="9事务隔离性级别"><a class="markdownIt-Anchor" href="#9事务隔离性级别"></a> 9.事务隔离性级别</h4><p><strong>数据库事务的个隔离级别有4种，由高到低为</strong></p><ol><li>Serializable（可串行化)</li><li>Repeatable read (可重复读)</li><li>Read committed (读提交)</li><li>Read uncommitted (读未提交)</li></ol><p><strong>特点：</strong></p><ol><li>级别越低越容易出现不一致，性能越高</li><li>越高级越不容易出错，性能越低</li></ol><blockquote><p><strong>有些业务场景中允许将</strong>DBMS事务隔离性级别配置为非最高级（非可串行化），进而实现更高的性能</p></blockquote><h4 id="10事务问题"><a class="markdownIt-Anchor" href="#10事务问题"></a> 10.事务问题</h4><h5 id="丢失修改"><a class="markdownIt-Anchor" href="#丢失修改"></a> 丢失修改</h5><blockquote><p>两个事务T1和T2读入同一数据并修改，T1提交的结果破坏了T2提交的结果，导致T2的修改丢失</p></blockquote><h5 id="读脏数据"><a class="markdownIt-Anchor" href="#读脏数据"></a> 读脏数据</h5><blockquote><p>事务T1修改某一数据，并将其写回磁盘，事务T2读取同一数据后，T1由于某种原因被撤消，这时T1已修改过的数据恢复原值，T2读到的数据与数据库中数据不一致，则T2读到的数据就是脏数据</p></blockquote><h5 id="不能重复读-修改其他事务读取的-update"><a class="markdownIt-Anchor" href="#不能重复读-修改其他事务读取的-update"></a> 不能重复读  --修改其他事务读取的 update</h5><blockquote><p>事务T2读取某一数据后，事务T1对其做了修改，当T2再次读取该数据时，得到与前次不同的值，重复读导致不同值则表示出错，即不能重复读</p></blockquote><h5 id="发生幻象-插入其他事务读的-insertdelete"><a class="markdownIt-Anchor" href="#发生幻象-插入其他事务读的-insertdelete"></a> 发生幻象  --插入其他事务读的 insert/delete</h5><blockquote><p>事务T2按一定条件读取了某些数据后，事务T1插入了一些满足这些条件的数据，当T2再次按相同条件读取数据时，发现多了一些记录</p></blockquote><h4 id="11隔离性级别的定义"><a class="markdownIt-Anchor" href="#11隔离性级别的定义"></a> 11.隔离性级别的定义</h4><ul><li>serializable:一个调度的执行必须等价于一个串行调度的结果</li><li>repeatable read :只允许读取已提交的记录，并要求调度中，一个事务对同一记录的两次读取之间，不存在其他事务对该记录的更新</li><li>read committed： 只允许读取已提交的记录，但不要求可重复读</li><li>read uncommitted: 允许读取未提交的记录</li></ul><h4 id="12故障恢复"><a class="markdownIt-Anchor" href="#12故障恢复"></a> 12.故障恢复</h4><ul><li>正常执行时的防备措施，为故障恢复做准备</li><li>在故障发生后的故障回复措施，保证事物的四个属性</li></ul><h5 id="分页方法"><a class="markdownIt-Anchor" href="#分页方法"></a> 分页方法：</h5><ol><li>把要访问的数据页读入内存</li><li>数据处理</li><li>把修改了的数据页作为一个新页写回磁盘，注意不要覆盖旧页</li><li>完成第三步之后，在磁盘上删除过时了的旧页</li></ol><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/ivgL5HD3FR6JplY.png" alt="image-20240412113027132"></p><p><mark>优点</mark>:<strong>简单</strong></p><blockquote><p><strong>故障恢复方法：如果因故障导致第3步没有完成，那么原数据页还在，就当该事物没有发生看待，保证了事物的原子性；</strong></p></blockquote><p><mark>缺点</mark>:<strong>效率不高</strong></p><blockquote><p><strong>原因是：磁头要在磁盘盘面上到处来回移动。因为磁头一会要读事物要处理的数据页，一会要去磁盘上的哪个地方找一个空闲页来写修改后的数据，还要回过头来删除旧页。</strong></p></blockquote><h5 id="日志方法广泛采用"><a class="markdownIt-Anchor" href="#日志方法广泛采用"></a> 日志方法(广泛采用)</h5><p>数据库数据的特点：既要读，也要写</p><p>日志数据的特点：单调策略，只写不读</p><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/et3RPIDspc2g1mu.png" alt="image-20240412113525506"></p><p><strong>将日志缓冲区的内容输出到日志磁盘</strong></p><p><strong>有两种同步约束：</strong></p><p>1）当数据库缓冲区中的某个内容要输出到数据库磁盘时，必须先把与其相关的日志缓冲区内容输出到日志磁盘(WAL ) ；</p><p><strong>数据库缓冲区中数据要输出到磁盘，是因为当要从磁盘中读数据到内存空间来进行处理时，必须先为其先腾出空间来；</strong></p><p><strong>2）当事务</strong> Ti 完成，遇到<Ti commit>记录时，要把日志缓冲区的内容输出到日志磁盘，以便保证事物的四个属性；</Ti></p><p>例子：<br><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/Tw6XYeFWzxUNCEq.png" alt="image-20240412210837657"></p><h4 id="13事务故障的恢复方法"><a class="markdownIt-Anchor" href="#13事务故障的恢复方法"></a> 13.事务故障的恢复方法</h4><h5 id="特征事务不能执行下去未完成"><a class="markdownIt-Anchor" href="#特征事务不能执行下去未完成"></a> 特征：事务不能执行下去，未完成</h5><p><strong>恢复方法：</strong></p><blockquote><p>恢复方法：执行回卷(Rollback)操作：当事物Ti要撤销时，反向扫描日志内容，对Ti的每项数据操作记录，执行undo(Ti) 操作，使用旧值恢复数据项的原有值，即撤销事务已做的数据操作；直至遇到<Ti start> 记录为止，然后放弃Ti ；</Ti></p></blockquote><h4 id="14系统崩溃故障的恢复方法"><a class="markdownIt-Anchor" href="#14系统崩溃故障的恢复方法"></a> 14.系统崩溃故障的恢复方法</h4><ol><li>重启数据库管理系统</li><li>从日志磁盘读取日志文件</li><li>反向扫描日志，从日志文件的结束位置开始反向扫描，对于在日志中没有&lt;Ti，commit&gt;的事务，执行回滚操作，使用旧值恢复数据项。做undo()处理。</li><li>然后从日志文件的开始位置向前扫描，对日志记录中含有 &lt;Ti,commit&gt;的事务，执行redo(Ti)操作，使用新值赋值数据库中的数据项， 保证事务的生效性。</li></ol><h4 id="15检查点checkpoint概念"><a class="markdownIt-Anchor" href="#15检查点checkpoint概念"></a> 15.检查点(Checkpoint)概念</h4><p>做检查点的目的：</p><blockquote><p>加快系统崩溃故障恢复过程，基于如下观察</p></blockquote><ul><li>扫描整个日志文件很费时</li><li>对已经输出到了数据库磁盘的事务数据项没有必要做redo操作</li></ul><p><strong>周期性的做检查点</strong></p><ol><li>暂停当前所有活动事务</li><li>把日志缓冲区的所有日志记录输出带日志磁盘</li><li>把数据库缓冲区的所有修改输出到数据库磁盘</li><li>写一条&lt;checkpoint,&lt;当前活动事务的标识号列表&gt;&gt;日志记录到日志磁盘。</li></ol><h4 id="16有检查点的系统崩溃故障恢复"><a class="markdownIt-Anchor" href="#16有检查点的系统崩溃故障恢复"></a> 16.有检查点的系统崩溃故障恢复</h4><ol><li>从日志文件的结尾处反向扫描，直到遇到最近的<checkpoint>记录为止</checkpoint></li><li>对反向扫描中只有<Tistart>，而没有<Ti commit>的事务，执行回滚操作，做撤销处理</Ti></Tistart></li><li>从<checkpoint>开始向前扫描日志记录，对有<Ticommit>的事务，执行redo<Ti>操作。</Ti></Ticommit></checkpoint></li></ol><blockquote><p>没有检查点时，日志文件反向扫描要到起始位置。检查点加快了故障恢复过程，缩短了恢复时间；</p></blockquote><p>例子：</p><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/hpQrRmZVwSf9g3t.png" alt="image-20240412212101160"></p><h4 id="17备份操作-应对数据库磁盘故障"><a class="markdownIt-Anchor" href="#17备份操作-应对数据库磁盘故障"></a> 17.备份操作-应对数据库磁盘故障</h4><p><strong>周期性地执行备份(dump) 操作，对磁盘数据库进行磁盘备份:</strong></p><p><strong>①不再接收客户事务请求，让当前所有活动事务执行完毕；</strong></p><p><strong>②输出日志缓冲区中的日志记录到日志磁盘中;</strong></p><p><strong>③输出数据库缓冲区中的缓冲数据到数据库磁盘中;</strong></p><p><strong>④把数据库磁盘中的数据库文件拷贝到另一个磁盘上；</strong></p><p><strong>⑤往日志磁盘中写入一条 <dump> 日志记录；</dump></strong></p><p>⑥<strong>接收客户事物请求，恢复正常处理；</strong></p><h4 id="18数据库磁盘故障的回复方法"><a class="markdownIt-Anchor" href="#18数据库磁盘故障的回复方法"></a> 18.数据库磁盘故障的回复方法</h4><p><strong>特征</strong></p><p>数据库数据全部丢失</p><p><strong>恢复方法</strong></p><ol><li>用最近备份的数据库磁盘替换掉失效的数据库磁盘</li><li>重启数据库管理系统</li><li>读日志文件，从文件末尾反向扫描直至<dump>记录；</dump></li><li>再顺向扫描日志记录，对有<Ticomit>记录的事务做redo(Ti)操作</Ticomit></li></ol><p>例子</p><p>![image-20240412212431459](<a href="https://cdn.jsdelivr.net/Ycx6666">https://cdn.jsdelivr.net/Ycx6666</a> / TyporaImage/G2STxwgUXbnulhJ.png)</p><h3 id="八数据库安全保障技术"><a class="markdownIt-Anchor" href="#八数据库安全保障技术"></a> 八.数据库安全保障技术</h3><h4 id="1绪论"><a class="markdownIt-Anchor" href="#1绪论"></a> 1.绪论</h4><p>•企业的一切信息，活动，财富，都以数据来记载和体现，另外，所有用户的一切信息，活动，财富也都以数据来记载和体现；</p><p>•数据都存储在数据库的表中；</p><p>•数据要有安全性，就必须对每个访问数据库的用户标识其身份，明确其能访问的数据。对其能访问的数据，还要进一步明确能执行什么样的数据操作。只有这样，数据安全性才有保障。</p><p>•安全保障机制必须简单明了，而且完备，安全管理才不会出现漏洞，切实可靠。</p><h4 id="2三道防线"><a class="markdownIt-Anchor" href="#2三道防线"></a> 2.三道防线</h4><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/fOUxbondpJmI1Fe.png" alt="image-20240412212710034"></p><h4 id="3访问权限管理机制"><a class="markdownIt-Anchor" href="#3访问权限管理机制"></a> 3.访问权限管理机制</h4><blockquote><p>用户登录后，要访问数据库中的每一个对象，还有权限要求，权限的授予可以用**&lt;授予者，对象，权限，被授予者&gt;**四元组来表示</p></blockquote><h5 id="权限管理有三条准则"><a class="markdownIt-Anchor" href="#权限管理有三条准则"></a> 权限管理有三条准则：</h5><ol><li>某个对象，其创建者拥有对其的<strong>全部权限</strong>;</li><li>一个用户可以将其拥有的权限<strong>授予给其他用户</strong>；</li><li>授权这可<strong>收回其授予出去的权限</strong>，权限的收回具有<strong>连带性</strong>。</li></ol><h4 id="4审计"><a class="markdownIt-Anchor" href="#4审计"></a> 4.审计</h4><p><strong>•数据库中的另一种安全机制是审计</strong>(Audit)<strong>。审计就如在公共场所安装摄像机，对登录进数据库的用户的一举一动都进行记录。一旦发现安全问题，就可调阅审计记录，查清事实真相。</strong></p><h4 id="5访问权限管理细则的建立"><a class="markdownIt-Anchor" href="#5访问权限管理细则的建立"></a> 5.访问权限管理细则的建立</h4><blockquote><p><strong>设计人员</strong>定义数据库中的<strong>表模式</strong>，明确<strong>用户类型</strong>，明确每类用户的<strong>业务需求</strong>，并给出每项<strong>业务需求与表的映射关系</strong>。</p></blockquote><p>例如，对于大学教务数据库，用户类别有<strong>学生，老师，教管</strong>。</p><p>•<strong>学生类</strong>用户，其<strong>业务需求</strong>包括查阅可选课，选课，查阅成绩，查阅已修课程清单及成绩，已修学分等。</p><p>•<strong>老师类</strong>用户，其<strong>业务需求</strong>包括开课申请，获取选修学生名单，登录成绩，查阅自己的开课记录，统计自己年教学工作量等。</p><p>•<strong>教管类</strong>用户，<strong>业务需求</strong>：课程、学生、老师管理（包括添加，修改，删除)，给学生分班，查阅学生选课情况，查阅老师授课情况，成绩排名等。</p><h4 id="6访问权限管理细则的实施"><a class="markdownIt-Anchor" href="#6访问权限管理细则的实施"></a> 6.访问权限管理细则的实施</h4><blockquote><p><strong>设计人员</strong>明确了<strong>用户类别</strong>，<strong>业务需求</strong>，<strong>映射关系</strong>，也就明确了每类用户<strong>要访问的对象</strong>，以及对其应具有的<strong>操作权限</strong>。</p></blockquote><blockquote><p><strong>数据库管理人员</strong>(DBA)的一项只要职责就是将设计在数据库中贯彻落实，也就是在数据库中创建表，创建用户类别，然后为每个用户类别指定其能访问的对象，明确其操作权限**。**</p></blockquote><blockquote><p><strong>DBA的另一项职责是管理</strong>每类用户的实例，也就是在数据库中为每个用户创建一个账号，再确定其所属的用户类别。在SQL语言中，用户类别被叫做角色ROLE**。**</p></blockquote><h4 id="7数据库中访问权限的管理粒度"><a class="markdownIt-Anchor" href="#7数据库中访问权限的管理粒度"></a> 7.数据库中访问权限的管理粒度</h4><h5 id="对数据中的表"><a class="markdownIt-Anchor" href="#对数据中的表"></a> 对数据中的表</h5><ul><li><p>读权限：SELECT 粒度：表</p></li><li><p>更新权限：INSERT,UPDATE. 粒度：表，还可以进一步<strong>指定到列</strong></p><p>DELETE; 粒度：表</p></li></ul><blockquote><p>•<strong>DBMS中的权限管理</strong>是<strong>粗放型的</strong>。粒度并没有细化到表中的<strong>行</strong>。对于SELECT权限，也没有细化到<strong>列</strong>。<strong>并不能满足业务需求</strong>。</p></blockquote><p><strong>•细化的其它辅助措施：视图，存储过程，应用程序；</strong></p><h4 id="8数据库中存储权限的数据结构"><a class="markdownIt-Anchor" href="#8数据库中存储权限的数据结构"></a> 8.数据库中存储权限的数据结构</h4><p>![image-20240412213750895](<a href="https://cdn.jsdelivr.net/Ycx6666">https://cdn.jsdelivr.net/Ycx6666</a> / TyporaImage/rBW76sXcJMNhzH3.png)</p><h4 id="9创建用户和角色"><a class="markdownIt-Anchor" href="#9创建用户和角色"></a> 9.创建用户和角色</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> jj IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> ROLE teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> jj;</span><br><span class="line"><span class="keyword">DROP</span> ROLE teacher;</span><br></pre></td></tr></table></figure><h4 id="10授权"><a class="markdownIt-Anchor" href="#10授权"></a> 10.授权</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> dept <span class="keyword">TO</span> PUBLIC;<span class="operator">/</span><span class="operator">/</span>给予所有用户(PUBLIC)访问部门表（dept）查询</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">UPDATE</span>(salary) <span class="keyword">ON</span> Emp <span class="keyword">TO</span> Manager; <span class="operator">/</span><span class="operator">/</span>给予经理（Manager）角色对员工表（Emp）的查询（<span class="keyword">SELECT</span>）权限和更新（<span class="keyword">UPDATE</span>）员工工资（salary）的权限：</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> Proj <span class="keyword">TO</span> Diretor <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;<span class="operator">/</span><span class="operator">/</span>给予主管（Director）角色对项目表（Proj）的所有权限（<span class="keyword">ALL</span> PRIVILEGES），并且允许主管再授予这些权限给其他用户（<span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION）：</span><br></pre></td></tr></table></figure><h4 id="11收回权限"><a class="markdownIt-Anchor" href="#11收回权限"></a> 11.收回权限</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> dept <span class="keyword">FROM</span> PUBLIC;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> Emp <span class="keyword">FROM</span> Joe;</span><br></pre></td></tr></table></figure><h4 id="12通过视图来增强安全-将select权限细化到列"><a class="markdownIt-Anchor" href="#12通过视图来增强安全-将select权限细化到列"></a> 12.通过视图来增强安全 --将SELECT权限细化到列</h4><p>增强安全  —例如这里要隐隐藏员工表的birthdate和salary</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> EmpViw <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> eno,ename,...,<span class="keyword">FROM</span> emp.</span><br></pre></td></tr></table></figure><p>//其实就是把视图当作一个表了</p><h4 id="13通过视图来增强安全-将权限细化到行"><a class="markdownIt-Anchor" href="#13通过视图来增强安全-将权限细化到行"></a> 13.通过视图来增强安全 --将权限细化到行</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> AccountTmp <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> eno,name,...,</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> dno<span class="operator">=</span><span class="string">&#x27;410&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>授权</strong></p><blockquote><p>GRANT SELECT ON AccountEmp TO AccountStaff;</p></blockquote><h4 id="14用触发器实现安全审计"><a class="markdownIt-Anchor" href="#14用触发器实现安全审计"></a> 14.用触发器实现安全审计</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> cheatingEmploee</span><br><span class="line">AFTER <span class="keyword">UPDATE</span> <span class="keyword">OF</span> salary <span class="keyword">ON</span> Emp</span><br><span class="line"><span class="keyword">REFERENCING</span> </span><br><span class="line"><span class="keyword">OLD</span> <span class="type">ROW</span> <span class="keyword">AS</span> <span class="keyword">old</span></span><br><span class="line"><span class="keyword">NEW</span> <span class="type">ROW</span> <span class="keyword">AS</span> <span class="keyword">new</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">WHEN</span> (<span class="variable">@new</span>.salary<span class="operator">&gt;</span><span class="variable">@old</span>.salary<span class="operator">*</span><span class="number">1.1</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> auditEmpSalary</span><br><span class="line"><span class="keyword">VALUES</span>(get_user_id(),get_connect_ip()),<span class="type">timestamp</span>(now()),<span class="variable">@new</span>.eno,<span class="variable">@new</span>.salary,<span class="variable">@old</span>.salary)</span><br></pre></td></tr></table></figure><h4 id="15权限管理的简化"><a class="markdownIt-Anchor" href="#15权限管理的简化"></a> 15.权限管理的简化</h4><p>用户角色(ROLE)概念的提出</p><blockquote><p>不给某个用户授权，而是给角色授权，然后再将角色授予给某个用户</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span>(s_no, c_no, semester ) <span class="keyword">ON</span> enroll <span class="keyword">TO</span> student;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">UPDATE</span>(class_no, t_no) <span class="keyword">ON</span> enroll <span class="keyword">TO</span> administrator;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">UPDATE</span>(grade) <span class="keyword">ON</span> enroll <span class="keyword">TO</span> teacher;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> enroll <span class="keyword">TO</span> student, administrator, teacher;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> enroll <span class="keyword">TO</span> administrator, student;</span><br></pre></td></tr></table></figure><blockquote><p>授权是，不要以用户身份授权，而应该以角色身份授权</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="built_in">CURRENT_ROLE</span> <span class="keyword">AS</span> assiant;</span><br><span class="line"><span class="keyword">GRANT</span> student <span class="keyword">TO</span> B GRANTED <span class="keyword">BY</span> <span class="built_in">CURRENT_ROLE</span>;</span><br></pre></td></tr></table></figure><h3 id="九数据处理性能提升技术"><a class="markdownIt-Anchor" href="#九数据处理性能提升技术"></a> 九.数据处理性能提升技术</h3><h4 id="1绪论-2"><a class="markdownIt-Anchor" href="#1绪论-2"></a> 1.绪论</h4><p>•企业数据集中存储在数据库中，海量的数据。从海量的数据中查找和定位数据非常耗时费力。</p><p>•数据集中后，所有用户都要来访问数据库，出现很多用户同时访问情形，数据库服务器成了的负载中心，任务繁重。</p><p>•许多企业的系统因性能低下，超出用户容忍，受到非议与责难，影响企业形象。</p><p>•从挖掘和利用数据特性，机器特性，以及访问特性找出路。</p><p>•有效方法：数据分类/排序、数据索引。</p><h4 id="2数据库性能度量指标"><a class="markdownIt-Anchor" href="#2数据库性能度量指标"></a> 2.数据库性能度量指标</h4><ul><li><strong>事务吞吐量</strong>：单位时间能够处理的交易(事务)数量</li><li><strong>响应时间</strong>：完成单个交易所用的时间</li></ul><p><mark>总指标：事务吞吐量/响应时间</mark></p><h4 id="3充分提高数据库性能的策略"><a class="markdownIt-Anchor" href="#3充分提高数据库性能的策略"></a> 3.充分提高数据库性能的策略</h4><p><strong>挖掘和利用</strong></p><ul><li>数据特性</li><li>硬件特性</li><li>数据访问特性</li></ul><h4 id="4将用户访问频繁的数据放在中央位置把联系紧密的数据临近存储"><a class="markdownIt-Anchor" href="#4将用户访问频繁的数据放在中央位置把联系紧密的数据临近存储"></a> 4.将用户访问频繁的数据放在中央位置，把联系紧密的数据临近存储</h4><p>缓存：可实现磁盘访问的批量化</p><p>![image-20240412222023606](<a href="https://cdn.jsdelivr.net/Ycx6666">https://cdn.jsdelivr.net/Ycx6666</a> / TyporaImage/21QBICuoWJmcVLK.png)</p><h4 id="5提高的方法"><a class="markdownIt-Anchor" href="#5提高的方法"></a> 5.提高的方法</h4><ul><li><p>方法1: 排序;</p></li><li><p>方法2: 索引 （Tree索引和哈希索引）；</p></li><li><p>方法3: 连续的磁盘存储;</p></li><li><p>方法4: 分类、聚簇;</p></li><li><p>方法5: 内存缓冲;</p></li><li><p>方法6: 并发执行;</p></li><li><p>方法7: 查询优化;</p></li><li><p>方法8: 日志和数据分盘存储；</p></li></ul><h4 id="6其中与数据库设计有关的方法"><a class="markdownIt-Anchor" href="#6其中与数据库设计有关的方法"></a> 6.其中与数据库设计有关的方法</h4><ul><li><p><strong>方法1: 排序;</strong></p></li><li><p><strong>方法2: 索引 ；</strong></p></li><li><p><strong>方法3: 连续的磁盘存储;</strong></p></li><li><p><strong>方法4: 分类、聚簇;</strong></p></li><li><p><strong>方法5: 内存缓冲;</strong></p></li><li><p><strong>方法8: 日志和数据分盘存储</strong></p></li></ul><blockquote><p>方法6“并发执行”和方法7“查询优化” ，完全封装在DBMS中，对数据库设计者DBA透明</p><p>其他的方法都需要数据库设计者DBA进行配置</p></blockquote><h4 id="7减少无效运输创建索引"><a class="markdownIt-Anchor" href="#7减少无效运输创建索引"></a> 7.减少无效运输–创建索引</h4><h5 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX stu_index <span class="keyword">ON</span> student(d_no,name);</span><br></pre></td></tr></table></figure><h5 id="正确的用索引"><a class="markdownIt-Anchor" href="#正确的用索引"></a> 正确的用索引：</h5><ul><li><p><strong>不对数据量少的表创建索引</strong>：因为l读磁盘是以页（16k)为单位进行，如果表数据量只有几个页，索引就没意义。就像很少几页的文章，再给它搞个目录页也没有意义；</p></li><li><p><strong>对字符串的字段，例如备注字段，不要创建索引，因为压缩比会小</strong></p></li><li><p>对经常作为查询条件、链接运算、排序、分组、UNION，DISTINCT字段，对其创建索引。</p></li></ul><h4 id="8对于索引的思考"><a class="markdownIt-Anchor" href="#8对于索引的思考"></a> 8.对于索引的思考</h4><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/zpMLw5nOPdD7UBv.png" alt="image-20240412224401802"></p><p>学号sno作为学生表student的主键，其结构为yyyyddssccnn，可以帮助快速定位和检索信息，其中：</p><ul><li>yyyy 代表年份，</li><li>dd 代表部门，</li><li>ss 代表专业代码，</li><li>cc 可能代表班级，</li><li>nn 代表个人编号。</li></ul><p>使用这样结构化的主键，我们可以通过WHERE子句中的LIKE操作符来进行模糊匹配查询，这些查询可以高效地利用主键索引（索引前缀匹配原则）：</p><ul><li><code>sno LIKE ‘20172601%’</code>：查询2017年部门编号为26，班级编号为01的所有学生。</li><li><code>sno LIKE ‘2017260102%’</code>：查询2017年部门编号为26，班级编号为01，个人编号以02开头的学生。</li><li><code>sno LIKE ‘_ _ _ _2601%’</code>：查询所有年份中部门编号为26，班级编号为01的学生。</li></ul><p>这些模糊查询大多数情况下能够有效地使用主键索引，特别是当查询模式定位在主键索引的开始部分时。</p><p>至于选课表enroll，其可能的主键为{sno, cno, semester}，也就是学号、课程号和学期联合起来确定一条独特的记录。关于这个主键是否设置差异或者是否需要建立多个索引，要基于以下考虑：</p><ul><li>索引选择的顺序应该基于查询条件中最常使用的字段顺序。</li><li>不同的索引顺序适用于不同的查询模式。</li><li>通常，选择最常用来过滤查询的字段作为索引的最前部，可以获得更好的性能。</li></ul><p>例如：</p><ul><li>如果查询经常过滤学期，然后是学号，最后是课程号，那{semester, sno, cno}可能是一个好的选择。</li><li>如果查询是基于学号过滤的，那{sno, …}开头的索引优先级会更高。</li></ul><p>一般情况下，不需要为表的所有可能的主键列组合创建索引，因为这样会造成维护成本高和写入性能下降。实践中，应该根据应用程序查询的实际模式来设计和实现所需要的索引。</p><h4 id="9对于索引的思考-2"><a class="markdownIt-Anchor" href="#9对于索引的思考-2"></a> 9.对于索引的思考 -2</h4><ul><li><p>传统概念上，索引是为了减少从磁盘到CPU的无效运输</p></li><li><p>数据还有从内存至CPU的运输，是否也要创建索引，减少从内存到CPU的无效运输？</p></li><li><p>数据从磁盘到内存，和由内存到CPU，有什么区别？</p></li><li><p>对于一个表的外键字段，创建索引时，由于很多行的外键字段值相同，该如何处理，以增大压缩比？</p></li><li><p>为了提升性能，索引虽对用户不可见，但是对应用程序可见。</p></li></ul><ol><li><strong>传统概念上的索引</strong>：确实，传统上认为创建索引的目的之一是为了减少从磁盘读取不必要数据的次数，从而减少I/O操作的时间开销。索引可以帮助数据库快速定位到数据存储位置，减少磁盘的随机访问时间。</li><li><strong>内存至CPU的数据运输</strong>：现在的数据库系统很多都采用了内存数据库技术或者缓存技术，可以将频繁访问的数据保留在内存中。即使在内存中，索引仍然是有用的，因为它仍然可以减少不必要的数据比对操作，从而减少CPU处理时间。因此，索引不只是为了减少硬盘I/O，同样也是为了优化内存中数据的访问效率。</li><li><strong>磁盘到内存，和内存到CPU的区别</strong>：磁盘到内存（Disk to RAM）主要是涉及磁盘I/O操作，速度相对较慢，因为它需要机械移动(如传统HDD)或电子操作(如SSD)。内存到CPU（RAM to CPU）则是涉及将数据从内存传输到CPU，这个速度相对较快，因为都是电子操作，且内存速度通常比磁盘快几个数量级。</li><li><strong>外键字段的索引压缩</strong>：当外键字段的值相同时，可以采用如下方法优化：<ul><li><strong>选择合适的压缩级别</strong>：数据库如Oracle允许你为索引选择不同级别的压缩。选择合适的压缩级别可以在提高压缩比和查询性能之间做出平衡。</li><li><strong>使用部分索引</strong>：如果外键字段和查询模式允许，你可以创建只包括常用值或特定值的部分索引。</li><li><strong>Bitmap索引</strong>：对于有大量重复值的外键字段，如在数据仓库环境中，Bitmap索引可能更加有效，因为它们能高效地压缩相同值。</li><li><strong>使用较小的数据类型</strong>：如果外键的引用范围并不大，可以考虑使用较小的数据类型以减少每个索引项的大小。</li></ul></li><li><strong>索引的可见性</strong>：对用户来说，索引的创建和存在大多数情况下是透明的，即用户无需关心索引的细节，只需关心查询语句即可。然而，对于应用程序和数据库管理员来说，索引对性能的影响是非常明显的。合适的索引可以显著提高数据检索性能，不合适的索引则可能成为性能瓶颈。数据库管理员和开发者可以通过分析查询模式、执行计划等来决定是否创建或优化索引。</li></ol><h4 id="10哈希索引"><a class="markdownIt-Anchor" href="#10哈希索引"></a> 10.哈希索引</h4><blockquote><p>当往表中添加一行记录时，对要哈希的字段计算哈希值，然后把该记录存储在磁盘空间中磁盘地址为该哈希值的地方。</p></blockquote><blockquote><p>查询数据行时，用户给出字段值，通过哈希计算，就可发现该记录的磁盘空间地址，直接读到对应的记录，不须要一行一行地去比对；</p></blockquote><h5 id="适合使用哈希索引的表特性"><a class="markdownIt-Anchor" href="#适合使用哈希索引的表特性"></a> 适合使用哈希索引的表特性：</h5><ol><li><strong>主要用于等值查询</strong>：哈希索引非常适合于那些主要涉及键值完全匹配查询的场景，因为哈希函数可以快速定位到数据行。</li><li><strong>键的分布相对均匀</strong>：当键值分布均匀时，哈希索引能提供较好的性能，因为它可以减少潜在的哈希冲突。</li><li><strong>表中数据变化不频繁</strong>：由于哈希索引不如B树索引高效地支持范围查询和顺序访问，因此更适合数据相对静态的表。</li></ol><h5 id="不适合使用哈希索引的表特性"><a class="markdownIt-Anchor" href="#不适合使用哈希索引的表特性"></a> 不适合使用哈希索引的表特性：</h5><ol><li><strong>需要支持范围查询</strong>：哈希索引不适合于需要执行范围查询的情况，因为哈希函数的结果无法保证值之间的顺序关系。</li><li><strong>键的分布不均匀</strong>：如果表中的键值存在大量重复，或者分布不均匀，可能会导致大量哈希冲突，进而影响索引的性能。</li><li><strong>大量的写操作</strong>：哈希索引可能不太适合频繁进行插入、更新和删除操作的表，因为这些操作可能会导致哈希桶过载，需要重新哈希或频繁处理哈希冲突。</li><li><strong>需要支持前缀搜索或模式匹配</strong>：哈希索引不适合处理前缀搜索或模式匹配的查询，因为哈希函数的结果与数据值的局部模式无关。</li></ol><blockquote><p>总的来说，哈希索引在处理简单的等值查找时效率很高，但在其他方面较为局限。在选择是否使用哈希索引时，应当考虑表的数据特性和查询需求，以确保索引策略与数据使用模式相匹配。</p></blockquote><h4 id="11减少磁头移动路程-把关系紧密的数据临近存储-聚簇clustering"><a class="markdownIt-Anchor" href="#11减少磁头移动路程-把关系紧密的数据临近存储-聚簇clustering"></a> 11.减少磁头移动路程 – 把关系紧密的数据临近存储 – 聚簇(Clustering)</h4><blockquote><p>把关系非常紧密，但位于不同表中的行记录，在磁盘上临近存储。当它们做联接运算时，就能迅速得到结果；</p></blockquote><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/a8DqAvzjMKwkurG.png" alt="image-20240412230022153"></p><h4 id="12提高表数据访问性能-连续空间存储"><a class="markdownIt-Anchor" href="#12提高表数据访问性能-连续空间存储"></a> 12.提高表数据访问性能 – 连续空间存储</h4><blockquote><p>对于表记录，如果<strong>连续地存储</strong>在一个磁道上，当读数据时，数据就可<strong>一个紧挨一个地读到</strong>，访问速度就会大大加快；</p><p>你的计算机使用一段时间后，感觉明显变慢，也是这个道理；</p><p>你可以做<strong>磁盘碎片整理</strong>，让每个文件的数据在磁盘上连续存储，这样就克服了<strong>磁头在盘面空间中到处来回移动</strong>，速度大大加快；</p></blockquote><p>![image-20240412230137895](<a href="https://cdn.jsdelivr.net/Ycx6666">https://cdn.jsdelivr.net/Ycx6666</a> / TyporaImage/Lhbrt5HdCkEfeza.png)</p><h4 id="13访问频繁的数据存储再中央位置"><a class="markdownIt-Anchor" href="#13访问频繁的数据存储再中央位置"></a> 13.访问频繁的数据存储再中央位置</h4><blockquote><p>对于<strong>访问频繁</strong>的数据表存储在<strong>中央位置</strong>，那么就可减少磁头移动的总路程；</p></blockquote><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/VcMYiJgn14Z6fux.png" alt="image-20240412230237500"></p><h5 id="实现方法"><a class="markdownIt-Anchor" href="#实现方法"></a> 实现方法</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE  basicdata DATAFILE ‘c:\oracle\data\basicdata.dbf’  SIZE <span class="number">1000</span>M;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (</span><br><span class="line">eno <span class="type">CHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">ename <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line"></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (eno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (dno)  <span class="keyword">REFERENCES</span> Dept(dno),</span><br><span class="line"></span><br><span class="line">TABLESPACE  basicdata,</span><br><span class="line">                  STORAGE (<span class="keyword">INITIAL</span> <span class="number">100</span>M NEXT <span class="number">100</span>M)<span class="operator">/</span><span class="operator">/</span>初始<span class="number">100</span>M，追加<span class="number">100</span>M</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="14提高数据处理性能-缓存"><a class="markdownIt-Anchor" href="#14提高数据处理性能-缓存"></a> 14.提高数据处理性能 – 缓存</h4><blockquote><p>数据存在磁盘上可靠。访问磁盘也是这个道理，很费时间。<strong>缓存</strong>能使得<strong>批量读磁盘</strong>，<strong>批量写磁盘</strong>成为可能，<strong>可减少磁盘运输次数，也可减少磁头移动的总路程</strong>。其原理：<strong>规模效益</strong>。；</p></blockquote><h4 id="15提高数据处理性能-并发执行"><a class="markdownIt-Anchor" href="#15提高数据处理性能-并发执行"></a> 15.提高数据处理性能 – 并发执行</h4><blockquote><p>并发处理在获得效率提升的同时，也引入了访问冲突的问题，导致数据的不一致和不正确</p></blockquote><p><img src="/2024/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A02-md/../../../Typora/Project/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%EF%BC%885-8%EF%BC%89.assets/8M2pqTyfjvOxJC5.png" alt="image-20240412230851792"></p><h5 id="并发控制"><a class="markdownIt-Anchor" href="#并发控制"></a> 并发控制</h5><ul><li><p><strong>当前等待执行的事务集：{Ta}，正在执行的事务集:{T<em>x</em>}。任一T<em>c</em>属于{T<em>a</em>}，如果它和{T<em>x</em>}不冲突，那么就可调度执行T<em>c</em>。</strong></p></li><li><p><strong>当服务器受理一个客户的事务请求T<em>c</em>时，如果它和{T<em>x</em>}不冲突，那么就执行它，并将其加进{T<em>x</em>}中。否则将它加进{T<em>a</em>}中。</strong></p></li><li><p><strong>当一个事务执行完毕后，就将它从{T<em>x</em>}中剔除，然后对{T<em>a</em>}中的事务逐一检查，调度那些与更新后的{T<em>x</em>}无冲突的事务去执行，并将其从{T<em>a</em>}中移入到{T<em>x</em>}中。</strong></p></li></ul><h4 id="16提高数据处理行呢个-查询-优化"><a class="markdownIt-Anchor" href="#16提高数据处理行呢个-查询-优化"></a> 16.提高数据处理行呢个 – 查询 优化</h4><p>![image-20240412231121422](<a href="https://cdn.jsdelivr.net/Ycx6666">https://cdn.jsdelivr.net/Ycx6666</a> / TyporaImage/uVZT3dlaSp5fNwA.png)</p><h4 id="17提高数据处理性能-配置单独专用的日志磁盘"><a class="markdownIt-Anchor" href="#17提高数据处理性能-配置单独专用的日志磁盘"></a> 17.提高数据处理性能 – 配置单独专用的日志磁盘</h4><blockquote><p>当配置单独的日志磁盘时，正常运行时，日志具有只写不读的特点，而且是递增，<strong>磁头可一个挨一个地写，不用来回移动，性能得到极大提高</strong>。</p></blockquote><h4 id="18索引-最重要的技能"><a class="markdownIt-Anchor" href="#18索引-最重要的技能"></a> 18.索引 – 最重要的技能</h4><ul><li><p><strong>索引原理：压缩和排序。</strong></p></li><li><p><strong>增大压缩比的方法：分组；</strong></p></li><li><p><strong>分组，与排序相比，约束条件没有那么强！</strong></p></li><li><p><strong>例如，enroll表，以学号分组存储时，即一个学生的选课记录临近存储。与集合概念相比，分组提出了要求；</strong></p></li><li><p><strong>于是，对于enroll表，以学号字段创建索引时，一个学生只有一条索引记录，压缩比增大了n倍，n是一个学生的选课记录行数。</strong></p></li><li><p><strong>NOSQL中的key-Value模型中，value可以是一个集合/表。</strong></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#数据库复习(算是?)2&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;br&gt;
  &lt;/p&gt;&lt;h2 style=&quot;text-align:center;color:#F4E0EA&quot;&gt;
    樱春雪
	&lt;/h2&gt;
  &lt;br&gt;
  &lt;br&gt;
	&lt;div style=&quot;t</summary>
      
    
    
    
    <category term="数据库" scheme="https://ycx6666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="总结" scheme="https://ycx6666.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Node.js入门</title>
    <link href="https://ycx6666.github.io/2024/03/Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://ycx6666.github.io/2024/03/Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-15T10:47:04.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodejs使用教程"><a class="markdownIt-Anchor" href="#nodejs使用教程"></a> Node.js使用教程</h1><p align="center">  <br>  </p><h2 style="text-align:center;color:#F4E0EA">    樱春雪</h2>  <br>  <br><div style="text-align:center">    <a href="https://codeload.github.com/liangjingkanji/DrakeTyporaTheme/zip/refs/heads/master">湖南大学</a>  | <a href="https://theme.typora.io/theme/Drake/">软件工程</a>  | <a href="https://github.com/liangjingkanji/DrakeTyporaTheme/blob/master/issues.md">2204</a></div><br><br><img style="clear:both;display:block;margin:auto;width:400px;height:100px" src="/2024/03/Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/7HN)MKDR%[2BI2$@Q69A8$H.png">  <br><p></p><h2 id="1读取文件内容"><a class="markdownIt-Anchor" href="#1读取文件内容"></a> 1.读取文件内容</h2><h3 id="fs文件系统模块"><a class="markdownIt-Anchor" href="#fs文件系统模块"></a> fs文件系统模块</h3><p>fs模块时node.js 官方提供的用来操作文件的模块</p><blockquote><p>fs.readFile.()方法，用来读取指定文件中的内容</p><p>fs.writeFile()方法，用来向指定的文件中写入文件</p></blockquote><p>入股要在js代码中，使用fs模块操作文件，需要用到require函数调用模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure><p>###fs.readFile()的语法格式</p><p>如果在参数列表中的参数被中括号包括起来，表示其是一个可选参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(path[,options],callback</span><br></pre></td></tr></table></figure><blockquote><p>参数一：必选参数，字符串，表示文件的路径</p><p>参数二：可选参数，表示以什么编码方式来读取文件</p><p>参数三：必选参数，文件读取完成后，通过回调函数拿到读取的结果</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;路径&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,dataStr</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="判断文件是否读取成功"><a class="markdownIt-Anchor" href="#判断文件是否读取成功"></a> 判断文件是否读取成功</h3><p>可以判断err对象是否为null，从而知晓</p><h2 id="2向指定的文件中写入内容"><a class="markdownIt-Anchor" href="#2向指定的文件中写入内容"></a> 2.向指定的文件中写入内容</h2><p>###fs.writeFile()的语法格式</p><p>使用这个方法，可以写入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fd.<span class="title function_">writrFile</span>(file,data[,options],callback)</span><br></pre></td></tr></table></figure><blockquote><p>参数一：必选参数，需要指定一个文件路径的字符串，表示文件的存储路劲</p><p>参数二：必选参数，表示要写入的内容</p><p>参数三：可选参数，表示以什么文件格式写入，默认utf8</p><p>参数四：必选参数，文件写入完成后的回调函数</p></blockquote><p><strong>需要注意的是，如果路径已经存在，那么或覆盖原有的内容</strong></p><p>###判断文件是否写入成功</p><p>如果写入成功，那么err的值等于null</p><p>如果写入失败，err的值是一个错误对象</p><h2 id="3处理路径问题"><a class="markdownIt-Anchor" href="#3处理路径问题"></a> 3.处理路径问题</h2><h3 id="fs模块-路径动态拼接的问题"><a class="markdownIt-Anchor" href="#fs模块-路径动态拼接的问题"></a> fs模块-路径动态拼接的问题</h3><p>在使用fs模块时，如果使用的时./或者…/开头的相对路径时，很容易出现动态拼接错误的问题。</p><p><strong>原因</strong>：在代码运行的时候，<mark>会以执行node命令时所处的目录</mark>，动态拼接出被操作文件的完整路径。</p><p><strong>解决方法</strong>:直接使用绝对路径。</p><p><strong>注意</strong>：在js中，一个反斜杠“&quot;表示转移符，需要写两个反斜杠才表示一个反斜杠&quot;\&quot;。</p><p><strong>缺点</strong>：移植性非常差，并且不利于维护</p><p><strong>解决方法</strong>:<mark>__dirname</mark>表示当前文件所处的目录，<mark>不会被node命令所处目录变化而变化</mark>。</p><p>例如</p><h3 id="031使用path路径模块"><a class="markdownIt-Anchor" href="#031使用path路径模块"></a> 03.1使用path路径模块</h3><p>path是用来专门处理路径的模块，他提供了一系列的方法和属性，用来满足用户对路径的处理需求。</p><p>exp</p><blockquote><p>path.join()方法：用来将多个路径片段拼接成一个完整的路径字符串。</p><p>path.basename()方法：用来从路径字符串中，将文件名字解析出来。</p></blockquote><p>需要以下导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="032路径拼接"><a class="markdownIt-Anchor" href="#032路径拼接"></a> 03.2路径拼接</h3><p>path.join()的代码示例：</p><p>==注意:<mark>在</mark>…/==之前的一个字符串将被抵消。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//../抵消</span></span><br><span class="line"><span class="keyword">const</span> pathStr=path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;/d&#x27;</span>, <span class="string">&#x27;/e&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr)<span class="comment">//输出\a\b\d\e</span></span><br></pre></td></tr></table></figure><p><strong>以后进行拼接时尽量使用path.join(),可以避免错误输入路径带来的某些错误（.)</strong></p><h3 id="03-3获取路径中的文件名"><a class="markdownIt-Anchor" href="#03-3获取路径中的文件名"></a> 03-3获取路径中的文件名</h3><p>**1.path.basename()😗*可以获取路径中的最后一部分，可以使用这个方法获取路径中的文件名，格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[,ext])</span><br></pre></td></tr></table></figure><p><strong>代码示例</strong>，使用这个方法，可以从一个文件路径中，获取到文件的名称部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullname = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"><span class="keyword">const</span> fullname2 = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.html&#x27;</span>)<span class="comment">//消除扩展名</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullname)<span class="comment">//拿到文件名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullname2)</span><br></pre></td></tr></table></figure><h3 id="03-4如何获取路径中的文件扩展名"><a class="markdownIt-Anchor" href="#03-4如何获取路径中的文件扩展名"></a> 03-4如何获取路径中的文件扩展名</h3><p><strong>语法格式</strong>：path.extname()的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fext)<span class="comment">//.html</span></span><br></pre></td></tr></table></figure><h3 id="03-5时钟案例"><a class="markdownIt-Anchor" href="#03-5时钟案例"></a> 03-5时钟案例</h3><p>步骤：</p><p>​1.创建两个正则表达式，用来匹配<style>和<scipt>标签</p><p>​2.使用fs模块，读取需要被处理的HTML文件</p><p>​3.自定义resolveCSS方法，写入index.css文件</p><p>​4.自定义resolveJs方法，写入index.js文件</p><p>​5.自定义resolveHtml方法，写入index.html文件</p><p>resolveCSS()方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveCSS</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> r1 = regStyle.<span class="title function_">exec</span>(htmlStr)</span><br><span class="line">  <span class="keyword">const</span> newCSS = r1[<span class="number">0</span>].<span class="title function_">replace</span>(<span class="string">&#x27;&lt;style&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&lt;/style&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="comment">//写入index.css文件</span></span><br><span class="line">  fs.<span class="title function_">writeFile</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;../素材1/index.css&#x27;</span>), newCSS, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入CSS样式失败！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入样式文件成功!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resolveJs()方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveJs</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> r2 = regJs.<span class="title function_">exec</span>(htmlStr)</span><br><span class="line">  <span class="keyword">const</span> newJs = r2[<span class="number">0</span>].<span class="title function_">replace</span>(<span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&lt;/script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="comment">//写入index.css文件</span></span><br><span class="line">  fs.<span class="title function_">writeFile</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;../素材1/index.js&#x27;</span>), newJs, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入JS文件失败！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入JS文件成功!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rsolveHTML()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveHTML</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">  <span class="comment">//调用replace方法</span></span><br><span class="line">  <span class="keyword">const</span> newHTML=htmlStr.<span class="title function_">replace</span>(</span><br><span class="line">    regStyle,<span class="string">`&lt;link rel=&quot;stylesheet&quot; href=&quot;./index.css&quot;&gt;`</span></span><br><span class="line">  ).<span class="title function_">replace</span>(</span><br><span class="line">    regJs,<span class="string">&#x27;&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;&#x27;</span></span><br><span class="line">  )</span><br><span class="line">  <span class="comment">//写入</span></span><br><span class="line">  fs.<span class="title function_">writeFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./素材1/index.html&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入HTML文件失败！&#x27;</span>+err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入HTML文件成功！&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark>注意点</mark></p><blockquote><p>1.一定要新建一个文件夹</p><p>2.使用fs.write()方法写入内容时，重复写入会导致新内容覆盖旧内容</p></blockquote><h2 id="4http模块"><a class="markdownIt-Anchor" href="#4http模块"></a> 4.HTTP模块</h2><p>###4.1什么是HTTP模块</p><p><mark>概念</mark></p><p>在网络节点，负责消费资源的电脑，叫做客户端；负责对外提供网络资源的电脑，叫做服务器。</p><p><mark>方法</mark></p><p>http模块中的http.createServer()方法，能把一台普通的电脑，变成一台Web服务器</p><p><mark>引入</mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="42进一步理解http模块的作用"><a class="markdownIt-Anchor" href="#42进一步理解http模块的作用"></a> 4.2进一步理解http模块的作用</h3><p><mark>服务器和普通电脑的区别</mark></p><p>服务器和普通电脑的区别，服务器上安装了Web服务器软件，例如：IIS，Apache等，通过这些服务器软件，能把一台普通的电脑变成一台Web服务器。</p><p><strong>在nodejs中，我们不需要这些软件，我们可以通过HTTP模块创建一个服务器</strong></p><h3 id="43服务器相关概念"><a class="markdownIt-Anchor" href="#43服务器相关概念"></a> 4.3服务器相关概念</h3><p><mark>IP地址</mark></p><ul><li><p>互联网上每台计算机的唯一标识。</p></li><li><p>格式：“点分十进制”，a.b.c.d，其中abcd都是0-255之间的十进制整数。</p></li><li><p><strong>在cmd中输入ping 网站 可以获取网站IP地址</strong></p></li><li><p>在自己电脑中输入127.0.0.1就可以访问本机了。</p></li></ul><p><mark>域名和域名服务器</mark></p><ul><li><p>IP地址不够直观，因此发明了域名来方便人们记忆</p></li><li><p>IP地址和域名是一一对应的关系，这种关系存放在一种叫做**域名服务器(DNS)**的电脑中。</p></li></ul><p><strong>注意</strong></p><p>127.0.0.1对应的域名是localhost</p><p><mark>端口号</mark></p><p>一台电脑中，可以运行很多个Web服务，每个Web都对应一个唯一的端口号，通过端口号，可以将网络请求准确的发给对应的Web服务。</p><p><strong>注意</strong></p><ul><li><p>每个端口号不能被同时多个Web服务占用</p></li><li><p>在是基于应用中，只有80端口可以在URL中省略。</p></li></ul><h3 id="44创建最基本的web服务器"><a class="markdownIt-Anchor" href="#44创建最基本的web服务器"></a> 4.4创建最基本的Web服务器</h3><h4 id="1创建最基本的web服务器的步骤"><a class="markdownIt-Anchor" href="#1创建最基本的web服务器的步骤"></a> 1.创建最基本的Web服务器的步骤</h4><ol><li>导入http模块</li><li>创建Web服务器示例</li><li>为服务器绑定request时间，监听客户端请求</li><li>启动服务器</li></ol><h4 id="2示例代码"><a class="markdownIt-Anchor" href="#2示例代码"></a> 2.示例代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建示例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.绑定request</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;reques&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;某人访问了服务器....&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.启动</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running...&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="45req"><a class="markdownIt-Anchor" href="#45req"></a> 4.5.REQ</h3><p>3.req请求对象，只要服务器收到了客户端的请求，就会调用通过server.on()位服务器绑定的事件处理函数</p><p>包含了与客户端相关的数据和属性</p><blockquote><p>req.url是客户端请求的URL地址</p><p>req.method是客户端请求的method类型</p></blockquote><h3 id="46时钟web服务器案例"><a class="markdownIt-Anchor" href="#46时钟web服务器案例"></a> 4.6时钟Web服务器案例</h3><h4 id="1核心思路"><a class="markdownIt-Anchor" href="#1核心思路"></a> 1.核心思路</h4><blockquote><p>将每个文件的实际存放路径，作为每个资源的请求URL地址</p></blockquote><h4 id="2实现步骤"><a class="markdownIt-Anchor" href="#2实现步骤"></a> 2.实现步骤</h4><ol><li>导入需要的模块</li><li>创建基本Web服务器</li><li>将资源url地址作为文件存放路径</li><li>读取文件内容并响应客户端</li><li>优化资源请求路径</li></ol><h4 id="3导入需要的模块"><a class="markdownIt-Anchor" href="#3导入需要的模块"></a> 3.导入需要的模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="4将资源url作为文件存放路径"><a class="markdownIt-Anchor" href="#4将资源url作为文件存放路径"></a> 4.将资源url作为文件存放路径</h4><p>获取到的请求路径:<mark>/index.html</mark></p><h4 id="5读取文件内容并发送给客户端"><a class="markdownIt-Anchor" href="#5读取文件内容并发送给客户端"></a> 5.读取文件内容并发送给客户端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(fpath, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//4.2读取失败</span></span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;404 Not Found&#x27;</span>)</span><br><span class="line">  <span class="comment">//4.3读取成功</span></span><br><span class="line">  res.<span class="title function_">end</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>如果获取的文件内容中引用了其他文件，那么浏览器会自动请求</p></blockquote><h4 id="6优化请求资源的路径"><a class="markdownIt-Anchor" href="#6优化请求资源的路径"></a> 6.优化请求资源的路径</h4><p>如果请求根路径，那么就用/clock/index.html来代替</p><h2 id="5模块化"><a class="markdownIt-Anchor" href="#5模块化"></a> 5.模块化</h2><h3 id="51是么是模块化"><a class="markdownIt-Anchor" href="#51是么是模块化"></a> 5.1是么是模块化</h3><h4 id="1编程领域中的模块化"><a class="markdownIt-Anchor" href="#1编程领域中的模块化"></a> 1.编程领域中的模块化</h4><p>此处的模块化，就是固定遵守的规则，把一个大文件拆分成独立并且互相依赖的多个小模块。</p><p><strong>好处</strong></p><blockquote><p>提高了代码复用性</p><p>提高了代码可维护性</p><p>可以实现按需加载</p></blockquote><h3 id="52模块化规范"><a class="markdownIt-Anchor" href="#52模块化规范"></a> 5.2模块化规范</h3><p>模块规范化就是在对代码进行模块化的拆分与组合时，需要遵守的那些规则</p><p>好处：降低了沟通的成本，极大方便了各个模块的相互调用</p><h2 id="6nodejs中的模块化"><a class="markdownIt-Anchor" href="#6nodejs中的模块化"></a> 6.Nodejs中的模块化</h2><h3 id="61模块的分类"><a class="markdownIt-Anchor" href="#61模块的分类"></a> 6.1模块的分类</h3><blockquote><p><strong>内置模块</strong>：内置模块是由Nodejs官方提供的，例如fs，path,http等等</p><p><strong>自定义模块</strong>：用户创建的每个.js文件，都是自定义模块</p><p><strong>第三方模块</strong>:由第三方开发出的模块，不是官方也不是用户提供的</p></blockquote><h3 id="62加载模块"><a class="markdownIt-Anchor" href="#62加载模块"></a> 6.2加载模块</h3><p>使用强大的<mark>require</mark>方法，可以加载需要的各种模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载内置模块</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//加载用户自定义模块，如果去掉.js后缀名也能运行</span></span><br><span class="line"><span class="keyword">const</span> custom=<span class="built_in">require</span>(<span class="string">&#x27;./custom.js&#x27;</span>)</span><br><span class="line"><span class="comment">//加载第三方模块</span></span><br><span class="line"><span class="keyword">const</span> moment=<span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br></pre></td></tr></table></figure><p><mark>使用其他模块时，调用时就会加载模块的代码</mark></p><h3 id="63模块作用域"><a class="markdownIt-Anchor" href="#63模块作用域"></a> 6.3模块作用域</h3><h4 id="1什么是作用域"><a class="markdownIt-Anchor" href="#1什么是作用域"></a> 1.什么是作用域</h4><p>和函数作用域类似，自定义模块中的方法、变量等等，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域</p><h4 id="2好处"><a class="markdownIt-Anchor" href="#2好处"></a> 2.好处</h4><p>防止全局变量污染的问题</p><p><img src="C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240321205245056.png" alt="image-20240321205245056" /></p><p><img src="C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240321205419593.png" alt="image-20240321205419593" /></p><h3 id="64向外共享模块作用域中的成员"><a class="markdownIt-Anchor" href="#64向外共享模块作用域中的成员"></a> 6.4向外共享模块作用域中的成员</h3><h4 id="1module对象"><a class="markdownIt-Anchor" href="#1module对象"></a> 1.module对象</h4><p>每个.js自定义文件中都有一个module对象，他存储了当前模块的数据等等</p><p><img src="C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240321205637062.png" alt="image-20240321205637062" /></p><h4 id="2moduleexports对象"><a class="markdownIt-Anchor" href="#2moduleexports对象"></a> 2.module.exports对象</h4><p>在自定义模块中，可以使用这个对象可以将模块内的成员共享出去；</p><p>外界使用require()方法导入自定义模块时，得到的就是module.exports所指向的对象</p><p><mark>在一个自定义模块中，默认的module.exports对象就是空对象，也就是module对象</mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sayHello</span>=<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;usename&#125;</span>`</span>)</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">usename</span> = <span class="string">&#x27;zs&#x27;</span><span class="comment">//像module.exports中挂载一个属性</span></span><br></pre></td></tr></table></figure><p><img src="Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.assets/image-20240321222048156.png" alt="image-20240321222048156" /></p><h4 id="3共享成员的注意点"><a class="markdownIt-Anchor" href="#3共享成员的注意点"></a> 3.共享成员的注意点</h4><p>使用require()方法导入模块时，导入的结果，永远以module.exports指向的对象为准</p><h4 id="4exports对象"><a class="markdownIt-Anchor" href="#4exports对象"></a> 4.exports对象</h4><p>module.exports和exports指向的是同一个对象</p><p>最终指向的值，<mark>以module.exports</mark>指向的对象为准</p><h4 id="5moduleexports和exports使用误区"><a class="markdownIt-Anchor" href="#5moduleexports和exports使用误区"></a> 5.module.exports和exports使用误区</h4><blockquote><ol><li>使用require时，得到的永远都是module.exports对象</li></ol></blockquote><p>为了防止混乱，建议大家不要在同一个模块中同时使用两者</p><h3 id="65nodejs中的模块化规范"><a class="markdownIt-Anchor" href="#65nodejs中的模块化规范"></a> 6.5Nodejs中的模块化规范</h3><p>nodejs遵循了<strong>CommonJS模块化规范</strong>，其规定了模块的特性和各模块之间如何互相依赖</p><p><strong>CommonJS规定：</strong></p><blockquote><p>1.每个模块内部，module变量代表当前某块</p><p>2.module变量是一个对象，他的exports属性(即module.exports)是对外的接口</p><p>3.加载某个模块，其实是加载该模块的module.exports属性，require()方法用于加载模块</p></blockquote><h2 id="7npm与包"><a class="markdownIt-Anchor" href="#7npm与包"></a> 7.npm与包</h2><h3 id="71初步入门"><a class="markdownIt-Anchor" href="#71初步入门"></a> 7.1初步入门</h3><h4 id="什么是包"><a class="markdownIt-Anchor" href="#什么是包"></a> 什么是包</h4><p>Nodejs中的第三方模块又叫做包</p><h4 id="包的来源"><a class="markdownIt-Anchor" href="#包的来源"></a> 包的来源</h4><p>Nodejs的内置模块和自定义模块，都是由第三方团队制作的</p><h4 id="为什么需要"><a class="markdownIt-Anchor" href="#为什么需要"></a> 为什么需要</h4><p><mark>原因</mark>Nodejs的内置某块仅提供了一些底层的api，导致开发时效率低</p><p>包是基于内置模块封装出来的</p><h4 id="怎么下载"><a class="markdownIt-Anchor" href="#怎么下载"></a> 怎么下载</h4><p>npm公司 &lt;<a href="http://www.npmjs.com">www.npmjs.com</a>&gt;是全球最大的包共享平台</p><p>npm公司还提供了一个地址为 <a href="https://registy.npmjs.org/%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%9D%A5%E5%AF%B9%E5%A4%96%E5%85%B1%E4%BA%AB%E6%89%80%E6%9C%89%E7%9A%84%E5%8C%85%EF%BC%8C%E4%BD%86%E6%98%AF%E5%85%B6%E6%89%93%E4%B8%8D%E5%BC%80%E3%80%82">https://registy.npmjs.org/的服务器，来对外共享所有的包，但是其打不开。</a></p><h4 id="如何下载"><a class="markdownIt-Anchor" href="#如何下载"></a> 如何下载</h4><p>这个包管理工具叫做<mark>Node Package Manager</mark>(简称npm包管理工具)</p><h3 id="72npm初体验"><a class="markdownIt-Anchor" href="#72npm初体验"></a> 7.2npm初体验</h3><h4 id="1格式化实践的传统做法"><a class="markdownIt-Anchor" href="#1格式化实践的传统做法"></a> 1.格式化实践的传统做法</h4><p>dateFormat()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">dtStr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dtStr)</span><br><span class="line">  <span class="keyword">const</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">  <span class="keyword">const</span> m = <span class="title function_">padZero</span>(dt.<span class="title function_">getMonth</span>()+<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> d = <span class="title function_">padZero</span>(dt.<span class="title function_">getDate</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hh = <span class="title function_">padZero</span>(dt.<span class="title function_">getHours</span>())</span><br><span class="line">  <span class="keyword">const</span> mm = <span class="title function_">padZero</span>(dt.<span class="title function_">getMinutes</span>())</span><br><span class="line">  <span class="keyword">const</span> ss = <span class="title function_">padZero</span>(dt.<span class="title function_">getSeconds</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padZero</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (n &gt; <span class="number">9</span> ? n : <span class="string">&#x27;0&#x27;</span>+n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  dateFormat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2格式化时间高级做法"><a class="markdownIt-Anchor" href="#2格式化时间高级做法"></a> 2.格式化时间高级做法</h4><blockquote><p>1.使用npm包管理工具，安装时间包moment</p><p>2.使用require</p><p>3.参考官方文档调用API</p></blockquote><h4 id="3在项目中安装包"><a class="markdownIt-Anchor" href="#3在项目中安装包"></a> 3.在项目中安装包</h4><p>初次安装包后，会在项目文件夹下多一个叫做node_modules的文件夹和package-lock.json的文件</p><p>第一个用于存放所有一安装到项目中的包</p><p>第二个记录了第一个目录下每一个包的下载信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install 包的完整名称</span><br><span class="line">可以简写为</span><br><span class="line"> npm i 完整的名称</span><br></pre></td></tr></table></figure><h4 id="4使用moment"><a class="markdownIt-Anchor" href="#4使用moment"></a> 4.使用moment</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dt = <span class="title function_">moment</span>().<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH-mm-ss&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dt)</span><br></pre></td></tr></table></figure><h4 id="5安装指定版本的包"><a class="markdownIt-Anchor" href="#5安装指定版本的包"></a> 5.安装指定版本的包</h4><p>在包的名称之后，<mark>通过@符号跟上具体的版本号</mark>，从而安装指定版本的包</p><p>后安装的相同的包会覆盖原有的包</p><h4 id="6包的语义化版本规范"><a class="markdownIt-Anchor" href="#6包的语义化版本规范"></a> 6.包的语义化版本规范</h4><p>包的版本号是按照点分十进制形式进行定义的，总共由三位数字</p><blockquote><p>1.第一位数字：大版本</p><p>2.第二位数字：功能版本</p><p>3.第三位数字：Bug修复版本</p></blockquote><h3 id="73包管理配置文件"><a class="markdownIt-Anchor" href="#73包管理配置文件"></a> 7.3包管理配置文件</h3><p>npm<strong>规定</strong>，在项目根目录中，必须提供一个叫做package.json的包配置管理文件，用来记录与项目有关的一些配置信息</p><ul><li><strong>项目的名称、版本号、描述等等</strong></li><li><strong>项目中用到了那些包</strong></li><li><strong>那些包只会在开发期间用到</strong></li><li><strong>那些包在开发和部署起家都会用到</strong></li></ul><h4 id="1多人协作的问题"><a class="markdownIt-Anchor" href="#1多人协作的问题"></a> 1.多人协作的问题</h4><ol><li>第三方包体积过大，不方柏霓团队成员之间共享项目源代码</li></ol><h4 id="2如何记录项目中安装了哪些包"><a class="markdownIt-Anchor" href="#2如何记录项目中安装了哪些包"></a> 2.如何记录项目中安装了哪些包</h4><p>在项目根目录中，创建一个叫做<mark>package.json</mark>的配置文件，用于记录项目中安装了哪些包，</p><p>以后在项目开发中，一定要把<strong>node_modules文件夹</strong>，添加到.gitignore忽略文件中</p><h4 id="3快速创建packagejson"><a class="markdownIt-Anchor" href="#3快速创建packagejson"></a> 3.快速创建package.json</h4><p>可以在执行目录中，快速创建package.json包管理配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>上述命令只能在英文目录下运行</p><p>运行npm install时，npm包管理工具会自动把包的名称和版本号，记录到package.json文件中</p></blockquote><p>**PS:**现在已经可以自动创建package.json文件了！</p><h4 id="4depenencies节点"><a class="markdownIt-Anchor" href="#4depenencies节点"></a> 4.depenencies节点</h4><p>这个节点，用于记录npm install 安装了哪些包，会记录包的名称和版本号</p><p><img src="Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.assets/image-20240324214311357.png" alt="image-20240324214311357" /></p><h4 id="5一次性安装所有包"><a class="markdownIt-Anchor" href="#5一次性安装所有包"></a> 5.一次性安装所有包</h4><p>拿到一个node_module被删除了的项目之后，需要先把所有的包下载下来，不然运行不起来</p><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="comment">//npm i</span></span><br></pre></td></tr></table></figure><p>可以一次性安装所有的包</p><h4 id="6卸载包"><a class="markdownIt-Anchor" href="#6卸载包"></a> 6.卸载包</h4><p>可以运行<mark>npm uninstall + 指定包</mark>命令</p><p>注意，删除包之后，在node_mudules中业户删除包信息</p><h4 id="7devdependencies节点"><a class="markdownIt-Anchor" href="#7devdependencies节点"></a> 7.devDependencies节点</h4><p>如果某些包旨在项目开发阶段使用，可以把这些包记录到<strong>devDependencies</strong>节点中；</p><p>如果某些包在开发与上线中都要用到，那建议记录到<strong>Dependencies</strong></p><p>可以使用如下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装指定包到devDependencies</span></span><br><span class="line">npm i 包名 -D</span><br><span class="line"><span class="comment">//上述命令是简写形式</span></span><br><span class="line">npm install 包名 --save-dev</span><br></pre></td></tr></table></figure><h3 id="74解决下包速度慢的问题"><a class="markdownIt-Anchor" href="#74解决下包速度慢的问题"></a> 7.4解决下包速度慢的问题</h3><h4 id="1为什么慢"><a class="markdownIt-Anchor" href="#1为什么慢"></a> 1.为什么慢</h4><p>使用npm下包时，默认从国外网站进行下载</p><p>官方源 <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p><h4 id="2淘宝镜像"><a class="markdownIt-Anchor" href="#2淘宝镜像"></a> 2.淘宝镜像</h4><p><mark>已安装</mark></p><h4 id="3切换npm下包镜像源"><a class="markdownIt-Anchor" href="#3切换npm下包镜像源"></a> 3.切换npm下包镜像源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry //查看下包源</span><br><span class="line">npm config set registry=https://registry.npm.taobao.rog/ //切换为淘宝镜像源</span><br></pre></td></tr></table></figure><h4 id="4nrm"><a class="markdownIt-Anchor" href="#4nrm"></a> 4.nrm</h4><p>为了更方便切换，可以使用nrm这个工具，快速查看和切换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#安装全局</span><br><span class="line">npm i nrm -g</span><br><span class="line">#查看可用镜像源</span><br><span class="line">nrm ls</span><br><span class="line">#将下包镜像源切换为taobao</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><h3 id="75包的分类"><a class="markdownIt-Anchor" href="#75包的分类"></a> 7.5包的分类</h3><h4 id="1项目包"><a class="markdownIt-Anchor" href="#1项目包"></a> 1.项目包</h4><p>那些被安装到项目中的node_modules的包，都是项目包</p><blockquote><p>开发依赖包 在devD</p><p>核心依赖包 在D</p></blockquote><h4 id="2全局包"><a class="markdownIt-Anchor" href="#2全局包"></a> 2.全局包</h4><p>在执行<mark>npm install</mark>时候，如果提供了-g参数，则会把她安装为全局包</p><p><mark>注意-</mark></p><p>只有工具性的包，才有全局安装的必要***</p><p>判断某个包是否全局才能使用，查看官方文档即可***</p><h4 id="3i5ting_toc"><a class="markdownIt-Anchor" href="#3i5ting_toc"></a> 3.i5ting_toc</h4><blockquote><p>i5ting_doc是一个可以把md文档转为htnl页面的小工具，使用步骤如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#将其安装为全局包</span><br><span class="line">npm install -g i5ting_toc</span><br><span class="line">#调用i5ting_toc，轻松和实现md 转 html页面功能</span><br><span class="line">i5ting_toc -f 要转换的md文件路径 -o</span><br></pre></td></tr></table></figure><h4 id="4规范的包结构"><a class="markdownIt-Anchor" href="#4规范的包结构"></a> 4.规范的包结构</h4><ol><li>每一个包都需要单独的目录</li><li>包的顶级目录下必须要package.json这个配置文件</li><li>package.json必须包含name,version,main三个属性，对应了包的名字、版本号和包的入口</li></ol><h3 id="76开发属于自己的包"><a class="markdownIt-Anchor" href="#76开发属于自己的包"></a> 7.6开发属于自己的包</h3><h4 id="1skip"><a class="markdownIt-Anchor" href="#1skip"></a> 1.skip</h4><h4 id="2初始化包的基本结构"><a class="markdownIt-Anchor" href="#2初始化包的基本结构"></a> 2.初始化包的基本结构</h4><ol><li>新建itheima-tools文件夹，作为包的根目录</li><li>在itheima-tools文件夹中华，新建如下三个文件<ul><li>package.json</li><li>index.js</li><li><a href="http://README.md">README.md</a></li></ul></li></ol><h4 id="3初始化packagejson"><a class="markdownIt-Anchor" href="#3初始化packagejson"></a> 3.初始化package.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ycx_tools&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提供了格式化时间、HTMLESCAPE的功能&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ycx_tools&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;format&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;ycx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;escape&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span><span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4在indexjs中定义方法"><a class="markdownIt-Anchor" href="#4在indexjs中定义方法"></a> 4.在index.js中定义方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">dtStr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dtStr)</span><br><span class="line">  <span class="keyword">const</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">  <span class="keyword">const</span> m = <span class="title function_">padZero</span>(dt.<span class="title function_">getMonth</span>()+<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> d = <span class="title function_">padZero</span>(dt.<span class="title function_">getDate</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hh = <span class="title function_">padZero</span>(dt.<span class="title function_">getHours</span>())</span><br><span class="line">  <span class="keyword">const</span> mm = <span class="title function_">padZero</span>(dt.<span class="title function_">getMinutes</span>())</span><br><span class="line">  <span class="keyword">const</span> ss = <span class="title function_">padZero</span>(dt.<span class="title function_">getSeconds</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padZero</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (n &gt; <span class="number">9</span> ? n : <span class="string">&#x27;0&#x27;</span>+n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  dateFormat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>即使require没有指定文件，根据package.json中的main属性来查找</strong></p><h4 id="5在indexjs中定义转移html的方法"><a class="markdownIt-Anchor" href="#5在indexjs中定义转移html的方法"></a> 5.在index.js中定义转移HTML的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义转移html</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlescape</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> htmlStr.<span class="title function_">replaca</span>(<span class="regexp">/&lt;|&gt;|&quot;|&amp;/g</span>, <span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&lt;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;lt;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&gt;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;gt;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&quot;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;quot;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&amp;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;amp;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6indexjs定义还原html的方法"><a class="markdownIt-Anchor" href="#6indexjs定义还原html的方法"></a> 6.index.js定义还原HTML的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义还原HTML</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlUnEscape</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g</span>, <span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&amp;lt;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&amp;gt;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&amp;quot;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&amp;amp;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7将不同的功能纪念性模块化拆分"><a class="markdownIt-Anchor" href="#7将不同的功能纪念性模块化拆分"></a> 7.将不同的功能纪念性模块化拆分</h4><blockquote><ol><li>将格式化时间的功能，拆分到src-&gt;dateFormat.js中</li><li>将处理HTML字符换的功能，拆分到src-&gt;htmlescape.js中</li><li>在index.js中，导入两个模块，得到需要向外共享的方法</li></ol><p>4.在index.js中，使用module.exports把对应的方法共享出去</p></blockquote><p><strong>es6–扩展运算符</strong> 将数组或者对象的内容转换为一段以逗号隔开的序列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...date,<span class="comment">//展开运算符</span></span><br><span class="line">  ...<span class="built_in">escape</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8编写包的说明文档"><a class="markdownIt-Anchor" href="#8编写包的说明文档"></a> 8.编写包的说明文档</h4><p>README.md文档用于说明包</p><p><strong>可以包含以下说明</strong></p><blockquote><p>安装方式、导入方式、格式化时间</p><p>转移HTML中的特殊字符、还原HTML中的特殊字符、开源协议</p></blockquote><h3 id="77发布包"><a class="markdownIt-Anchor" href="#77发布包"></a> 7.7发布包</h3><h4 id="1注册账号"><a class="markdownIt-Anchor" href="#1注册账号"></a> 1.注册账号</h4><p><mark>已注册</mark></p><h4 id="2登录"><a class="markdownIt-Anchor" href="#2登录"></a> 2.登录</h4><p>在命令行中输入 <code>npm login</code> 进行登录</p><p><strong>注意，使用之前需要先将服务器切换到官方服务器</strong></p><p><code>npm config set registry=https://registry.npmjs.org/</code></p><h4 id="3把包发布到npm上"><a class="markdownIt-Anchor" href="#3把包发布到npm上"></a> 3.把包发布到npm上</h4><blockquote><p>将终端切换到包的根目录，运行 npm publish命令，即可发布</p></blockquote><p><img src="Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.assets/image-20240325110008091.png" alt="image-20240325110008091" /></p><p>发布成功!!!</p><h4 id="4删除已发布的包"><a class="markdownIt-Anchor" href="#4删除已发布的包"></a> 4.删除已发布的包</h4><p><strong>注意</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish 包名 --force，即可删除</span><br></pre></td></tr></table></figure><blockquote><p>npm unpublish命令只能删除72小时以内的包</p><p>npm unpublish删除的包，在24小时内不能重新发布</p><p>尽量不要发布没有意义的包</p></blockquote><h2 id="8模块的缓存机制"><a class="markdownIt-Anchor" href="#8模块的缓存机制"></a> 8.模块的缓存机制</h2><h3 id="81优先从缓存中加载"><a class="markdownIt-Anchor" href="#81优先从缓存中加载"></a> 8.1优先从缓存中加载</h3><p>模块第一次加载会被缓存，这也意味着多次调用require()不会导致模块代码被执行多次</p><p><strong>注意</strong>  各种模块都会从缓存中加载，从而提高模块的加载效率</p><h3 id="82内置模块加载机制"><a class="markdownIt-Anchor" href="#82内置模块加载机制"></a> 8.2内置模块加载机制</h3><blockquote><p>内置模块是Node.js提供的模块，优先级最高。</p></blockquote><h3 id="83自定义模块加载机制"><a class="markdownIt-Anchor" href="#83自定义模块加载机制"></a> 8.3自定义模块加载机制</h3><p>使用require()加载自定义模块是，必须指定以./ 或者 …/开头的路径标识符，否则node会把他当作第三方模块或者内置模块加载</p><p>如果省略了文件扩展名，那么node或按照一下顺序分别尝试加载文件</p><ol><li>按照确切的文件名进行加载</li><li>补全.js进行加载</li><li>补全.json进行</li><li>补全.node</li><li>加载失败</li></ol><h3 id="84第三方模块加载机制"><a class="markdownIt-Anchor" href="#84第三方模块加载机制"></a> 8.4第三方模块加载机制</h3><p>如果传递给require的不符合上述两种规则，则node.js会从当前模块父目录开始，尝试从/node_modules加载第三方模块</p><p>如果没有找到，则移动到再上一层父目录中，直到磁盘根目录中。</p><h3 id="85目录作为模块"><a class="markdownIt-Anchor" href="#85目录作为模块"></a> 8.5目录作为模块</h3><p>把目录作为标识符，传递给require()时，有三种加载方式</p><blockquote><ol><li>被加载目录下查找一个叫做package.json的文件，并寻找main属性，作为require()入口</li><li>如果没有.json文件按，或者main不存在或者无法解析，则Node.js或试图加载目录下的index.js文件</li><li>如果都失败了，会打印模块缺失 Error:Cannot find module ‘xxx’</li></ol></blockquote><h1 id=""><a class="markdownIt-Anchor" href="#"></a> </h1></style></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nodejs使用教程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nodejs使用教程&quot;&gt;&lt;/a&gt; Node.js使用教程&lt;/h1&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;br&gt;
  &lt;/p&gt;&lt;h2 style=&quot;text-al</summary>
      
    
    
    
    <category term="node.js" scheme="https://ycx6666.github.io/categories/node-js/"/>
    
    
    <category term="入门" scheme="https://ycx6666.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
    <category term="nodejs" scheme="https://ycx6666.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>协变返回类型</title>
    <link href="https://ycx6666.github.io/2024/03/%E5%8D%8F%E5%8F%98%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/"/>
    <id>https://ycx6666.github.io/2024/03/%E5%8D%8F%E5%8F%98%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-15T10:46:57.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="协变返回类型"><a class="markdownIt-Anchor" href="#协变返回类型"></a> 协变返回类型</h1><h2 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h2><p><mark>定义</mark></p><p>导出类中被覆盖的方法可以返回积累芳芳的返回类型的某种到处类型</p><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//polymorphism/CovariantReturn.java</span></span><br><span class="line"><span class="keyword">package</span> polymorphism;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grain</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Grain&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wheat</span> <span class="keyword">extends</span> <span class="title class_">Grain</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Wheat&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mill</span> &#123;</span><br><span class="line">  Grain <span class="title function_">process</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Grain</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WheatMill</span> <span class="keyword">extends</span> <span class="title class_">Mill</span> &#123;</span><br><span class="line">  Wheat <span class="title function_">process</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Wheat</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CovariantReturn</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Mill</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mill</span>();</span><br><span class="line">    <span class="type">Grain</span> <span class="variable">g</span> <span class="operator">=</span> m.process();</span><br><span class="line">    System.out.println(g);</span><br><span class="line">    m = <span class="keyword">new</span> <span class="title class_">WheatMill</span>();</span><br><span class="line">    g = m.process();</span><br><span class="line">    System.out.println(g);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">Grain</span></span><br><span class="line"><span class="comment">Wheat</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="状态模式"><a class="markdownIt-Anchor" href="#状态模式"></a> 状态模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stage</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HappyActor</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">()</span> &#123; actor = <span class="keyword">new</span> <span class="title class_">SadActor</span>(); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performPlay</span><span class="params">()</span> &#123; actor.act(); &#125;</span><br></pre></td></tr></table></figure><h2 id="纯继承模式"><a class="markdownIt-Anchor" href="#纯继承模式"></a> 纯继承模式</h2><blockquote>只有在基类中出现的方法才可以在导出类中定义，是一种纯粹的“is a"关系<blockquote>扩展接口可定义为”is-like-a"关系<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: polymorphism/RTTI.java</span></span><br><span class="line"><span class="comment">// Downcasting &amp; Runtime type information (RTTI).</span></span><br><span class="line"><span class="comment">// &#123;ThrowsException&#125;</span></span><br><span class="line"><span class="keyword">package</span> polymorphism;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Useful</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;Userful:f()&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">g</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;Userful:g()&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MoreUseful</span> <span class="keyword">extends</span> <span class="title class_">Useful</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;MoreUseful:f()&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">g</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;MoreUseful:g()&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">u</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;MoreUseful:u()&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">v</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;MoreUseful:v()&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">w</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;MoreUseful:w()&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RTTI</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Useful[] x = &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Useful</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">MoreUseful</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">    x[<span class="number">0</span>].f();</span><br><span class="line">    x[<span class="number">1</span>].g();</span><br><span class="line">    <span class="comment">// Compile time: method not found in Useful:</span></span><br><span class="line">    <span class="comment">//x[1].u();</span></span><br><span class="line">    ((MoreUseful)x[<span class="number">1</span>]).u(); <span class="comment">// Downcast/RTTI</span></span><br><span class="line">  <span class="comment">//  ((MoreUseful)x[0]).u(); // Exception thrown</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">0</span>] <span class="keyword">instanceof</span> MoreUseful)</span><br><span class="line">    &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ttt&quot;</span>);</span><br><span class="line">    <span class="type">MoreUseful</span> <span class="variable">mf</span> <span class="operator">=</span> (MoreUseful) x[<span class="number">0</span>];</span><br><span class="line">    mf.u();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">///:~</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><mark>对象不能向上转型，类型才能向上转型。</mark></p><p><mark>内存分析</mark></p><p>“<a href="https://blog.csdn.net/qq_43582566/article/details/121909107">Java多态的向上转型——内存分析_向上转型内存结构-CSDN博客</a>”</p><h1 id="java的异常处理机制"><a class="markdownIt-Anchor" href="#java的异常处理机制"></a> java的异常处理机制</h1><h2 id="throws"><a class="markdownIt-Anchor" href="#throws"></a> throws</h2><p><img src="/2024/03/%E5%8D%8F%E5%8F%98%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20231220165420962.png" alt="image-20231220165420962"></p><p><b>例</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException&#123;</span><br><span class="line"><span class="type">int</span> c[]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">c[<span class="number">5</span>]=<span class="number">60</span>;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">    <span class="type">int</span> b=<span class="number">50</span>/a;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">calculate();</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">catch</span> (IllegalAccessException e)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;非法存取&quot;</span>+e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型编程"><a class="markdownIt-Anchor" href="#泛型编程"></a> 泛型编程</h1><p>功能类似于cpp中的模板,作用是提高代码的复用率</p><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException&#123;</span><br><span class="line"><span class="type">int</span> c[]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">c[<span class="number">5</span>]=<span class="number">60</span>;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">    <span class="type">int</span> b=<span class="number">50</span>/a;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">calculate();</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">catch</span> (IllegalAccessException e)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;非法存取&quot;</span>+e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型类"><a class="markdownIt-Anchor" href="#泛型类"></a> 泛型类</h2><blockquote><p>泛型是带一个或则和多个类型参数的类</p></blockquote><p>eg</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> generics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> T  t;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T  t)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T  <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>  t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">Box&lt;String&gt; box = <span class="keyword">new</span> <span class="title class_">Box</span>();</span><br><span class="line">    Box&lt;Integer&gt; box1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;Integer&gt;();</span><br><span class="line">box.add(<span class="string">&quot;hello&quot;</span>);     <span class="comment">//box.add(100);</span></span><br><span class="line">System.out.println(box.get());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>泛型类的使用与方法调用类似。 ¡ 方法调用需向方法传递参数，使用泛型需传递一个类型参 数，即用某个具体的类型替换T。 要在Box对象中存放String对象，就要在创建Box对象时为其 传递String类型参数。 ¡ 要实例化泛型类对象，也使用new运算符，但在类名和括 号之间需加上要传递的具体类型，</p><blockquote><p>例如： //在JDK 1.7之前，创建泛型对象时的写法 BoxGenerics box = new BoxGenerics();</p></blockquote><blockquote><p>//在JDK 1.7之后，创建泛型对象时的写法 BoxGenerics box = new BoxGenerics();</p></blockquote><p>按照约定，类型参数名使用单个大写字母表示。常用的类 型参数名（标记符）有：E表示元素，K表示键，N表示数字，T 表示类型，V表示值，？等</p></blockquote><blockquote><p>当没有指定模板类型时，会默认当成object对像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class REG1 &#123;</span><br><span class="line">public static void main(String[] args)</span><br><span class="line">&#123;</span><br><span class="line">    CE c3=new CE();</span><br><span class="line">    c3.x=5;</span><br><span class="line">    c3.y=10;</span><br><span class="line">    System.out.println(c3.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/03/%E5%8D%8F%E5%8F%98%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20231222144704812.png" alt="image-20231222144704812"></p><p>当定义数组时，不能直接定义,需要用以下方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//CE&lt;Integer,Double&gt;[] carry1=new CE&lt;Integer,Double&gt;[5];</span></span><br><span class="line">CE&lt;Integer,Double&gt;[] carry2=<span class="keyword">new</span> <span class="title class_">CE</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    carry2[i]=<span class="keyword">new</span> <span class="title class_">CE</span>&lt;Integer,Double&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型方法"><a class="markdownIt-Anchor" href="#泛型方法"></a> 泛型方法</h2><h4 id="类型擦除"><a class="markdownIt-Anchor" href="#类型擦除"></a> 类型擦除</h4><p>在泛型代码内部，无法获得任何有关泛型参数的信息。 ¡ 当泛型类型实例化时，编译器使用一种叫类型擦除的技术 转换这些类型。在编译时，编译器将清除类和方法中的所 有与类型参数有关的信息。 ¡ Java考虑到兼容问题，使用擦除实现泛型，意味着泛型使 用时，任何具体的类型信息都被擦除了，唯一知道的就是 你在使用一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErasedTypeEquivalence</span> &#123; <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>().getClass(); <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>().getClass(); System.out.println(c1 == c2); <span class="comment">//True or False？ &#125; &#125; //generics.ErasedTypeEquivalence.java 35 //: generics/LostInformation.java</span></span><br></pre></td></tr></table></figure><h4 id="边界"><a class="markdownIt-Anchor" href="#边界"></a> 边界</h4><blockquote><p><u>边界通配符</u> <code>? super Apple</code> 表示传入apple整个类及其以上的父类。</p><p><u>边界通配符</u> <code>? extend Apple</code> 表示传入apple整个类及其以下的子类。</p></blockquote><ul><li><p>1.上界不能往里存，只能往外取 编译器只知道容器里的是Fruit或者Fruit的子类，但不 知道它具体是什么类型，所以存的时候，无法判断是否要存 入的数据的类型与容器种的类型一致，所以会拒绝set操作。</p></li><li><p>2.下界往外取只能赋值给Object变量，不影 响往里存 因为编译器只知道它是Fruit或者它的父类，这样实际上 是放松了类型限制，Fruit的父类一直到Object类型的对象 都可以往里存，但是取的时候，就只能当成Object对象使用 了。</p></li><li><p>所以如果需要经常往外读，则使用，如果需 要经常往外取，则使用。</p></li></ul><p>[＜? extend T＞和＜? super T＞的解释_-CSDN博客](<a href="https://blog.csdn.net/qq_58746475/article/details/119887000?ops_request_misc=%7B%22request%5Fid%22%3A%22170323034416800222821634%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170323034416800222821634&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-119887000-null-">https://blog.csdn.net/qq_58746475/article/details/119887000?ops_request_misc={“request_id”%3A&quot;170323034416800222821634&quot;%2C&quot;scm&quot;%3A&quot;20140713.130102334..&quot;}&amp;request_id=170323034416800222821634&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-119887000-null-</a>null.142<sup>v96</sup>pc_search_result_base9&amp;utm_term= extend &amp;spm=1018.2226.3001.4187)&quot;</p><blockquote><p><u>无界通配符</u>  使用无界通配符指定一个未知类型 “？” 。 ？ 与==? extend Apple==具有相同的含义，表示任何类 型。</p></blockquote><h2 id="泛型接口"><a class="markdownIt-Anchor" href="#泛型接口"></a> 泛型接口</h2><ul>泛型也可以用于接口<ul><li>实现泛型接口时，如果不生命类型，那么泛型自动变为object</li><li>如果想保留接口中的泛型，则在实现剋的声明时，必须保留泛型接口中的泛型声明</li><li>也可以在是实现时，直接给定接口泛型中的具体类型</li></ul><h4 id="使用泛型需要注意的问题"><a class="markdownIt-Anchor" href="#使用泛型需要注意的问题"></a> 使用泛型需要注意的问题</h4><ul><li>任何基本类型都不能作为类型参数</li><li>实现参数化接口，由于擦除，一个类不能实现同一 泛型接口的两种变体</li><li>转型与警告：使用带泛型类型参数的转型， instanceof无任何效果，因为擦除</li><li>方法重载：类型参数不能识别</li></ul></ul></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;协变返回类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#协变返回类型&quot;&gt;&lt;/a&gt; 协变返回类型&lt;/h1&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#定义&quot;&gt;&lt;/a&gt; 定义&lt;/h2</summary>
      
    
    
    
    <category term="Java" scheme="https://ycx6666.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://ycx6666.github.io/tags/Java/"/>
    
    <category term="协变" scheme="https://ycx6666.github.io/tags/%E5%8D%8F%E5%8F%98/"/>
    
  </entry>
  
  <entry>
    <title>操作系统第四组第二次小班课</title>
    <link href="https://ycx6666.github.io/2024/03/%E5%A4%A7%E7%BA%B2%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://ycx6666.github.io/2024/03/%E5%A4%A7%E7%BA%B2%20-%20%E5%89%AF%E6%9C%AC/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-15T10:46:11.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统第四组第二次小班课"><a class="markdownIt-Anchor" href="#操作系统第四组第二次小班课"></a> 操作系统第四组第二次小班课</h1><blockquote><p>代码实现利用多进程实现 C/S 模式聊天程序，启动一个服务器，单个和多个客户端，服务端接收到新的客户端请求就创建一个进程与客户端通信。</p></blockquote><h2 id="cs-架构和-bs-架构"><a class="markdownIt-Anchor" href="#cs-架构和-bs-架构"></a> CS 架构和 BS 架构</h2><p>常见的软件架构有两种：CS、BS。不管是哪种，真正的核心处理逻辑都是在服务器上：</p><ol><li><p>CS：Client/Server（客户端 / 服务器），采取这种架构的软件，在用户本地需要下载并安装客户端程序，在远程有一个服务器端程序。比如：QQ、steam。</p><p>优点：事先下载好所有资源，用户体验好。缺点：需要开发客户端和服务端，开发、部署、维护麻烦，服务端更新时，客户端也需要更新。CS架构适合定制专业化的办公类软件。</p></li><li><p>BS：Brower/Server（浏览器 / 服务器），采取这种架构时，只需要一个浏览器，用户通过不同的网址就可以访问不同的服务器。比如：京东、淘宝（网页端）。</p><p>优点：方便，不需要开发客户端，只需要页面+服务端，且只需要打开浏览器就可以使用。缺点：需要通过网络传输所有的图片、音频资源，如果资源过大，则会降低用户体验。BS架构适合移动互联网应用。</p></li></ol><h2 id="网络编程三要素"><a class="markdownIt-Anchor" href="#网络编程三要素"></a> 网络编程三要素</h2><p>当我们要向另外一台计算机发送信息时，我们要知晓对方电脑在互联网上的地址（<strong>IP</strong>），还需要确定对方电脑接受数据的软件（<strong>端口号</strong>，一个端口号只能被一个软件绑定使用），还需要确定网络传输的规则（<strong>协议</strong>）。故<strong>IP、端口号、协议</strong>就是网络编程三要素。</p><p><strong>网络编程三要素</strong>：</p><ol><li>IP：设备在网络中的地址，是唯一的标识。</li><li>端口号：应用程序在设备中唯一的标识。</li><li>协议：数据在网络中传输的规则，常见的协议有 UDP、TCP、http、https、ftp。</li></ol><h3 id="ip"><a class="markdownIt-Anchor" href="#ip"></a> IP</h3><p>全称：Internet Protocol，是互联网协议地址，也称IP地址。是分配给上网设备的数字标签。常见的IP分为：ipv4、ipv6。</p><p>IPv4：全称为Internet Protocol version 4，即互联网通信协议第四版。采用<strong>32位地址长度</strong>，<strong>分成4组（每组1字节，8位）</strong>。一般用<strong>点分十进制表示法</strong>，例如：<code>192.168.1.66</code>。每一组最大值是255，最小值是0。在IPv4中，每一组有256种表示方法，一共4组，最多可以表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>25</mn><msup><mn>6</mn><mn>4</mn></msup><mo>=</mo><mn>4294967296</mn></mrow><annotation encoding="application/x-tex">256^4 = 4294967296</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">2</span><span class="mord">9</span><span class="mord">4</span><span class="mord">9</span><span class="mord">6</span><span class="mord">7</span><span class="mord">2</span><span class="mord">9</span><span class="mord">6</span></span></span></span> 种地址，数量有限，不够使用。实际上，在2019年11月26日，IPv4的全部可用地址就已经分配完毕了。</p><p>IPv6：全称为Internet Protocol version 6，即互联网通信协议第六版。由于互联网的蓬勃发展，IP地址的需求量越来越大，而IPv4模式下的IP总数有限，为了让地址能够继续分配，故出现了IPv6。采用<strong>128位地址长度，分成8组（每组2字节，16位）</strong>。一共有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>128</mn></msup><mo>=</mo><mn>3.04</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup></mrow><annotation encoding="application/x-tex">2^{128} = 3.04\times10^{38}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">0</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span> 种地址，这个数量，可以给地球上的每一粒沙子都编上号。一般用<strong>冒分十六进制表示法</strong>，例如：<code>2001:0DB8:0000:0023:0008:0800:200C:417A</code>。对于每一组，可以省略前导0，此时，对于上述IP地址，可以记录为：<code>2001:DB8:0:23:8:800:200C:417A</code>。此外，还有一种特殊情况：<strong>0位压缩表示法</strong>。即如果计算出的16进制表示形式中有多个连续的0，可以利用<code>::</code>进行压缩表示，例如对于<code>FF01:0:0:0:0:0:0:1101</code>，我们可以压缩为：<code>FF01::1101</code>。</p><p>上述是对于IPv4和IPv6的基本介绍，现对IPv4进行额外补充。</p><p>IPv4的地址分类形式有两种：一种是公网地址（万维网使用），一种是私有地址（局域网使用）。<code>192.168.</code>开头的就是私有地址，范围即为<code>192.168.0.0--192.168.255.255</code>，专门为组织机构内部使用，通过共享公网IP以此节省IP。</p><p>一个特殊的IP地址为：<code>127.0.0.1</code>，又称localhost。是回送地址，也叫本地回环地址，又称本机IP。永远只会寻找当前所在的本机。换个地方上网，局域网IP可能不一样，因为这个是通过路由器分配的。通过localhost，可以保证自己给自己发送数据时不出错。</p><h3 id="端口号"><a class="markdownIt-Anchor" href="#端口号"></a> 端口号</h3><p>应用程序在设备中唯一的标识。<strong>一个端口号只能被一个应用程序使用。</strong></p><p>端口号是由两个字节表示的整数，取值范围：0-65535。其中0-1023之间的端口号是用于一些知名的网络服务或者应用。我们自己使用1024以上的端口号就可以了。</p><h3 id="协议"><a class="markdownIt-Anchor" href="#协议"></a> 协议</h3><p>计算机网络中，连接和通信的规则被称作网络通信协议。</p><p>OSI参考模型：世界互联协议标准，全球通信规范，单模型过于理想化，未能在因特网上进行广泛推广。</p><p>TCP / IP 参考模型：事实上的国际标准。</p><h4 id="udp协议"><a class="markdownIt-Anchor" href="#udp协议"></a> UDP协议</h4><p>用户数据报协议（User Datagram Protocol），是<strong>面向无连接</strong>（不管两台计算机是否建立连接，直接传输数据）通信协议。速度快，有大小限制，一次最多发送64K，数据不安全，易丢失数据。应用场景：网络会议、语音通话、在线视频。（丢失数据的影响不大）</p><h4 id="tcp协议"><a class="markdownIt-Anchor" href="#tcp协议"></a> TCP协议</h4><p>传输控制协议（Transmission Control Protocol），是<strong>面向连接</strong>的通信协议。速度慢，没有大小限制，数据安全。应用场景：下载软件、文字聊天、发送邮件。（丢失数据影响较大）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;操作系统第四组第二次小班课&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#操作系统第四组第二次小班课&quot;&gt;&lt;/a&gt; 操作系统第四组第二次小班课&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;代码实现利用多进程实现 C/S 模式聊天程序，启动一</summary>
      
    
    
    
    <category term="小班" scheme="https://ycx6666.github.io/categories/%E5%B0%8F%E7%8F%AD/"/>
    
    
    <category term="操作系统" scheme="https://ycx6666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统作业1</title>
    <link href="https://ycx6666.github.io/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/"/>
    <id>https://ycx6666.github.io/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-15T10:46:15.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4"><a class="markdownIt-Anchor" href="#4"></a> 4</h1><h2 id="4-1"><a class="markdownIt-Anchor" href="#4-1"></a> 4-1</h2><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240316210403950.png" alt="image-20240316210403950"></p><p>可以看到，在每一个时刻，都保持cpu处于忙碌状态，因此cpu利用率位100%;</p><p>使用-c指令查看发现符合预期。</p><h2 id="4-2"><a class="markdownIt-Anchor" href="#4-2"></a> 4-2</h2><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240316210906963.png" alt="image-20240316210906963"></p><p>进程二为一个I/O操作，因此程序完成的时间与等待I/O完成的时间有关；</p><p>若设这个时间位x，那么所需要的总时间就为进程0的执行时间加上I/O发起请求的时间加上I/O等待的时间再加上I/O执行完成的时间；</p><p>即</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>4</mn><mo>+</mo><mi>x</mi><mo>+</mo><mn>2</mn><mo>=</mo><mn>6</mn><mo>+</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">4+x+2=6+x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span></span></p><p>如输入-c之后的表，表中I/O等待了4个时刻，因此耗费了11个时刻的时间，与预期相符。</p><h2 id="4-3"><a class="markdownIt-Anchor" href="#4-3"></a> 4-3</h2><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240316211841117.png" alt="image-20240316211841117"></p><p>我们可以看到，当交换了程序运行时间后，实际上进行I/O操作时仍旧处于阻塞状态，但是不同的是，此时程序二由于cpu空闲而可以运行，这样子就大大提高了cpu利用率，有效缩短了时间，因此交换顺序是很重要的，这样可以大大提高cpu利用率和运行效率。</p><p>使用-c指令可以发现答案正确。</p><h1 id="5"><a class="markdownIt-Anchor" href="#5"></a> 5</h1><h2 id="5-1"><a class="markdownIt-Anchor" href="#5-1"></a> 5-1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> x=<span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> rc=fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rc&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;child(pid:%d) (x:%d)\n&quot;</span>,(<span class="type">int</span>)getpid(),x);</span><br><span class="line">        </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;parent of %d (pid:%d) (x:%d)\n&quot;</span>,</span><br><span class="line">                                rc,(<span class="type">int</span>)getpid(),x);</span><br><span class="line">          x=<span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主进程访问x并将100设置为50时，子进程中的值仍为100，这说明子进程与父进程中的x值互不影响。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> x=<span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> rc=fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rc&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">50</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;child(pid:%d) (x:%d)\n&quot;</span>,(<span class="type">int</span>)getpid(),x);</span><br><span class="line">        </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">        x=<span class="number">150</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;parent of %d (pid:%d) (x:%d)\n&quot;</span>,</span><br><span class="line">                                rc,(<span class="type">int</span>)getpid(),x);</span><br><span class="line">               </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将父进程中的x设置为50再输出而子进程中的x设置为150输出，可以观察到：</p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240316214932000.png" alt="image-20240316214932000"></p><p>因此这更加证明了父进程和子进程中的变量x并不互相影响。</p><h2 id="5-2"><a class="markdownIt-Anchor" href="#5-2"></a> 5-2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> rc=fork();</span><br><span class="line">        <span class="type">int</span> fd=open(<span class="string">&quot;./op-5-2-open.txt&quot;</span>,O_RDWR);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rc&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;child(fd:%d)\n&quot;</span>,fd);</span><br><span class="line">                <span class="type">char</span> str[]=<span class="string">&quot;child process&quot;</span>;</span><br><span class="line">                write(fd,str,<span class="keyword">sizeof</span>(str));</span><br><span class="line">        </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;parent (fd:%d)\n&quot;</span>,fd);</span><br><span class="line">               </span><br><span class="line">                <span class="type">char</span> str2[]=<span class="string">&quot;parent process&quot;</span>;</span><br><span class="line">                write(fd,str2,<span class="keyword">sizeof</span>(str2));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当他们并发的写入同一个文件中时，可以看到子进程和父进程都可以正常的访问open()返回的文件描述符；打开txt文件后可以发现后运行的子进程覆盖了先运行的父进程，如下面第二张图所示：</p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240316221640885.png" alt="image-20240316221640885"></p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240316221829401.png" alt="image-20240316221829401"></p><h2 id="5-4"><a class="markdownIt-Anchor" href="#5-4"></a> 5-4</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> rc=fork();</span><br><span class="line"><span class="keyword">if</span>(rc&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;fork failed!\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;execl\n&quot;</span>);</span><br><span class="line">execl(<span class="string">&quot;/bin/ls&quot;</span>,<span class="string">&quot;ls&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> wc=wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后输出结果如图所示：</p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240317171813950.png" alt="image-20240317171813950"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> rc=fork();</span><br><span class="line"><span class="keyword">if</span>(rc&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;fork failed!\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;execl\n&quot;</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*arg;</span><br><span class="line"><span class="type">char</span> *<span class="type">const</span> argv[]=&#123;<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-l&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">cahr *<span class="type">const</span> envp[]=&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">execl(<span class="string">&quot;/bin/ls&quot;</span>,arg,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execlp\n&quot;</span>);</span><br><span class="line">execlp(<span class="string">&quot;ls&quot;</span>,arg,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execle\n&quot;</span>);</span><br><span class="line">execle(<span class="string">&quot;/bin/ls&quot;</span>,arg,<span class="literal">NULL</span>,envp);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execv\n&quot;</span>);</span><br><span class="line">execv(<span class="string">&quot;/bin/ls&quot;</span>,argv);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ececvp\n&quot;</span>);</span><br><span class="line">execvp(<span class="string">&quot;ls&quot;</span>,argv);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ececvp\n&quot;</span>);</span><br><span class="line">execvp(<span class="string">&quot;ls&quot;</span>,argv,envp);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> wc=wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别运行后可以看到如图所示的结果：</p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240317173008027.png" alt="image-20240317173008027"></p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240317173034407.png" alt="image-20240317173034407"></p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240317173059810.png" alt="image-20240317173059810"></p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240317173127891.png" alt="image-20240317173127891"></p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/C:%5CUsers%5C%E5%8D%97%E6%B8%A1%E7%9A%84%E5%8D%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240317173153763.png" alt="image-20240317173153763"></p><p><strong>为什么会有这么多的变种</strong>，是因为多种exec()调用的参数传递方式和传递参数不同，这样子就可以更加灵活多样的使用exec()的功能，从而完成更加细致多样的操作来满足不同的需求。</p><h1 id="7"><a class="markdownIt-Anchor" href="#7"></a> 7</h1><h2 id="7-1"><a class="markdownIt-Anchor" href="#7-1"></a> 7-1</h2><p>由于三个任务时间相同且在同一时刻到达，因此他们两种方式的响应时间和周转时间分别相同。</p><p><strong>其调度方式为:</strong></p><table><thead><tr><th>SJF/FIFO调度顺序</th><th>A</th><th>B</th><th>B</th></tr></thead><tbody><tr><td>运行长度</td><td>200</td><td>200</td><td>200</td></tr></tbody></table><p>其中每个单元格表示：<strong>响应时间/周转时间</strong></p><table><thead><tr><th>调度方式</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>FIFO</td><td>0/200</td><td>200/400</td><td>400/600</td></tr><tr><td>SJF</td><td>0/200</td><td>200/400</td><td>400/600</td></tr></tbody></table><p><strong>这两种调度方式的平均响应时间为:</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>（</mtext><mn>0</mn><mo>+</mo><mn>200</mn><mo>+</mo><mn>400</mn><mtext>）</mtext><mi mathvariant="normal">/</mi><mn>3</mn><mo>=</mo><mn>200</mn></mrow><annotation encoding="application/x-tex">（0+200+400）/3=200</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">（</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span><span class="mord cjk_fallback">）</span><span class="mord">/</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span></p><p><strong>这两种调度方式的平均周转时间为：</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>200</mn><mo>+</mo><mn>400</mn><mo>+</mo><mn>600</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>3</mn><mo>=</mo><mn>400</mn></mrow><annotation encoding="application/x-tex">(200+400+600)/3=400</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span></p><h2 id="7-2"><a class="markdownIt-Anchor" href="#7-2"></a> 7-2</h2><p><strong>其调度方式为:</strong></p><table><thead><tr><th>SJF/FIFO调度顺序</th><th>A</th><th>B</th><th>B</th></tr></thead><tbody><tr><td>运行长度</td><td>100</td><td>200</td><td>300</td></tr></tbody></table><p>其中每个单元格表示：<strong>响应时间/周转时间</strong></p><table><thead><tr><th>调度方式</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>FIFO</td><td>0/100</td><td>100/300</td><td>300/600</td></tr><tr><td>SJF</td><td>0/100</td><td>100/300</td><td>300/600</td></tr></tbody></table><p><strong>这两种调度方式的平均响应时间为:</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>（</mtext><mn>0</mn><mo>+</mo><mn>100</mn><mo>+</mo><mn>300</mn><mtext>）</mtext><mi mathvariant="normal">/</mi><mn>3</mn><mo>=</mo><mn>133.33</mn></mrow><annotation encoding="application/x-tex">（0+100+300）/3=133.33</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">（</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mord cjk_fallback">）</span><span class="mord">/</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">3</span><span class="mord">.</span><span class="mord">3</span><span class="mord">3</span></span></span></span></span></p><p><strong>这两种调度方式的平均周转时间为：</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>100</mn><mo>+</mo><mn>300</mn><mo>+</mo><mn>600</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>3</mn><mo>=</mo><mn>333.33</mn></mrow><annotation encoding="application/x-tex">(100+300+600)/3=333.33</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">3</span><span class="mord">3</span><span class="mord">.</span><span class="mord">3</span><span class="mord">3</span></span></span></span></span></p><h2 id="7-3"><a class="markdownIt-Anchor" href="#7-3"></a> 7-3</h2><p>其中每个单元格表示：<strong>响应时间/周转时间</strong></p><table><thead><tr><th>调度方式</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>RR</td><td>0/598</td><td>1/599</td><td>2/600</td></tr></tbody></table><p><strong>这两种调度方式的平均响应时间为:</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>（</mtext><mn>0</mn><mo>+</mo><mn>1</mn><mo>+</mo><mn>2</mn><mtext>）</mtext><mi mathvariant="normal">/</mi><mn>3</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">（0+1+2）/3=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">（</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord cjk_fallback">）</span><span class="mord">/</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p><strong>这两种调度方式的平均周转时间为：</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>598</mn><mo>+</mo><mn>599</mn><mo>+</mo><mn>600</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>3</mn><mo>=</mo><mn>599</mn></mrow><annotation encoding="application/x-tex">(598+599+600)/3=599</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mord">9</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mord">9</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">9</span><span class="mord">9</span></span></span></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#4&quot;&gt;&lt;/a&gt; 4&lt;/h1&gt;
&lt;h2 id=&quot;4-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#4-1&quot;&gt;&lt;/a&gt; 4-1&lt;/h2&gt;
&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    <category term="作业" scheme="https://ycx6666.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="操作系统" scheme="https://ycx6666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据库与身份验证</title>
    <link href="https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
    <id>https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-15T10:46:40.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库与身份验证"><a class="markdownIt-Anchor" href="#数据库与身份验证"></a> 数据库与身份验证</h1><p align="center">  <br>  </p><h2 style="text-align:center;color:#F4E0EA">    樱春雪</h2>  <br>  <br><div style="text-align:center">    <a href="https://codeload.github.com/liangjingkanji/DrakeTyporaTheme/zip/refs/heads/master">湖南大学</a>  | <a href="https://theme.typora.io/theme/Drake/">软件工程</a>  | <a href="https://github.com/liangjingkanji/DrakeTyporaTheme/blob/master/issues.md">2204</a></div><br><br><img style="clear:both;display:block;margin:auto;width:400px;height:100px" src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/7HN)MKDR%[2BI2$@Q69A8$H.png">  <br><p></p><h2 id="1数据库的基本概念"><a class="markdownIt-Anchor" href="#1数据库的基本概念"></a> 1.数据库的基本概念</h2><h3 id="11什么是数据库"><a class="markdownIt-Anchor" href="#11什么是数据库"></a> 1.1什么是数据库</h3><blockquote><p>数据库是用来组织、存储和管理数据的仓库</p></blockquote><h3 id="12常见的数据库及其分类"><a class="markdownIt-Anchor" href="#12常见的数据库及其分类"></a> 1.2常见的数据库及其分类</h3><ol><li>MySQL数据库(最广泛、流行度最高的开源免费数据库</li><li>Oracle数据库</li><li>SQL Server数据库</li><li>Mongodb数据库</li></ol><h2 id="2安装并配置mysql相关的服务"><a class="markdownIt-Anchor" href="#2安装并配置mysql相关的服务"></a> 2.安装并配置MySql相关的服务</h2><h4 id="21了解"><a class="markdownIt-Anchor" href="#21了解"></a> 2.1了解</h4><ul><li>MySql server :专门用来提供数据存储和服务的软件</li><li>MySQL Workbench :可视化的MySQL管理工具，通过它，可以方便的操作存储在MySQL Server中的数据</li></ul><h4 id="223安装"><a class="markdownIt-Anchor" href="#223安装"></a> 2.2&amp;3.安装</h4><p>略</p><h2 id="3mysql的基本使用"><a class="markdownIt-Anchor" href="#3mysql的基本使用"></a> 3.MySQL的基本使用</h2><h3 id="31使用mysql-workbench管理数据库"><a class="markdownIt-Anchor" href="#31使用mysql-workbench管理数据库"></a> 3.1使用mysql workbench管理数据库</h3><p>略</p><h4 id="3创建数据库"><a class="markdownIt-Anchor" href="#3创建数据库"></a> 3.创建数据库</h4><h4 id="4常见数据表"><a class="markdownIt-Anchor" href="#4常见数据表"></a> 4.常见数据表</h4><blockquote><ol><li>PK主键，唯一标识</li><li>NN，值不允许为空</li><li>UQ，值唯一</li><li>AI，值自动增长</li></ol></blockquote><h3 id="32使用sql管理数据"><a class="markdownIt-Anchor" href="#32使用sql管理数据"></a> 3.2使用SQL管理数据</h3><h4 id="1什么是sql"><a class="markdownIt-Anchor" href="#1什么是sql"></a> 1.什么是SQL</h4><blockquote><p>sql是一门结构化查询语言，专门用于访问和处理数据库的编程语言，能让我们以编程的形式，操作数据库里面的数据。</p></blockquote><p><strong>三个关键点：</strong></p><ul><li>SQL是一门数据库编程语言</li><li>使用SQL编写出来的代码，叫做SQL语句</li><li>SQL语言只能在<mark>关系型数据库中使用</mark>（例如Mysql，Oracle，SQL server)，非关系型数据库(如mongdb)不支持SQL语言。</li></ul><h4 id="2sql能够做什么"><a class="markdownIt-Anchor" href="#2sql能够做什么"></a> 2.SQL能够做什么</h4><p>从数据库中增删改查数据，创建新的数据库，创建表等等</p><h4 id="3sql的学习目标"><a class="markdownIt-Anchor" href="#3sql的学习目标"></a> 3.SQL的学习目标</h4><p>如何对数据库进行增删改查</p><hr><p>where、and和or、order by、count(*)函数</p><h3 id="33sql语言"><a class="markdownIt-Anchor" href="#33sql语言"></a> 3.3SQL语言</h3><h2 id="4在项目中操作mysql"><a class="markdownIt-Anchor" href="#4在项目中操作mysql"></a> 4.在项目中操作MySql</h2><h3 id="41在项目中操作数据库的步骤"><a class="markdownIt-Anchor" href="#41在项目中操作数据库的步骤"></a> 4.1在项目中操作数据库的步骤</h3><ol><li>安装专门的MySql数据库的第三方模块</li><li>通过mysql模块连接到MySql数据库</li><li>通过mysql模块执行SQL语句</li></ol><h4 id="1安装mysql模块"><a class="markdownIt-Anchor" href="#1安装mysql模块"></a> 1.安装mysql模块</h4><blockquote><p>mysql是一个托关于npm上的第三方某块</p></blockquote><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql<span class="comment">//mysql2</span></span><br></pre></td></tr></table></figure><h4 id="2配置mysql模块"><a class="markdownIt-Anchor" href="#2配置mysql模块"></a> 2.配置mysql模块</h4><p>在使用sql模块操作mysql数据库之前，必须先对MySQL进行必要的配置，主要配置步骤如下</p><p><mark>这里推荐安装mysql2</mark>,否则会因为加密不一样而出现错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入mysql模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.建立与mysql数据库的链接</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,<span class="comment">//登录ip地址</span></span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,<span class="comment">//数据库账号</span></span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;615715&#x27;</span>,<span class="comment">//数据库密码</span></span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span><span class="comment">//指定数据库</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3测试mysql模块能否正确工作"><a class="markdownIt-Anchor" href="#3测试mysql模块能否正确工作"></a> 3.测试mysql模块能否正确工作</h4><p>通过db.query()函数，指定要执行的sql语句，通过回调函数拿到结果:</p><p><strong>这里的SELECT 1没有任何实质性作用，仅用于测试</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断mysql能否正确工作</span></span><br><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;SELECT 1&#x27;</span>, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//如果出错了</span></span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="42使用mysql操作mysql数据库"><a class="markdownIt-Anchor" href="#42使用mysql操作mysql数据库"></a> 4.2使用mysql操作mysql数据库</h3><h4 id="1查询数据"><a class="markdownIt-Anchor" href="#1查询数据"></a> 1.查询数据</h4><p>查询user中所有的数据</p><p>如果执行的是SELECT，则执行的结果是以一个<strong>数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询user中所有的数据</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`SELECT * FROM user`</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlstr, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240328215553883.png" alt="image-20240328215553883"></p><h4 id="2插入数据"><a class="markdownIt-Anchor" href="#2插入数据"></a> 2.插入数据</h4><p>向user中插入数据</p><p>id为001，name为zz</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向user中新增一条数据，user=‘001’ name=&#x27;dn&#x27;</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">username</span>: <span class="string">&#x27;dn&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义sql语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">`insert into user (id,name) values(?,?)`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">id</span>, user.<span class="property">password</span>], <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br><span class="line">  <span class="comment">//判断成功</span></span><br><span class="line">  <span class="comment">//注意，如果执行的是insert，则res是一个对象，在这个对象中有affectRows这个属性来判断是否陈功</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入成功&#x27;</span>)</span><br><span class="line">&#125;)<span class="comment">//填写两个占位符的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在这里面，有几个需要注意的：</strong></p><blockquote><ul><li>占位符?可以用于表示待插入的位置，在执行db.query时指定属性值进行填充</li><li>在返回的对象res中有一个属性affectRows，如果他的值为1，代表插入成功</li></ul></blockquote><h4 id="3插入数据的便捷操作"><a class="markdownIt-Anchor" href="#3插入数据的便捷操作"></a> 3.插入数据的便捷操作</h4><p>当我们向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应，可以通过如下方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>:<span class="number">10</span>,<span class="attr">name</span>:<span class="string">&#x27;zz&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">`insert into user set ?`</span></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, user, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br><span class="line">  <span class="comment">//判断成功</span></span><br><span class="line">  <span class="comment">//注意，如果执行的是insert，则res是一个对象，在这个对象中有affectRows这个属性来判断是否陈功</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入成功&#x27;</span>)</span><br><span class="line">&#125;)<span class="comment">//填写两个占位符的值</span></span><br></pre></td></tr></table></figure><h4 id="4更新数据"><a class="markdownIt-Anchor" href="#4更新数据"></a> 4.更新数据</h4><p>通过如下方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>:<span class="number">10</span>,<span class="attr">name</span>:<span class="string">&#x27;zz&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">`insert into user set ?`</span></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, user, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br><span class="line">  <span class="comment">//判断成功</span></span><br><span class="line">  <span class="comment">//注意，如果执行的是insert，则res是一个对象，在这个对象中有affectRows这个属性来判断是否陈功</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入成功&#x27;</span>)</span><br><span class="line">&#125;)<span class="comment">//填写两个占位符的值</span></span><br></pre></td></tr></table></figure><h4 id="5更新数据的便捷方式"><a class="markdownIt-Anchor" href="#5更新数据的便捷方式"></a> 5.更新数据的便捷方式</h4><p>如果数据对象的每一个属性都和数据表的字段一一对应，则可以通过如下方式来快速更新表数据:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新数据的便捷方式</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>:<span class="number">10</span>,<span class="attr">user</span>:<span class="string">&#x27;无敌逆神&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;1234567&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">`update user set ? where id=?`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user,user.<span class="property">id</span>], <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><mark>注意，在提供数据的时候还要加一个额外的参数<strong><a href="http://user.id">user.id</a></strong></mark></p><h4 id="6删除数据"><a class="markdownIt-Anchor" href="#6删除数据"></a> 6.删除数据</h4><p><strong>删除数据时，推荐使用id来，因为它具有唯一标识</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除id为5的数据</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;delete from user where id=?&#x27;</span></span><br><span class="line"></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, <span class="number">5</span>, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="comment">//删除结果执行后，也会生成一个结果对象，其中也包含affectedRows这个属性</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="7标记删除"><a class="markdownIt-Anchor" href="#7标记删除"></a> 7.标记删除</h4><p>使用delete时，会真正的将数据从表中删除掉，推荐使用标记<strong>删除</strong>的方式，来<strong>模拟删除</strong>的动作</p><blockquote><p>所谓的标记删除时，就是在表中设置类似于status这样的状态字段，来标记这条数据是否被删除</p><p>当用户执行了删除的动作后，并不与执行delete语句将其删除掉，而是执行了<strong>UPDATE</strong>语句，将status更新为删除</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update user set status=? where id=?&#x27;</span></span><br><span class="line"></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [<span class="number">1</span>, <span class="number">6</span>], <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="comment">//删除结果执行后，也会生成一个结果对象，其中也包含affectedRows这个属性</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5前后端身份认证"><a class="markdownIt-Anchor" href="#5前后端身份认证"></a> 5.前后端身份认证</h2><h3 id="51web开发模式"><a class="markdownIt-Anchor" href="#51web开发模式"></a> 5.1Web开发模式</h3><h4 id="1服务器渲染的web开发模式"><a class="markdownIt-Anchor" href="#1服务器渲染的web开发模式"></a> 1.服务器渲染的Web开发模式</h4><blockquote><p>服务器渲染的概念：服务器发送给客户端的HTML页面，是在服务器通过字符串的拼接动态生成的，因此，客户端不需要Ajax这样的技术请求额外的数据</p></blockquote><h4 id="2服务器渲染web开发模式的优缺点"><a class="markdownIt-Anchor" href="#2服务器渲染web开发模式的优缺点"></a> 2.服务器渲染Web开发模式的优缺点</h4><p><mark>优点</mark></p><blockquote><p>前端耗时少，因此服务器负责动态生成HTML内容，浏览器只需要渲染页面即可</p><p>有利于SEO，因为服务器端响应的时完整的HTML内容，所以爬虫更容易获取信息，有利于SEO</p></blockquote><hr><p><mark>缺点</mark></p><blockquote><p>占用服务器端资源，即服务器端完成HTML内容页面的拼接，如果请求比较多，会对服务器造成一定的压力</p><p>不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行合作分工，尤其对于前端复杂度给高的项目，不利于项目高效开发</p></blockquote><h4 id="3前后端分离的web开发模式"><a class="markdownIt-Anchor" href="#3前后端分离的web开发模式"></a> 3.前后端分离的Web开发模式</h4><blockquote><p>前后端分离的概念：前后端分离的开发模式，依赖于Ajax技术的广泛使用，简而言之，前后端分离的Web开发模式就是后端只负责提供API接口，前端使用Ajax调用接口的开发模式</p></blockquote><h4 id="4前后端分离的优缺点"><a class="markdownIt-Anchor" href="#4前后端分离的优缺点"></a> 4.前后端分离的优缺点</h4><p><mark>优点</mark></p><blockquote><p>开发体验好：前端专注于UI页面开发，后端专注于api的开发，且前端有更多的选择性</p><p>用户体验好：Ajax的广泛应用，极大的提高了用户的体验，可以轻松实现页面的同步刷新</p><p>减轻了服务器端的渲染压力</p></blockquote><p><mark>缺点</mark></p><blockquote><p>不利于SEO，不利于爬虫的爬取</p></blockquote><h4 id="5如何选择开发模式"><a class="markdownIt-Anchor" href="#5如何选择开发模式"></a> 5.如何选择开发模式</h4><p><mark>不谈业务场景选使用都是耍流氓</mark></p><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329211010552.png" alt="image-20240329211010552"></p><h3 id="52什么是身份认证"><a class="markdownIt-Anchor" href="#52什么是身份认证"></a> 5.2什么是身份认证</h3><h4 id="1什么是身份认证"><a class="markdownIt-Anchor" href="#1什么是身份认证"></a> 1.什么是身份认证</h4><blockquote><p>身份认证又称“身份验证”，“鉴权”，是指通过一定的手段，完成对用户的身份确认</p></blockquote><h4 id="2为什么需要身份验证"><a class="markdownIt-Anchor" href="#2为什么需要身份验证"></a> 2.为什么需要身份验证</h4><blockquote><p>身份验证的目的，是为了确认**当前用户所声称某种身份的用户确实是某种用户</p></blockquote><h4 id="3不同开发模式下的身份验证"><a class="markdownIt-Anchor" href="#3不同开发模式下的身份验证"></a> 3.不同开发模式下的身份验证</h4><p><strong>服务器渲染推荐使用Session认证机制</strong></p><p><strong>前后端分离推荐使用JWT认证机制</strong></p><h3 id="53session认证机制"><a class="markdownIt-Anchor" href="#53session认证机制"></a> 5.3Session认证机制</h3><h4 id="1http协议的无状态性"><a class="markdownIt-Anchor" href="#1http协议的无状态性"></a> 1.HTTP协议的无状态性</h4><blockquote><p>HTTP协议的无状态性，指的是客户端每次HTTP请求都是独立的，连续多个请求之间没有直接的关系，服务器不会主动保留每次HTTP请求的状态</p></blockquote><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329212001957.png" alt="image-20240329212001957"></p><h4 id="2如何突破http无状态的限制"><a class="markdownIt-Anchor" href="#2如何突破http无状态的限制"></a> 2.如何突破HTTP无状态的限制</h4><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329212149180.png" alt="image-20240329212149180"></p><p><mark>现实生活中的会员卡身份认证方式，就叫做Cookie</mark></p><h4 id="3什么是cookie"><a class="markdownIt-Anchor" href="#3什么是cookie"></a> 3.什么是Cookie</h4><blockquote><p>Cookie就是存储在浏览器中的一段键值对，他的大小不超过4kb，它由一个值(value)和一个键值(key)和其他几个用于控制Cookie有效期，安全性，适用范围的可选属性组成</p><p>不同域名下的Cookie各自独立，每当客户端发起请求时，会自动把当前域名下的所有未过期的Cookie一起发送给服务器</p></blockquote><p><mark>四大特性</mark></p><ol><li>自动发送</li><li>域名独立</li><li>过期时限</li><li>4kb限制</li></ol><h4 id="4cookie在身份验证的作用"><a class="markdownIt-Anchor" href="#4cookie在身份验证的作用"></a> 4.Cookie在身份验证的作用</h4><blockquote><p>客户端第一次请求服务器的时候，服务器会通过响应头的方式，向客户端发送一个身份验证的Cookie，客户端会自动将COOKIE保存在浏览器中</p><p>随后当客户端浏览器每次请求服务器的时候，浏览器都会自动将身份认证相关的Cookie，通过请求头的方式发送给服务器，服务器即可验明客户端的身份</p></blockquote><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329213207760.png" alt="image-20240329213207760"></p><h4 id="5cookie的安全性"><a class="markdownIt-Anchor" href="#5cookie的安全性"></a> 5.Cookie的安全性</h4><p><mark>COOKIE不具有安全性</mark></p><blockquote><p>由于Cookie是存储在浏览器中的，而且浏览器也提供了读写Cookie的API，也难辞Cookie也很容易被伪造，不具有安全性</p></blockquote><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329213612017.png" alt="image-20240329213612017"></p><p><strong>所以千万不要使用Cookie来存储用户隐私且敏感的数据</strong></p><h4 id="6提高身份认证的安全性"><a class="markdownIt-Anchor" href="#6提高身份认证的安全性"></a> 6.提高身份认证的安全性</h4><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329213730371.png" alt="image-20240329213730371"></p><p><strong>这种会员卡+刷卡认证的设计理念，就是Session认证机制的精髓</strong></p><p>在服务器会验证这个Cookie是否真正存在</p><h4 id="7session的工作原理"><a class="markdownIt-Anchor" href="#7session的工作原理"></a> 7.Session的工作原理</h4><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329213923164.png" alt="image-20240329213923164"></p><h3 id="54在express中使用session认证"><a class="markdownIt-Anchor" href="#54在express中使用session认证"></a> 5.4在Express中使用Session认证</h3><h4 id="1安装express-session认证"><a class="markdownIt-Anchor" href="#1安装express-session认证"></a> 1.安装express-session认证</h4><npm i express-session><h4 id="2配置"><a class="markdownIt-Anchor" href="#2配置"></a> 2.配置</h4><p>安装成功后，需要通过app.use()来注册session中间件，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TODO：配置Session中间件</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;ycx&#x27;</span>,</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>:<span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="3如何向session中存入数据"><a class="markdownIt-Anchor" href="#3如何向session中存入数据"></a> 3.如何向session中存入数据</h4><p>配置成功后，就可以通过req.session来访问和配置session对象，从而存储用户关键信息</p><p><mark>只有配置成功后，才能通过req.出来session这个属性</mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">username</span> != <span class="string">&#x27;admin&#x27;</span> || req.<span class="property">body</span>.<span class="property">password</span> != <span class="string">&#x27;000000&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">stats</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;登陆失败&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//TODO2:将登陆成功后的用户信息，保存在Session中</span></span><br><span class="line"><span class="comment">//只有配置成功后，才能通过req.出来session这个属性</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span><span class="comment">//用户信息</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">islogin</span> = <span class="literal">true</span><span class="comment">//登陆状态</span></span><br><span class="line"></span><br><span class="line">res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">ms</span>: <span class="string">&#x27;登录成功&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h4 id="4从session中取数据"><a class="markdownIt-Anchor" href="#4从session中取数据"></a> 4.从session中取数据</h4><p>可以直接从req.session中取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TODO3从session中获取用户名称，响应给客户端</span></span><br><span class="line"> <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">islogin</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;fail&#x27;</span>&#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">   <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">   <span class="attr">username</span>: <span class="string">&#x27;req.session.user.username&#x27;</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h4 id="5清空session"><a class="markdownIt-Anchor" href="#5清空session"></a> 5.清空session</h4><p>使用req.session.destroy()函数，<mark>只会清空当前用户服务器保存的session</mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出登录的接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="55jwt认证机制"><a class="markdownIt-Anchor" href="#55jwt认证机制"></a> 5.5JWT认证机制</h3><h4 id="1了解session的缺点"><a class="markdownIt-Anchor" href="#1了解session的缺点"></a> 1.了解session的缺点</h4><blockquote><p>session认证机制需要配合Cookie才能实现，由于Cookie默认不支持跨域访问，所以当涉及到前端跨域请求后端接口时，需要很多额外的配置，</p><p>前后端需要跨域问题时，推荐session</p><p>不需要时，推荐jwt</p></blockquote><h4 id="2什么是jwt"><a class="markdownIt-Anchor" href="#2什么是jwt"></a> 2.什么是JWT</h4><p>JWT是目前最流行的跨域认证解决方案</p><h4 id="3jwt工作原理"><a class="markdownIt-Anchor" href="#3jwt工作原理"></a> 3.JWT工作原理</h4><h4 id="image-20240402201227994"><a class="markdownIt-Anchor" href="#image-20240402201227994"></a> <img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240402201227994.png" alt="image-20240402201227994"></h4><blockquote><p>用户的信息通过Token字符串的方式，保存在客户端浏览器中，服务器通过还原Token字符串的形式来验证用户的身份。</p></blockquote><h4 id="4jwt字符串组成"><a class="markdownIt-Anchor" href="#4jwt字符串组成"></a> 4.JWT字符串组成</h4><p>JWT通常由三部分组成</p><blockquote><p>Header、Payload(有效荷载)、Signature(签名)</p></blockquote><p>三者之间使用&quot;.&quot;分隔</p><h4 id="5jwt三个部分的代表含义"><a class="markdownIt-Anchor" href="#5jwt三个部分的代表含义"></a> 5.JWT三个部分的代表含义</h4><p><mark>Header</mark><mark>Signature</mark></p><blockquote><p>是安全性相关的部分，只是为了保证Token的安全性</p></blockquote><p><mark>Payload</mark></p><blockquote><p>是真正的用户信息，他是用户信息经过加密之后生成的字符串</p></blockquote><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240402220156590.png" alt="image-20240402220156590"></p><h4 id="6jwt的使用方式"><a class="markdownIt-Anchor" href="#6jwt的使用方式"></a> 6.JWT的使用方式</h4><p>客户端收到服务器返回的JWT之后，将他存储在</p><p><strong>localStorage或者sessionStorage</strong>之中</p><p>此后，客户端每次与服务器端通信，都要带上这个JWT字符串，从而进行身份验证。</p><p><strong>推荐的做法：</strong></p><blockquote><p>将JWT放在HTTP请求头的Authorization字段中</p></blockquote><p><strong>其格式为：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Authorization</span>: <span class="title class_">Bearer</span> &lt;token&gt;</span><br></pre></td></tr></table></figure><h3 id="56在express中使用jwt"><a class="markdownIt-Anchor" href="#56在express中使用jwt"></a> 5.6在Express中使用JWT</h3><h4 id="1安装jwt相关包"><a class="markdownIt-Anchor" href="#1安装jwt相关包"></a> 1.安装JWT相关包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><p><strong>其中</strong></p><ul><li>jsonwebtoken用于生成JWT字符串</li><li>express-jwt用于将JWT字符串解析还原成JSON对象</li></ul><h4 id="2导入相关包"><a class="markdownIt-Anchor" href="#2导入相关包"></a> 2.导入相关包</h4><p>使用require()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span></span><br><span class="line"><span class="keyword">const</span> jsonwebtoken = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJwt = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3定义secret密钥"><a class="markdownIt-Anchor" href="#3定义secret密钥"></a> 3.定义Secret密钥</h4><blockquote><p>为了保证JWT字符串安全性，防止</p></blockquote></npm>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库与身份验证&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据库与身份验证&quot;&gt;&lt;/a&gt; 数据库与身份验证&lt;/h1&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;br&gt;
  &lt;/p&gt;&lt;h2 style=&quot;text-align:cen</summary>
      
    
    
    
    <category term="数据库" scheme="https://ycx6666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="nodejs" scheme="https://ycx6666.github.io/tags/nodejs/"/>
    
    <category term="npm" scheme="https://ycx6666.github.io/tags/npm/"/>
    
    <category term="身份验证" scheme="https://ycx6666.github.io/tags/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
    
    <category term="数据库" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统第四章课后作业</title>
    <link href="https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A2%E8%BD%AF%E4%BB%B62204%E6%88%B4%E8%85%BE%E5%AE%87202226010418/"/>
    <id>https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A2%E8%BD%AF%E4%BB%B62204%E6%88%B4%E8%85%BE%E5%AE%87202226010418/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-15T10:46:44.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四章课后作业"><a class="markdownIt-Anchor" href="#第四章课后作业"></a> 第四章课后作业</h2><h3 id="1"><a class="markdownIt-Anchor" href="#1"></a> 1.</h3><p><strong>某酒店集团公司在全国各城市开有酒店。每个酒店都有客房，客户可在网上先登录，然后预订，也可入店时现场预订。其住宿业务数据库中有如下4个表：</strong></p><p><strong>Hotel(hotelNo, name, city, address, phone)</strong><br><strong>Room(roomNo, hotelNo, type, price)</strong><br><strong>Booking (hotelNo, roomNo, guestNo, dateFrom, dateTo)</strong><br><strong>Guest(guestNo, password, name, city, email, phone, discount, creditNo)</strong><br><strong>其中房间类型type字段的取值有单人间、双人间、商务间、豪华间。price是指住宿一天的房价。</strong><br><strong>1)写出创建Room表和Booking表的SQL语句。</strong><br><strong>2)创建一个视图，列出在2019-09-30这天，入住在编号为H0001的酒店的客人情况表，输出字段包括客人名字、房间号、房间类型、价格。</strong><br><strong>3)创建一个存储过程，以起始日期、结束日期、酒店号为输入参数，求出所指的住宿期间，这个酒店可供预定的房间列表，包括房间号、类型、价格。按价格升序排列。</strong><br><strong>4)有业务规则：不允许发生一个客户在两个不同的酒店有起始日期相同的预订。请创建一个触发器，表示该业务规则。</strong></p><ol><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Room (</span><br><span class="line">roomNo VARCHAR(10),//假设房间号为10个字符</span><br><span class="line">hotelNo VARCHAR(10),//假设宾馆好为10个字符</span><br><span class="line">type ENUM(‘单人间’，‘双人间’，‘三人间’)，//假设有这三种房间</span><br><span class="line">price INT,</span><br><span class="line">PRIMARY KEY (roomNo,hotelNo),</span><br><span class="line">  FOREIGN KEY (hotelNo) REFERENCES Hotel(hotelNo)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE Booking (</span><br><span class="line">  hotelNo VARCHAR(10),</span><br><span class="line">  roomNo VARCHAR(10),</span><br><span class="line">  guestNo int,</span><br><span class="line">  dateFrom DATE,</span><br><span class="line">  dateto DATE,</span><br><span class="line">  PRIMARY KEY (hotelNo,roomNo,guestNo,dateFrom,dateTo),</span><br><span class="line">  FOREIGN KEY (hotelNo) REFERENCES Hotel(hotelNo),</span><br><span class="line">  FOREIGN KEY (roomNo) REFERENCES Room(roomNo),</span><br><span class="line">  FOREIGN KEY (guestNo) REFERENCES Guest(guestNo)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_h0001 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> g.name,b.roomNo,r.type,r.prcie </span><br><span class="line"><span class="keyword">FROM</span> Booking b</span><br><span class="line"><span class="keyword">JOIN</span> Guest g <span class="keyword">IN</span> b.guestNo<span class="operator">=</span>g.guestNo</span><br><span class="line"><span class="keyword">JOIN</span> Room r <span class="keyword">IN</span> b.roomNo<span class="operator">=</span>r.roomNo <span class="keyword">AND</span> b.hotelNo<span class="operator">=</span>r.hotelNo</span><br><span class="line"><span class="keyword">WHERE</span> b.hotelNo<span class="operator">=</span><span class="string">&#x27;H0001&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> <span class="string">&#x27;2019-09-30&#x27;</span> <span class="keyword">BETWEEN</span> b.dateFrom <span class="keyword">AND</span> b.dateTo;</span><br></pre></td></tr></table></figure><ol start="3"><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE getGuestInfo(@gDateFrom in DATE,@gDateTo in DATE,@gHotelNo in VARCHAR)</span><br><span class="line">BEGIN </span><br><span class="line">SELECT r.roomNo,r.type,r.price</span><br><span class="line">FROM Room r</span><br><span class="line">WHERE @gHotelNo=r.hotelNo AND r.roomNo NOT IN(</span><br><span class="line">  SELECT b.roomNo</span><br><span class="line">    FROM Booking b</span><br><span class="line">    WHERE b.hotelNo=@gHotelNo AND NOT(</span><br><span class="line">    b.dateTo&gt;@gDateFrom AND </span><br><span class="line">      b.dateStart&lt;@gDateTo</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  ORDER BY r.price ASC</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><ol start="4"><li></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> unableInsertBooking</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> Booking</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> sum <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">INTO</span> sum</span><br><span class="line"><span class="keyword">FROM</span> Booking</span><br><span class="line"><span class="keyword">WHERE</span> new.guestNo<span class="operator">=</span>b.guestNo</span><br><span class="line"><span class="keyword">AND</span> new.dateFrom<span class="operator">=</span>b.dateFrom</span><br><span class="line"><span class="keyword">AND</span> new.hotelNo<span class="operator">&lt;&gt;</span>b.hotelNo</span><br><span class="line">IF sum<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line"><span class="keyword">SET</span> MESSAGE_TEXT<span class="operator">=</span><span class="string">&#x27;Wrong operation!&#x27;</span></span><br><span class="line"><span class="keyword">END</span> IF</span><br><span class="line"> <span class="keyword">END</span></span><br><span class="line"> DELIMITER;</span><br></pre></td></tr></table></figure><h2 id="2"><a class="markdownIt-Anchor" href="#2"></a> 2.</h2><p><strong>数据库中的对象，例如表，其模式是存储在DBMS内部的表中。假设表对象的模式存储在DBMS内部的tableSchema表中，请写出tableSchema表的模式。并用SQL写出tableSchema表的模式的定义语句。注意：要存储表对象的模式，在DBMS内部光有tableSchema表还不够，还要有辅助表才行。基于严格按类分表存储原则，以及类与类之间有联系，还要求写出辅助表的定义。</strong></p><p><strong>tableSchema表的模式定义</strong></p><p>TableSchema 表可能包括表名、字段名、数据类型、是否可为空、主键、外键等信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tableSchema (</span><br><span class="line">  tableName <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  columnName <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  dataType <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  isNullable <span class="type">BOOLEAN</span>,</span><br><span class="line">  isPrimaryKey <span class="type">BOOLEAN</span>,</span><br><span class="line">  isForeignKey <span class="type">BOOLEAN</span>,</span><br><span class="line">  referenceTable <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  referenceColumn <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="comment">/* 其它可能的字段 */</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (tableName, columnName)</span><br><span class="line">  <span class="comment">/* 外键约束等 */</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>辅助表</strong></p><p>辅助表可用来存储索引或者关系信息的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> auxiliaryTable (</span><br><span class="line">  tableName <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  constraintName <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  constraintType <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="comment">/* 其它可能的辅助信息 */</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (tableName, constraintName)</span><br><span class="line">  <span class="comment">/* 外键约束等 */</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第四章课后作业&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第四章课后作业&quot;&gt;&lt;/a&gt; 第四章课后作业&lt;/h2&gt;
&lt;h3 id=&quot;1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1&quot;&gt;&lt;/a&gt; 1.&lt;/h</summary>
      
    
    
    
    <category term="作业" scheme="https://ycx6666.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="数据库系统" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统第一、二章课后作业</title>
    <link href="https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E4%B8%80/"/>
    <id>https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E4%B8%80/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-15T10:46:52.788Z</updated>
    
    <content type="html"><![CDATA[<p>##习题一</p><ol><li><p>标识每个表的主键和外键：</p><ul><li>学院表（Department）：主键是 <code>deptNo</code>。</li><li>学生表（Student）：主键是 <code>studentNo</code>。<code>deptNo</code> 是外键，引用了学院表（Department）的<code>deptNo</code>。</li><li>课程表（Course）：主键是 <code>courseNo</code>。<code>deptNo</code> 是外键，引用学院表（Department）的<code>deptNo</code>。</li><li>教师表（Teacher）：主键是 <code>teacherNo</code>。<code>deptNo</code> 是外键，引用学院表（Department）的<code>deptNo</code>。</li><li>教师开课表（Teach）：主键可能是 <code>courseNo</code>、<code>semester</code> 和 <code>classNo</code> 的组合。<code>courseNo</code> 是外键，引用课程表（Course）的<code>courseNo</code>；<code>teacherNo</code> 是外键，引用教师表（Teacher）的<code>teacherNo</code>。</li><li>学生选课表（Enroll）：主键是 <code>studentNo</code>、<code>courseNo</code>、<code>semester</code> 的组合。<code>studentNo</code> 是外键，引用学生表（Student）的<code>studentNo</code>；<code>courseNo</code> 是外键，引用教师开课表（Teach）的<code>courseNo</code>；<code>teacherNo</code>是外键，引用教师表<code>(Teacher)</code>中的主键。</li><li>教室表（Classroom）：主键是 <code>classroomNo</code>。</li><li>排课表（Dispatch）：主键是 <code>courseNo</code>、<code>semester</code>、<code>classNo</code>、<code>period</code>、<code>weekday</code> 的组合。<code>classroomNo</code> 是外键，引用教室表（Classroom）的<code>classroomNo</code>。</li></ul></li><li><p>域约束：</p><ul><li>课程表（Course）中的 <code>credit</code> 字段：域约束为数值类型，取值范围取决于学校的学分制度。</li><li>教师表（Teacher）中的 <code>rank</code> 字段：域约束为字符串类型,取值范围是预定义的职称集合，例如 {‘助教’, ‘讲师’, ‘副教授’, ‘教授’} 等。</li></ul></li><li><p>使用关系代数生成以下用户所需业务数据：</p><p>(a)</p><p>​</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mrow><mi>s</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>N</mi><mi>o</mi><mo separator="true">,</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo separator="true">,</mo><mi>b</mi><mi>i</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>d</mi><mi>a</mi><mi>y</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>σ</mi><mrow><mi>s</mi><mi>e</mi><mi>x</mi><msup><mo>=</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><msup><mtext>女</mtext><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∧</mo><mi>Y</mi><mi>E</mi><mi>A</mi><mi>R</mi><mo stretchy="false">(</mo><mi>b</mi><mi>i</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>d</mi><mi>a</mi><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2000</mn></mrow></msub><mo stretchy="false">(</mo><mi>S</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_{studentNo, name, birthday}(\sigma_{sex = &#x27;女&#x27; \land YEAR(birthday) = 2000}(Student))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">o</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">x</span><span class="mrel mtight"><span class="mrel mtight">=</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mtight"><span class="mord cjk_fallback mtight">女</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mbin mtight">∧</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mord mathnormal mtight">A</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span><span class="mrel mtight">=</span><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">t</span><span class="mord mathnormal">u</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p>​</p><p>(b)</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mrow><mi>C</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi>N</mi><mi>o</mi><mo separator="true">,</mo><mi>C</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo separator="true">,</mo><mi>E</mi><mi>n</mi><mi>r</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo separator="true">,</mo><mi>C</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>i</mi><mi>t</mi><mo separator="true">,</mo><mi>E</mi><mi>n</mi><mi>r</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>e</mi></mrow></msub><mo stretchy="false">(</mo><mi>E</mi><mi>n</mi><mi>r</mi><mi>o</mi><mi>l</mi><mi>l</mi><msub><mtext>⨝</mtext><mrow><mi>E</mi><mi>n</mi><mi>r</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi>N</mi><mi>o</mi><mo>=</mo><mi>C</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi>N</mi><mi>o</mi><mo>∧</mo><mi>E</mi><mi>n</mi><mi>r</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>N</mi><mi>o</mi><msup><mo>=</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mn>20084340</mn><msup><mn>7</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></msub><mi>C</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_{Course.courseNo, Course.name, Enroll.semester, Course.credit, Enroll.score}(Enroll ⨝_{Enroll.courseNo=Course.courseNo \land Enroll.studentNo=&#x27;200843407&#x27;} Course)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">o</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord">⨝</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">o</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">o</span><span class="mbin mtight">∧</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">o</span><span class="mrel mtight"><span class="mrel mtight">=</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">8</span><span class="mord mtight">4</span><span class="mord mtight">3</span><span class="mord mtight">4</span><span class="mord mtight">0</span><span class="mord mtight"><span class="mord mtight">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></span></p><p>©</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mrow><mi>S</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>N</mi><mi>o</mi><mo separator="true">,</mo><mi>S</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo separator="true">,</mo><mi>S</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>e</mi><mi>x</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>σ</mi><mrow><mi>s</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>r</mi><msup><mo>=</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mn>2011</mn><mo>−</mo><msup><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext> </mtext><mi>l</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>c</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi>N</mi><mi>o</mi><msup><mo>=</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi>G</mi><mn>6103000</mn><msup><mn>9</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></msub><mo stretchy="false">(</mo><mi>E</mi><mi>n</mi><mi>r</mi><mi>o</mi><mi>l</mi><mi>l</mi><mo stretchy="false">)</mo><msub><mo>⋈</mo><mrow><mi>E</mi><mi>n</mi><mi>r</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>=</mo><mi>S</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>N</mi><mi>o</mi></mrow></msub><mi>S</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_{Student.studentNo,Student.name,Student.sex}(\sigma_{semester=&#x27;2011-1&#x27; \ landcourseNo=&#x27;G61030009&#x27;}(Enroll) \Join _{Enroll.student=Student.studentNo}Student)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">o</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight"><span class="mrel mtight">=</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">1</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mtight">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace mtight"><span class="mtight"> </span></span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">o</span><span class="mrel mtight"><span class="mrel mtight">=</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathnormal mtight">G</span><span class="mord mtight">6</span><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">3</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight"><span class="mord mtight">9</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel">⋈</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">t</span><span class="mord mathnormal">u</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></span></p><h2 id="习题二"><a class="markdownIt-Anchor" href="#习题二"></a> 习题二</h2><p>（1）</p><ul><li>Hotel表<ul><li>主键: hotelNo</li><li>没有外键</li></ul></li><li>Room表<ul><li>主键: (roomNo, hotelNo) 的联合主键</li><li>外键: hotelNo (关联到Hotel表的hotelNo)</li></ul></li><li>Booking表<ul><li>主键: (hotelNo, roomNo, guestNo, dateFrom, dateTo) 的联合主键</li><li>外键: hotelNo (关联到Hotel表的hotelNo)，roomNo (关联到Room表的roomNo)，guestNo (关联到Guest表的guestNo)</li></ul></li><li>Guest表<ul><li>主键: guestNo</li><li>没有外键</li></ul></li></ul><p>(2)</p><ul><li>每个房间在任何时间段内只能被一位客户预订，不允许在相同日期范围内有重叠的预订。</li><li>客户在进行网络预订时必须使用有效的身份验证登陆信息，即客户的guestNo和password字段需要有效对应才能完成预订流程。</li></ul><p>(3)</p><p>​(a)</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mrow><mi>R</mi><mi>o</mi><mi>o</mi><mi>m</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo separator="true">,</mo><mi>H</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>l</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo separator="true">,</mo><mi>H</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>l</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>σ</mi><mrow><mi>R</mi><mi>o</mi><mi>o</mi><mi>m</mi><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>e</mi><mo>&gt;</mo><mn>1500</mn></mrow></msub><mo stretchy="false">(</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>m</mi><mtext>⨝</mtext><mi>H</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>l</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_{Room.type, Hotel.name, Hotel.city}(\sigma_{Room.price &gt; 1500}(Room ⨝ Hotel))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">e</span><span class="mrel mtight">&gt;</span><span class="mord mtight">1</span><span class="mord mtight">5</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord">⨝</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p>​(b)</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mrow><mi>H</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>l</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo separator="true">,</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>m</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>o</mi><mi>o</mi><mi>m</mi><mi>N</mi><mi>o</mi><mo separator="true">,</mo><mi>R</mi><mi>o</mi><mi>o</mi><mi>m</mi><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>e</mi></mrow></msub><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msub><mi>σ</mi><mrow><mi>H</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>l</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi><msup><mo>=</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext>长</mtext><msup><mtext>沙</mtext><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi>A</mi><mi>N</mi><mi>D</mi><mi>R</mi><mi>o</mi><mi>o</mi><mi>m</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><msup><mo>=</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext>单人</mtext><msup><mtext>间</mtext><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></msub><mo stretchy="false">(</mo><mi>H</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>l</mi><mtext>⨝</mtext><mi>R</mi><mi>o</mi><mi>o</mi><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><msub><mi>σ</mi><mrow><mi>B</mi><mi>o</mi><mi>o</mi><mi>k</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">.</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>F</mi><mi>r</mi><mi>o</mi><mi>m</mi><msup><mo>≤</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mn>2019</mn><mo>−</mo><mn>09</mn><mo>−</mo><mn>1</mn><msup><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi>A</mi><mi>N</mi><mi>D</mi><mi>B</mi><mi>o</mi><mi>o</mi><mi>k</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">.</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>T</mi><mi>o</mi><msup><mo>≥</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mn>2019</mn><mo>−</mo><mn>09</mn><mo>−</mo><mn>1</mn><msup><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></msub><mo stretchy="false">(</mo><mi>B</mi><mi>o</mi><mi>o</mi><mi>k</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_{Hotel.name, Room.roomNo, Room.price}(    (σ_{Hotel.city = &#x27;长沙&#x27; AND Room.type = &#x27;单人间&#x27;}(Hotel ⨝ Room))    -\\    (σ_{Booking.dateFrom \leq &#x27;2019-09-11&#x27; AND Booking.dateTo \geq &#x27;2019-09-11&#x27;}(Booking)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">e</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mtight">.</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">o</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight"><span class="mrel mtight">=</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback mtight">长</span><span class="mord mtight"><span class="mord cjk_fallback mtight">沙</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathnormal mtight">A</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mrel mtight"><span class="mrel mtight">=</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback mtight">单</span><span class="mord cjk_fallback mtight">人</span><span class="mord mtight"><span class="mord cjk_fallback mtight">间</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord">⨝</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mrel mtight"><span class="mrel mtight">≤</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">1</span><span class="mord mtight">9</span><span class="mbin mtight">−</span><span class="mord mtight">0</span><span class="mord mtight">9</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mord mtight"><span class="mord mtight">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathnormal mtight">A</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mtight">.</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight">o</span><span class="mrel mtight"><span class="mrel mtight">≥</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">1</span><span class="mord mtight">9</span><span class="mbin mtight">−</span><span class="mord mtight">0</span><span class="mord mtight">9</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mord mtight"><span class="mord mtight">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p></li></ol><h2 id="习题三"><a class="markdownIt-Anchor" href="#习题三"></a> 习题三</h2><ol><li><pre class="highlight"><code class="SQL"><span class="keyword">SELECT</span> h.name,r.type,COUTT(r.roomNo) <span class="keyword">AS</span> room_num <span class="keyword">From</span> Hotel <span class="keyword">As</span> h<span class="keyword">JOIN</span> Room r <span class="keyword">ON</span> h.hotelNo<span class="operator">=</span>r.hotelNo<span class="keyword">WHERE</span> h.city<span class="operator">=</span><span class="string">&#x27;长沙&#x27;</span><span class="keyword">GROUP</span> <span class="keyword">BY</span> h.name,r.type<span class="keyword">ORDER</span> <span class="keyword">BY</span> h.name;<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼0--&gt;</span></code></pre></li><li><pre class="highlight"><code class="sql"><span class="keyword">SELECT</span> h.name,r.roomNo,r.price<span class="keyword">FROM</span> Hotel h<span class="keyword">JOIN</span> Room r <span class="keyword">ON</span> h.hotelNo<span class="operator">=</span>r.hotelNo<span class="keyword">WHERE</span> h.city<span class="operator">=</span><span class="string">&#x27;长沙&#x27;</span> <span class="keyword">AND</span> r.type<span class="operator">=</span><span class="string">&#x27;双人间&#x27;</span> <span class="keyword">AND</span> r.price<span class="operator">&lt;</span><span class="number">140</span><span class="keyword">ORDER</span> <span class="keyword">BY</span> h.name,r.price;<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼1--&gt;</span></code></pre></li><li><pre class="highlight"><code class="sql"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> Booking b<span class="keyword">WHERE</span> b.dateTo<span class="operator">=</span><span class="keyword">NULL</span>;<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼2--&gt;</span></code></pre></li><li><pre class="highlight"><code class="sql"><span class="keyword">SELECT</span> h.city <span class="built_in">AVG</span>(r.price) <span class="keyword">AS</span> avg_price<span class="keyword">FROM</span> Hotel h<span class="keyword">JOIN</span> Room r <span class="keyword">ON</span> h.hotelNo<span class="operator">=</span>r.hotelNo<span class="keyword">GROUP</span> <span class="keyword">BY</span> h.city;<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼3--&gt;</span></code></pre></li><li><pre class="highlight"><code class="sql"><span class="keyword">SELECT</span> h.city,h.name,b.roomNo,g.name,g.guestNo<span class="keyword">FROM</span> Booking b<span class="keyword">JOIN</span> Hotel h <span class="keyword">ON</span> r.hotelNo<span class="operator">=</span>b.hotelNo<span class="keyword">JOIN</span> Guest g <span class="keyword">ON</span> b.guestNo<span class="operator">=</span>b.guestNo<span class="keyword">WHERE</span> g.city<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> b.dateFrom<span class="operator">&lt;=</span><span class="string">&#x27;2019-09-29&#x27;</span> <span class="keyword">AND</span> b.dateTo<span class="operator">&gt;=</span><span class="string">&#x27;2019-09-29&#x27;</span>;<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼4--&gt;</span></code></pre></li><li><pre class="highlight"><code class="sql"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(r.price) <span class="keyword">AS</span> sum_income<span class="keyword">FROM</span> Booking b<span class="keyword">JOIN</span> Hotel h <span class="keyword">ON</span> b.hotelNo<span class="operator">=</span>h.hotelNO<span class="keyword">JOIN</span> Room r <span class="keyword">ON</span> b.hotelNo<span class="operator">=</span>r.hotelNo<span class="keyword">WHERE</span> h.city<span class="operator">=</span><span class="string">&#x27;长沙&#x27;</span> <span class="keyword">AND</span> b.dateFrom<span class="operator">&lt;=</span><span class="string">&#x27;2019-09-29&#x27;</span> <span class="keyword">AND</span> b.dateTo<span class="operator">&gt;=</span><span class="string">&#x27;2019-09-29&#x27;</span>;<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼5--&gt;</span></code></pre></li><li><pre class="highlight"><code class="sql"><span class="keyword">SELECT</span> h.city,h.name,(<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> b.roomNo)<span class="operator">/</span><span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> r.roomNO))<span class="operator">*</span><span class="number">100</span><span class="keyword">AS</span> occupancyRate<span class="keyword">FROM</span> Hotel h<span class="keyword">JOIN</span> Room r <span class="keyword">ON</span> r.hotelNo<span class="operator">=</span>h.hotelNo<span class="keyword">JOIN</span> Booking b <span class="keyword">ON</span> r.hotel<span class="operator">=</span>b.hotelNo <span class="keyword">AND</span> r.roomNo<span class="operator">=</span>b.roomNo<span class="keyword">WHERE</span> b.dateFrom<span class="operator">&lt;=</span><span class="string">&#x27;2019-09-29&#x27;</span> <span class="keyword">AND</span> b.dateTo<span class="operator">&gt;=</span><span class="string">&#x27;2019-09-29&#x27;</span><span class="keyword">GROUP</span> <span class="keyword">BY</span> h.city,h.name;<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼6--&gt;</span></code></pre></li><li><pre class="highlight"><code class="sql"><span class="keyword">SELECT</span> r.type<span class="keyword">FROM</span> Room r<span class="keyword">JOIN</span> Hotel h <span class="keyword">ON</span> h.hotelNo<span class="operator">=</span>r.hotelNo<span class="keyword">JOIN</span> Booking b <span class="keyword">ON</span> b.hotelNo<span class="operator">=</span>r.hotelNo <span class="keyword">AND</span> b.roomNo<span class="operator">=</span>r.roomNo<span class="keyword">WHERE</span> h.city<span class="operator">=</span><span class="string">&#x27;长沙&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2019-09-29&#x27;</span> <span class="keyword">BETWEEN</span> b.dateFrom <span class="keyword">AND</span> b.dateTo<span class="keyword">GROUP</span> <span class="keyword">BY</span> r.type<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">DESC</span>LIMIT <span class="number">1</span>;<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼7--&gt;</span></code></pre></li><li><pre class="highlight"><code class="sql"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Hotel(hotelNo,name,city,address,phone) <span class="keyword">VALUES</span> (<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;天马大酒店&#x27;</span>，<span class="string">&#x27;长沙&#x27;</span>，<span class="string">&#x27;岳麓区&#x27;</span>，<span class="string">&#x27;10086&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> Room(roomNo,hotelNo,type,price) <span class="keyword">VALUES</span> (<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;001&#x27;</span>，<span class="string">&#x27;十人间&#x27;</span>，<span class="string">&#x27;10086&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> Booking(hotelNo,roomNo,guestNo,dateFrom,dateTo) <span class="keyword">VALUES</span> (<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;001&#x27;</span>，<span class="string">&#x27;001&#x27;</span>，<span class="string">&#x27;2024-03-15&#x27;</span>，<span class="string">&#x27;2024-03-16&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> Guest(guestNo,password,name,city,email,phone,discount,creditNo) <span class="keyword">VALUES</span> (<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;114514&#x27;</span>，<span class="string">&#x27;张三&#x27;</span>，<span class="string">&#x27;长沙&#x27;</span>，<span class="string">&#x27;999@gmail.com&#x27;</span>,<span class="string">&#x27;10086&#x27;</span>,<span class="string">&#x27;0.01&#x27;</span>,<span class="string">&#x27;3131313313131&#x27;</span>);<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼8--&gt;</span></code></pre></li><li><pre class="highlight"><code class="sql"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> archival_booking <span class="keyword">like</span> Booking;<span class="keyword">INSERT</span> <span class="keyword">INTO</span> archival_booking <span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> Booking <span class="keyword">WHERE</span> b.dateFrom<span class="operator">&lt;=</span><span class="string">&#x27;2019-01-01&#x27;</span>;<span class="keyword">DELETE</span> <span class="keyword">FROM</span> Booking<span class="keyword">WHERE</span> dateFrom<span class="operator">&lt;=</span><span class="string">&#x27;2019-01-01&#x27;</span>;<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼9--&gt;</span></code></pre></li><li><pre class="highlight"><code class="sql"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Guest <span class="keyword">WHERE</span> g.guest <span class="keyword">NOT</span> <span class="keyword">IN</span>&#123;<span class="keyword">SELECT</span> b.guestNo<span class="keyword">FROM</span> Booking b<span class="keyword">WHERE</span> b.dateFrom<span class="operator">&gt;=</span><span class="string">&#x27;2017-01-01&#x27;</span>&#125;;<span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--code￼10--&gt;</span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##习题一&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;标识每个表的主键和外键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学院表（Department）：主键是 &lt;code&gt;deptNo&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;学生表（Student）：主键是 &lt;code&gt;studentNo&lt;/code</summary>
      
    
    
    
    <category term="作业" scheme="https://ycx6666.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="数据库系统" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统第三章课后作业</title>
    <link href="https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E4%B8%89/"/>
    <id>https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E4%B8%89/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-15T10:46:49.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库作业三"><a class="markdownIt-Anchor" href="#数据库作业三"></a> 数据库作业三</h1><h2 id="习题一"><a class="markdownIt-Anchor" href="#习题一"></a> 习题一</h2><p>大学教务管理数据库中，操作系统(courseNo为H61030008)是一门专业核心课，请为2019级软件工程专业（专业编号为‘24）的每个学生，向选课表enroll（studentNo, courseNo,semester,score)中添加一行选修该课的记录。将这个操作定义为一个事务。学号的样式为yyyyddssccnm.其中yyyy表示是哪一年级，dd表示所属学院的编号，ss表示专业编号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TRANSACTION <span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Enroll (studentNo,courseNo,semester,score) </span><br><span class="line"><span class="keyword">VALUES</span>(</span><br><span class="line">(<span class="keyword">SELECT</span> studentNo,<span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentNo <span class="keyword">LIKE</span> <span class="string">&#x27;2019__24%&#x27;</span>),</span><br><span class="line">  <span class="string">&#x27;H61030008&#x27;</span>,</span><br><span class="line">(<span class="keyword">SELECT</span> semester <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> courseNo<span class="operator">=</span><span class="string">&#x27;H6103008&#x27;</span>),</span><br><span class="line">   <span class="number">60</span><span class="operator">/</span><span class="operator">/</span>这个数据貌似只有选课表中有，插入数值应该更具实际情况而定</span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h2 id="习题二"><a class="markdownIt-Anchor" href="#习题二"></a> 习题二</h2><p>在图6-7所示的事务执行框架中，从其开始执行，直至执行logCommit()之前，其前面的数更新日志已写入了日志磁盘，有可能吗?在这期间，那些已写人日志磁盘的日志记录，能从日志缓存区删除吗?请说明理由。logCommit()不只是给日志缓存区添加一条&lt;t_id，COMMIT日志记录，还要等待，直至其所有日志记录被写入日志磁盘为止。为什么?对于logAbort()它只是给日志缓存区添加一条&lt;tid，ABORT&gt;日志记录，但并不需要等待。为什么?当一个事务被放弃，其所有日志记录还需要写入日志磁盘吗?请说明理由。</p><ol><li>在提交之前，不一定会将所有的日志全部都写入磁盘，但这些日志一定会在适当的时候异步写入磁盘；在执行logCommit()时，必须将之前的所有日志全部写入磁盘，这样才能在发生崩溃之后完整的执行回滚。</li><li>可能，但这通常由数据库系统管理，可能涉及缓存替换策略和数据库的持久化策略。</li><li>这是为了崩溃后能够完整的执行回滚操作，因为只有等待所有的日志记录全都被写入后，才能保证回滚时能够执行每一步操作。</li><li>一个事务被中止时，他的变更不需要保存到数据库，因此也不需要等待前面的日志全部写入。</li><li>也需要，因为如果系统在回滚时发生崩溃，这些日志将用于再次恢复和回滚，以保证数据库的一致性。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库作业三&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据库作业三&quot;&gt;&lt;/a&gt; 数据库作业三&lt;/h1&gt;
&lt;h2 id=&quot;习题一&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#习题一&quot;&gt;&lt;/a&gt; 习题一&lt;</summary>
      
    
    
    
    <category term="作业" scheme="https://ycx6666.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="数据库系统" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统第四章课后作业</title>
    <link href="https://ycx6666.github.io/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/"/>
    <id>https://ycx6666.github.io/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-15T10:46:28.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="261"><a class="markdownIt-Anchor" href="#261"></a> 2.61</h3><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324110351074.png" alt="image-20240324110351074"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">judge</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((x+<span class="number">1</span>)||x||(!(x&gt;&gt;<span class="number">24</span>)+<span class="number">1</span>)||(!(x&amp;<span class="number">0xff</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, judge(x));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="271"><a class="markdownIt-Anchor" href="#271"></a> 2.71</h3><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324112741611.png" alt="image-20240324112741611"></p><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324112902304.png" alt="image-20240324112902304"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">packed_t</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">xbyte</span><span class="params">(<span class="type">packed_t</span> word, <span class="type">int</span> bytenum)</span> </span><br><span class="line">&#123; </span><br><span class="line">   <span class="keyword">return</span> ((<span class="type">int</span>)(word&lt;&lt;((<span class="number">3</span>-bytenum)&lt;&lt;<span class="number">3</span>)))&gt;&gt;<span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> x,num;-</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x,&amp;num);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;0x%hx&quot;</span>, xbyte(x,num));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="287"><a class="markdownIt-Anchor" href="#287"></a> 2.87</h3><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324142831618.png" alt="image-20240324142831618"></p><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324142847715.png" alt="image-20240324142847715"></p><table><thead><tr><th>格式A</th><th>格式A</th><th>格式B</th><th>格式B</th></tr></thead><tbody><tr><td>位</td><td>值</td><td>位</td><td>值</td></tr><tr><td>1 01110 001</td><td>-9/16</td><td>1 0110 0010</td><td>-9/16</td></tr><tr><td>0 10110 101</td><td>208</td><td>0 1110 1010</td><td>208</td></tr><tr><td>1 00111 110</td><td>-7/1024</td><td>1 0000 0111</td><td>-7/1024</td></tr><tr><td>0 00000 101</td><td>5/2^17</td><td>0 0000 0001</td><td>1/1024</td></tr><tr><td>1 11011 000</td><td>-2^12</td><td>1 1110 1111</td><td>-248</td></tr><tr><td>0 11000 100</td><td>768</td><td>0 1111 0000</td><td>+∞</td></tr></tbody></table><h3 id="288"><a class="markdownIt-Anchor" href="#288"></a> 2.88</h3><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324152512538.png" alt="image-20240324152512538"></p><p>**A:**正确，int转float，double转float有可能小数部分损失，但两者仍然相等</p><p>**B:**错误，当x、y其中一者为INT_MAX，其他一个为整数时，会导致int溢出，导致两者不相等</p><p>**C:**正确，改变运算顺序并不影响浮点数相加运算</p><p>**D:**正确，改变运算顺序并不影响浮点数相乘运算</p><p>**E:**错误，当dx=0，dy=1或者dx=1，dy=0时，会导致除法表达式不成立从而不总是为0。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;261&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#261&quot;&gt;&lt;/a&gt; 2.61&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%</summary>
      
    
    
    
    <category term="作业" scheme="https://ycx6666.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="计算机系统" scheme="https://ycx6666.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Express</title>
    <link href="https://ycx6666.github.io/2019/11/Express%E4%BD%BF%E7%94%A8/"/>
    <id>https://ycx6666.github.io/2019/11/Express%E4%BD%BF%E7%94%A8/</id>
    <published>2019-11-21T05:44:57.000Z</published>
    <updated>2024-04-15T10:47:00.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="express"><a class="markdownIt-Anchor" href="#express"></a> Express</h1><p align="center">  <br>  </p><h2 style="text-align:center;color:#F4E0EA">    樱春雪  </h2>  <br>  <br>  <div style="text-align:center">    <a href="https://codeload.github.com/liangjingkanji/DrakeTyporaTheme/zip/refs/heads/master">湖南大学</a>  | <a href="https://theme.typora.io/theme/Drake/">软件工程</a>  | <a href="https://github.com/liangjingkanji/DrakeTyporaTheme/blob/master/issues.md">2204</a></div><br><br><img style="clear:both;display:block;margin:auto;width:400px;height:100px" src="/2019/11/Express%E4%BD%BF%E7%94%A8/7HN)MKDR%[2BI2$@Q69A8$H.png">  <br><p></p><h2 id="1初识express"><a class="markdownIt-Anchor" href="#1初识express"></a> 1.初识Express</h2><h3 id="11express简介"><a class="markdownIt-Anchor" href="#11express简介"></a> 1.1Express简介</h3><h4 id="1什么是express"><a class="markdownIt-Anchor" href="#1什么是express"></a> 1.什么是Express</h4><blockquote><p>Express是基于Node.js平台，快速、开放、极简的Web开发框架</p></blockquote><h4 id="2进一步理解"><a class="markdownIt-Anchor" href="#2进一步理解"></a> 2.进一步理解</h4><p>http内部模块使用很复杂，开发效率低；EXpress是基于http封装出来的。</p><h4 id="3express能做什么"><a class="markdownIt-Anchor" href="#3express能做什么"></a> 3.Express能做什么</h4><p>两种服务器</p><blockquote><p>Web网站服务器：专门提供Web网页的服务器</p><p>API接口服务器：专门提供API接口的服务器</p></blockquote><p><strong>使用Express，可以方便快捷的创建两种服务器</strong></p><h3 id="12express的基本使用"><a class="markdownIt-Anchor" href="#12express的基本使用"></a> 1.2Express的基本使用</h3><h4 id="1安装"><a class="markdownIt-Anchor" href="#1安装"></a> 1.安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express@4.17.1</span><br></pre></td></tr></table></figure><h4 id="2创建最基本web服务器"><a class="markdownIt-Anchor" href="#2创建最基本web服务器"></a> 2.创建最基本Web服务器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//3.启动Web服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at localhost&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3监听get请求"><a class="markdownIt-Anchor" href="#3监听get请求"></a> 3.监听GET请求</h4><p>通过app.get()方法，可以监听</p><p>具体语法格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求url&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;<span class="comment">//req 请求对象 res 响应对象</span></span><br><span class="line">  <span class="comment">/**待处理函数**/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4监听post请求"><a class="markdownIt-Anchor" href="#4监听post请求"></a> 4.监听POST请求</h4><p>通过app.post()方法</p><p>具体格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求url&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;<span class="comment">//req 请求对象 res 响应对象</span></span><br><span class="line">  <span class="comment">/**待处理函数**/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5把内容响应给客户端"><a class="markdownIt-Anchor" href="#5把内容响应给客户端"></a> 5.把内容响应给客户端</h4><p>通过res.send()方法，可以把处理好的内容，发送给客户端</p><p>这个方法既可以发送JSON字符串，也可以发送文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//调用express提供的send方法相应一个对象</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="6获取url中携带的查询参数"><a class="markdownIt-Anchor" href="#6获取url中携带的查询参数"></a> 6.获取URL中携带的查询参数</h4><p>通过req.query对象，可以访问客户端通过查询字符穿的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//默认是空对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="7获取url中的动态参数"><a class="markdownIt-Anchor" href="#7获取url中的动态参数"></a> 7.获取url中的动态参数</h4><p>通过<mark>req.params</mark>对象，可以访问到URL中，通过==：==匹配到的动态参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240325211442354.png" alt="image-20240325211442354"></p><p>也可以匹配两个至多个动态参数例如 <code>/:id/:name</code>，返回一个对象</p><h3 id="13托管动态资源"><a class="markdownIt-Anchor" href="#13托管动态资源"></a> 1.3托管动态资源</h3><h4 id="1expressstatic"><a class="markdownIt-Anchor" href="#1expressstatic"></a> 1.express.static()</h4><p>express提供了该函数，叫做express.static(),可以方便快捷的创建一个静态资源服务器</p><p>例如，通过以下代码就可以将public目录下的图片、CSS文件、Js文件对外开放访问了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><p>现在就可以访问public下所有问价了</p><p><mark>注意</mark></p><blockquote><p>Express在指定的静态目录中查找文件，存放文件的路径名不会出现在路径名中</p></blockquote><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240325212444542.png" alt="image-20240325212444542"></p><p>打开成功</p><h4 id="2托管多个静态资源目录"><a class="markdownIt-Anchor" href="#2托管多个静态资源目录"></a> 2.托管多个静态资源目录</h4><p>可以多次调用express.statci()函数</p><blockquote><p>访问静态资源时候，会按照顺序依次访问资源。</p></blockquote><h4 id="3挂载路径前缀"><a class="markdownIt-Anchor" href="#3挂载路径前缀"></a> 3.挂载路径前缀</h4><p>需要在托管的资源访问路径之前，挂载路径前缀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="14nodemon"><a class="markdownIt-Anchor" href="#14nodemon"></a> 1.4nodemon</h3><h4 id="1为什么要使用"><a class="markdownIt-Anchor" href="#1为什么要使用"></a> 1.为什么要使用</h4><blockquote><p>在编写Node.js项目的时候，如果修改了项目代码，需要频繁close掉，然后重新启动</p><p>使用nodemon之后，它可以监听项目文件的变动，当代码被修改之后，nodemon会帮助重启项目</p></blockquote><h4 id="2安装"><a class="markdownIt-Anchor" href="#2安装"></a> 2.安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><h2 id="2express路由"><a class="markdownIt-Anchor" href="#2express路由"></a> 2.Express路由</h2><h3 id="21介绍"><a class="markdownIt-Anchor" href="#21介绍"></a> 2.1介绍</h3><h3 id="22路由的使用"><a class="markdownIt-Anchor" href="#22路由的使用"></a> 2.2路由的使用</h3><h4 id="1最简单的路由"><a class="markdownIt-Anchor" href="#1最简单的路由"></a> 1.最简单的路由</h4><p>在Express中，最简单的路由的使用方式，就是把路由挂载到app上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//来get</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//来post</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Post ing&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2模块化路由"><a class="markdownIt-Anchor" href="#2模块化路由"></a> 2.模块化路由</h4><p>方便对路由进行模块化管理，不建议将路由直接挂载到app上，而是推荐<mark>将路由抽离为单独的模块</mark></p><p>将路由抽离为单独模块步骤</p><blockquote><ol><li>创建路由.js文件</li><li>调用express.static()方法创建路由对象</li><li>向路由对象上挂载具体的路由</li><li>室友moudule.exports向外共享路由对象</li><li>使用app.use函数注册路由模块</li></ol></blockquote><h4 id="3创建路由js文件"><a class="markdownIt-Anchor" href="#3创建路由js文件"></a> 3.创建路由.js文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">//挂载具体的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;user/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Add new user successfully&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//向外导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=router</span><br></pre></td></tr></table></figure><h4 id="4如何注册路由模块"><a class="markdownIt-Anchor" href="#4如何注册路由模块"></a> 4.如何注册路由模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"><span class="comment">//2.注册</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>app.use()的作用就是用于注册全局的中间件</strong></p><h4 id="5为路由模块添加前缀"><a class="markdownIt-Anchor" href="#5为路由模块添加前缀"></a> 5.为路由模块添加前缀</h4><p>类似于为静态资源统一挂载前缀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;api&#x27;</span>,router)</span><br></pre></td></tr></table></figure><h2 id="3express中间件"><a class="markdownIt-Anchor" href="#3express中间件"></a> 3.Express中间件</h2><h3 id="31中间件概念"><a class="markdownIt-Anchor" href="#31中间件概念"></a> 3.1中间件概念</h3><h4 id="12概念等等"><a class="markdownIt-Anchor" href="#12概念等等"></a> 1.2.概念等等</h4><p>略</p><h4 id="3express中间件的调用流程"><a class="markdownIt-Anchor" href="#3express中间件的调用流程"></a> 3.Express中间件的调用流程</h4><p>当一个请求到达Express的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326163045849.png" alt="image-20240326163045849"></p><h4 id="4express中间件的格式"><a class="markdownIt-Anchor" href="#4express中间件的格式"></a> 4.Express中间件的格式</h4><p>中间件的本质就是一个function函数，其格式如下</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326163143550.png" alt="image-20240326163143550"></p><p><strong>中间间函数形参列表中，必须包含一个next形参，而路由处理函数中只有req、res</strong></p><p><mark>next形参必须放到最后一个</mark></p><h4 id="5next函数的作用"><a class="markdownIt-Anchor" href="#5next函数的作用"></a> 5.next函数的作用</h4><p><mark>next 函数是实现多个中间件连续调用的关键</mark>，他表示把流转关系转交给下一个中间件或路由</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326163407998.png" alt="image-20240326163407998"></p><h3 id="32定义中间件函数"><a class="markdownIt-Anchor" href="#32定义中间件函数"></a> 3.2定义中间件函数</h3><h4 id="1定义"><a class="markdownIt-Anchor" href="#1定义"></a> 1.定义</h4><p>可以通过如下方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个最简单的中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req,res,next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最简单的中间件函数&#x27;</span>)</span><br><span class="line">  <span class="comment">//把流转关系交给下一个中间件或者函数</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Running&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2全局生效的中间件"><a class="markdownIt-Anchor" href="#2全局生效的中间件"></a> 2.全局生效的中间件</h4><p>客户端发起的<strong>任何请求</strong>，到达服务器之后，都会触发的中间件，成为<mark>全局生效的中间件</mark></p><p>通过调用<strong>app.use(中间件函数)</strong>，即可定义一个全局生效的中间件，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(mw)</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326164327361.png" alt="image-20240326164327361"></p><h4 id="3定义全局中间件的简化形式"><a class="markdownIt-Anchor" href="#3定义全局中间件的简化形式"></a> 3.定义全局中间件的简化形式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is the app&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4中间件的作用"><a class="markdownIt-Anchor" href="#4中间件的作用"></a> 4.中间件的作用</h4><blockquote><p>多个中间件之间，可以共享<strong>req和res</strong>，基于这样的特性，我么可以在上游的中间件中，<strong>统一为</strong>req或者res添加自定义属性或者方法，<strong>供下游</strong>中间件或者路由使用</p></blockquote><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326164904111.png" alt="image-20240326164904111">`</p><p>现在需要在每一个需求都获取时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> time=<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is get&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> time=<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在中间件函数中添加自定义属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//为req对象，添加自定义属性</span></span><br><span class="line">  <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  <span class="comment">//添加自定义属性</span></span><br><span class="line">  req.<span class="property">startTime</span>=time</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is the app&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5定义多个全局中间件"><a class="markdownIt-Anchor" href="#5定义多个全局中间件"></a> 5.定义多个全局中间件</h4><p>可以使用app.use连续定义多个全局中间件，客户端请求到达服务器之后，会按照前后顺序执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//第二个</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二个&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User page&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326165934807.png" alt="image-20240326165934807"></p><h4 id="6局部生效的中间件"><a class="markdownIt-Anchor" href="#6局部生效的中间件"></a> 6.局部生效的中间件</h4><blockquote><p>不使用app.use()定义的中间件，叫做局部生效的中间件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mwl</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;局部生效&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User page&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里面只有第一个路由才能被正确设置</p><h4 id="7连续定义多个局部中间件"><a class="markdownIt-Anchor" href="#7连续定义多个局部中间件"></a> 7.连续定义多个局部中间件</h4><p>可以如下定义，顺序从前到后:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mwl1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;局部生效1&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mwl2</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;局部生效2&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,mwl1,mwl2,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;<span class="comment">//(&#x27;/&#x27;,[mwl1,mwl2],(req,res))</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="8中间件五个使用注意事项"><a class="markdownIt-Anchor" href="#8中间件五个使用注意事项"></a> 8.中间件五个使用注意事项</h4><blockquote><ol><li>一定要在路由之前注册中间件</li><li>客户但发送的请求可以连续调用多个中间件函数</li><li>执行完中间件业务代码后，一定要使用next()</li><li>在调用next()后，不用再写其他业务代码了，防止代码逻辑混乱</li><li>连续调用多个中间件，多个中间件之间是共享(req,res)对象的</li></ol></blockquote><h3 id="33中间件分类"><a class="markdownIt-Anchor" href="#33中间件分类"></a> 3.3中间件分类</h3><p><mark>常用的中间件分类</mark></p><blockquote><ol><li>应用级别</li><li>路由级别</li><li>错误级别</li><li>Express内置</li><li>第三方</li></ol></blockquote><h4 id="1应用级别"><a class="markdownIt-Anchor" href="#1应用级别"></a> 1.应用级别</h4><blockquote><p>通过app.use()/app.get()/app.post(),绑定到app实例上的中间件</p></blockquote><h4 id="2路由级别"><a class="markdownIt-Anchor" href="#2路由级别"></a> 2.路由级别</h4><blockquote><p>绑定到express.Router()实例上的，叫做路由级别中间件</p><blockquote><p><strong>差别</strong></p><p>应用级别中间件是绑定到app上，路由级别绑定到Router上</p></blockquote></blockquote><h4 id="3错误级别"><a class="markdownIt-Anchor" href="#3错误级别"></a> 3.错误级别</h4><p>**作用：**专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</p><p>**格式：**错误级别中渐渐暗function()处理函数中，必须有四个形参，形参顺序从前到后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（err,req,res,next)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error occured&#x27;</span>)</span><br><span class="line">  <span class="comment">//1.1人为制造错误</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326172657669.png" alt="image-20240326172657669"></p><p><strong>使用错误级别中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error occured&#x27;</span>)</span><br><span class="line">  <span class="comment">//1.1人为制造错误</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//定义错误级别中间件，防止崩溃</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生了错误&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Error&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326172936210.png" alt="image-20240326172936210"></p><p><strong>程序没有崩溃</strong></p><blockquote><p>注意如果将中间件和路由调换顺序，还是会报错</p></blockquote><h4 id="4express内置中间件"><a class="markdownIt-Anchor" href="#4express内置中间件"></a> 4.Express内置中间件</h4><p>Express再4.16.0之后有三个常用中间件，</p><blockquote><p>express.static()快速托管静态资源的内置中间件，</p><p>express.json()解析JSON格式的请求体数据(有兼容性，再4.16.0及之后)</p><p>express.urlencoded()解析URL-encoded格式的请求日数据(有兼容性)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="property">json</span>)<span class="comment">//配置解析application/json格式化数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))<span class="comment">//配置解析application/x-www-form-urlencoded格式数据的中间件</span></span><br></pre></td></tr></table></figure><p><mark>express.json()使用</mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//再服务器，可以使用req.body属性来接受来自客户端的请求体数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">  <span class="comment">//默认情况下，如果不配置解析表单数据的中间件，则req.body默认等于Undefined</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出Undefined</p><p><strong>注意，除了错误级别中间件，其他中间件必须在路由之前进行配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过express.json这个中间件解析</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//再服务器，可以使用req.body属性来接受来自客户端的请求体数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">  <span class="comment">//默认情况下，如果不配置解析表单数据的中间件，则req.body默认等于Undefined</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>成功输出json字符串</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326174434765.png" alt="image-20240326174434765"></p><p><mark>express.urlencoded()</mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/book&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326174712500.png" alt="image-20240326174712500"></p><p>解析不了，得到空对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过express.urlencoded()中间件来解析表单中的urlencoded</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326174852564.png" alt="image-20240326174852564"></p><p><strong>解析成功！</strong></p><h4 id="5第三方中间件"><a class="markdownIt-Anchor" href="#5第三方中间件"></a> 5.第三方中间件</h4><blockquote><p>非express官方的，由第三方出来的中间件，叫做第三方中间件</p></blockquote><p><strong>步骤</strong></p><p>例如安装 body-parser</p><ol><li>npm i body-parser</li><li>const parser=require(‘body-parser’)</li><li>app.use(parser.urlencoded({ extended: false }))</li></ol><p><strong>express中内置的express.urlencoded就是基于body-parser这个进一步封装的</strong></p><h3 id="34自定义中间件"><a class="markdownIt-Anchor" href="#34自定义中间件"></a> 3.4自定义中间件</h3><h4 id="1步骤"><a class="markdownIt-Anchor" href="#1步骤"></a> 1.步骤</h4><p>实现步骤：</p><ol><li>定义中间件</li><li>监听req的data事件</li><li>监听req的end事件</li><li>使用queryString模块解析请求体数据</li><li>将解析出来的数据对象挂载为req.body</li><li>将子定义中间件封装为模块</li></ol><h4 id="2定义"><a class="markdownIt-Anchor" href="#2定义"></a> 2.定义</h4><p>通过app.use()定义</p><h4 id="3监听req的data事件"><a class="markdownIt-Anchor" href="#3监听req的data事件"></a> 3.监听req的data事件</h4><p>通过监听req的data事件，就可以获取客户端发送到服务器的数据</p><p><strong>如果数据量比较大，客户端会把数据切割分批发送到服务器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义变量存储客户端发送的请求体数据</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//2.监听req的data事件</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">  str+=chunk</span><br></pre></td></tr></table></figure><h4 id="4监听req的end事件"><a class="markdownIt-Anchor" href="#4监听req的end事件"></a> 4.监听req的end事件</h4><p>当end事件触发，代表数据接收完毕</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在str村发的是完整的请求体数据</span></span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span>把字符串请求体数据，转换成对象格式</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="5使用querystring解析请求体数据"><a class="markdownIt-Anchor" href="#5使用querystring解析请求体数据"></a> 5.使用querystring解析请求体数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(body)</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326200337095.png" alt="image-20240326200337095"></p><h4 id="6将解析出来的数据对象挂载为reqbody"><a class="markdownIt-Anchor" href="#6将解析出来的数据对象挂载为reqbody"></a> 6.将解析出来的数据对象挂载为req.body</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="property">body</span> = body</span><br><span class="line"><span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326200614669.png" alt="image-20240326200614669"></p><h4 id="7将子定义中间件封装为模块"><a class="markdownIt-Anchor" href="#7将子定义中间件封装为模块"></a> 7.将子定义中间件封装为模块</h4><p>为了优化代码，需要把子定义中间件封装为独立模块</p><h2 id="4使用express写接口"><a class="markdownIt-Anchor" href="#4使用express写接口"></a> 4.使用Express写接口</h2><h3 id="41创建最基本的express服务器"><a class="markdownIt-Anchor" href="#41创建最基本的express服务器"></a> 4.1创建最基本的Express服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Running...&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="42创建api路由模块"><a class="markdownIt-Anchor" href="#42创建api路由模块"></a> 4.2创建API路由模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="property">Router</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Running&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="built_in">exports</span>(router)</span><br></pre></td></tr></table></figure><h3 id="43编写get接口"><a class="markdownIt-Anchor" href="#43编写get接口"></a> 4.3编写GET接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//通过req.query获取查询字符串，发送到服务器的数据</span></span><br><span class="line">  <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">  <span class="comment">//调用res.send()方法，向客户端相应处理的结果</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,<span class="comment">//0成功</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;GET 请求成功&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:query</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过上述操作成功获得了数据</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326202743866.png" alt="image-20240326202743866"></p><h3 id="44编写post接口"><a class="markdownIt-Anchor" href="#44编写post接口"></a> 4.4编写POST接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取请求体包含的url-encoded格式数据</span></span><br><span class="line">  <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">  <span class="comment">//通过send方法，响应结果</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;POST请求成功&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:body</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>成功获取了表单数据</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326203222926.png" alt="image-20240326203222926"></p><h3 id="45cors跨域资源共享"><a class="markdownIt-Anchor" href="#45cors跨域资源共享"></a> 4.5CORS跨域资源共享</h3><h4 id="1接口的跨域问题"><a class="markdownIt-Anchor" href="#1接口的跨域问题"></a> 1.接口的跨域问题</h4><p><mark>严重的问题</mark></p><p>编写的接口不支持跨域问题。</p><p><strong>解决接口的跨域问题主要有两种方法</strong></p><blockquote><p>1.CORS(主流的解决方案，推荐)</p><p>2.JSONP(有缺陷，只支持GET)</p><p>也可以使用响应头</p></blockquote><h4 id="2使用cors中间件"><a class="markdownIt-Anchor" href="#2使用cors中间件"></a> 2.使用CORS中间件</h4><p>使用步骤</p><ol><li><p>运行 npm install cors</p></li><li><p>使用 const cors=require(‘cors’)</p></li><li><p>app.use(cors())</p></li></ol><h4 id="3什么是cors"><a class="markdownIt-Anchor" href="#3什么是cors"></a> 3.什么是CORS</h4><blockquote><p>cors跨区域资源共享由一系列HTTP响应头组成，这些HTTP响应头决定浏览器是否组织前端js代码是否共享</p></blockquote><h4 id="4cors注意"><a class="markdownIt-Anchor" href="#4cors注意"></a> 4.cors注意</h4><blockquote><ol><li>cors主要在服务器端进行部署，客户端浏览器无需做任何配置</li><li>cors在浏览器中由兼容性，支支持XMLHttpRequest Level2的浏览器，才能正常访问开启了cors的服务器端接口</li></ol></blockquote><h4 id="5cors响应头部-access-control-allow-origin"><a class="markdownIt-Anchor" href="#5cors响应头部-access-control-allow-origin"></a> 5.cors响应头部- Access-Control-Allow-Origin</h4><p>响应头部中携带一个 Access-Control-Allow-Origin 字段其语法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>:&lt;origin&gt;|*</span><br></pre></td></tr></table></figure><p>其中 origin参数的值制定了允许访问人该资源的外域URL。</p><p>例如，下面字段将只允许来自<a href="http://itcast.xn--cn-ut1e588ap40a">http://itcast.cn的请求</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;http//itcast.cn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>*****号代表通配符，表示允许任何域名请求</p><h4 id="6cors响应头-access-control-allow-headers"><a class="markdownIt-Anchor" href="#6cors响应头-access-control-allow-headers"></a> 6.cors响应头 Access-Control-Allow-Headers</h4><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326213549750.png" alt="image-20240326213549750"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//允许客户端向服务器发送 Content-Type请求头和 X-Custom-Header请求头</span></span><br><span class="line"><span class="comment">//多个请求头之间用 “，”分隔</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;Content-Type,X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="7cors响应头部-access-control-allow-methods"><a class="markdownIt-Anchor" href="#7cors响应头部-access-control-allow-methods"></a> 7.cors响应头部 - Access-Control-Allow-Methods</h4><p>默认情况下，cors仅支持客户端发起<mark>GET、POST、HEAD</mark>请求</p><p>如果客户端希望通过 <mark>PUT、DELETE</mark>等方式请求服务器，需要在该响应头指明允许所使用的HTTP方法</p><h4 id="8cors请求的分类"><a class="markdownIt-Anchor" href="#8cors请求的分类"></a> 8.cors请求的分类</h4><p>简单请求、预检请求</p><h4 id="9简单请求"><a class="markdownIt-Anchor" href="#9简单请求"></a> 9.简单请求</h4><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240327224520915.png" alt="image-20240327224520915"></p><h4 id="10预检请求"><a class="markdownIt-Anchor" href="#10预检请求"></a> 10.预检请求</h4><p>符合以下任何一个条件按</p><blockquote><ol><li>请求方式为GET\POST\HEAD之外的Method类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了application\json格式的数据</li></ol></blockquote><p>在浏览器和服务器正式通信之前，浏览器会先发送OPTION请求进行预检，以获知服务器是否允许该实际请求，**服务器成功响应预检请求之后，才会发送真正的请求，并且携带真实数据。</p><h4 id="11简单请求和预检请求的区别"><a class="markdownIt-Anchor" href="#11简单请求和预检请求的区别"></a> 11.简单请求和预检请求的区别</h4><blockquote><p>网络请求的特点：客户端和服务器之间之会发生一次请求</p><p>预检请求的特点：客户端与服务器直接会发生两次请求，OPTION预检请求成功之后，才会发其真正的请求</p></blockquote><h3 id="46jsonp接口"><a class="markdownIt-Anchor" href="#46jsonp接口"></a> 4.6JSONP接口</h3><h4 id="1jsonp的概念和特点"><a class="markdownIt-Anchor" href="#1jsonp的概念和特点"></a> 1.jsonp的概念和特点</h4><p><strong>概念</strong></p><p>浏览器通过<scirpt>标签的src属性，请求服务器上的数据，同时，服务器返回一个函数的调用，这种请求的方式叫做jsonp。</scirpt></p><hr><p><strong>特点</strong></p><ol><li>jsonp不属于真正的ajax请求，因为他没有使用XMLHTTPRequest这个对象</li><li>jsonp仅支持GET请求，不支持其他请求</li></ol><h4 id="2创建jsonp接口的注意事项"><a class="markdownIt-Anchor" href="#2创建jsonp接口的注意事项"></a> 2.创建jsonp接口的注意事项</h4><p>如果已经配置了CORS跨域资源共享，必须在配置CORS之前配置jsonp接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//TODO 创建</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//必须在配置cors之前配置jsonp</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure><h4 id="3实现jsonp接口"><a class="markdownIt-Anchor" href="#3实现jsonp接口"></a> 3.实现jsonp接口</h4><p><strong>步骤：</strong></p><blockquote><ol><li>获取客户端发送过来的回调函数的名字</li><li>得到通过jsonp形式发送给客户端的数据</li><li>根据前两步得到的数据，拼接处一个函数调用的字符串</li><li>把上一步拼接得到的字符串，响应给客户端<script>标签进行解析执行。</li></ol></blockquote><h4 id="4具体步骤"><a class="markdownIt-Anchor" href="#4具体步骤"></a> 4.具体步骤</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//TODO 创建</span></span><br><span class="line">  <span class="comment">//得到函数名称</span></span><br><span class="line">  <span class="keyword">const</span> funcName = req.<span class="property">query</span>.<span class="property">callback</span></span><br><span class="line">  <span class="comment">//2.得到数据对象</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span> &#125;</span><br><span class="line">  <span class="comment">//拼接</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`<span class="subst">$&#123;funcName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line">  <span class="comment">//响应</span></span><br><span class="line">  res.<span class="title function_">send</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5使用jquery发起jsonp请求"><a class="markdownIt-Anchor" href="#5使用jquery发起jsonp请求"></a> 5.使用JQUERY发起jsonp请求</h4><p>略</p></script></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;express&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#express&quot;&gt;&lt;/a&gt; Express&lt;/h1&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;br&gt;
  &lt;/p&gt;&lt;h2 style=&quot;text-align:center</summary>
      
    
    
    
    <category term="node.js" scheme="https://ycx6666.github.io/categories/node-js/"/>
    
    
    <category term="express" scheme="https://ycx6666.github.io/tags/express/"/>
    
    <category term="入门" scheme="https://ycx6666.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
