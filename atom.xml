<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ycx&#39;Blog</title>
  
  <subtitle>今天怎么不下雨</subtitle>
  <link href="https://ycx6666.github.io/atom.xml" rel="self"/>
  
  <link href="https://ycx6666.github.io/"/>
  <updated>2024-04-12T15:21:52.781Z</updated>
  <id>https://ycx6666.github.io/</id>
  
  <author>
    <name>Ycx.Cc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js入门</title>
    <link href="https://ycx6666.github.io/2024/03/Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://ycx6666.github.io/2024/03/Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-12T15:21:52.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js使用教程"><a href="#Node-js使用教程" class="headerlink" title="Node.js使用教程"></a>Node.js使用教程</h1><p align="center">  <br>  </p><h2 style="text-align:center;color:#F4E0EA">    樱春雪    </h2>  <br>  <br>    <div style="text-align:center">    <a href="https://codeload.github.com/liangjingkanji/DrakeTyporaTheme/zip/refs/heads/master">湖南大学</a>  | <a href="https://theme.typora.io/theme/Drake/">软件工程</a>  | <a href="https://github.com/liangjingkanji/DrakeTyporaTheme/blob/master/issues.md">2204</a></div><br><br><img style="clear:both;display:block;margin:auto;width:400px;height:100px" src="/2024/03/Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/7HN)MKDR%[2BI2$@Q69A8$H.png">  <br><p></p><h2 id="1-读取文件内容"><a href="#1-读取文件内容" class="headerlink" title="1.读取文件内容"></a>1.读取文件内容</h2><h3 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h3><p>fs模块时node.js 官方提供的用来操作文件的模块</p><blockquote><p>fs.readFile.()方法，用来读取指定文件中的内容</p><p>fs.writeFile()方法，用来向指定的文件中写入文件</p></blockquote><p>入股要在js代码中，使用fs模块操作文件，需要用到require函数调用模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure><p>###fs.readFile()的语法格式</p><p>如果在参数列表中的参数被中括号包括起来，表示其是一个可选参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(path[,options],callback</span><br></pre></td></tr></table></figure><blockquote><p>参数一：必选参数，字符串，表示文件的路径</p><p>参数二：可选参数，表示以什么编码方式来读取文件</p><p>参数三：必选参数，文件读取完成后，通过回调函数拿到读取的结果</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;路径&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,dataStr</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="判断文件是否读取成功"><a href="#判断文件是否读取成功" class="headerlink" title="判断文件是否读取成功"></a>判断文件是否读取成功</h3><p>可以判断err对象是否为null，从而知晓</p><h2 id="2-向指定的文件中写入内容"><a href="#2-向指定的文件中写入内容" class="headerlink" title="2.向指定的文件中写入内容"></a>2.向指定的文件中写入内容</h2><p>###fs.writeFile()的语法格式</p><p>使用这个方法，可以写入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fd.<span class="title function_">writrFile</span>(file,data[,options],callback)</span><br></pre></td></tr></table></figure><blockquote><p>参数一：必选参数，需要指定一个文件路径的字符串，表示文件的存储路劲</p><p>参数二：必选参数，表示要写入的内容</p><p>参数三：可选参数，表示以什么文件格式写入，默认utf8</p><p>参数四：必选参数，文件写入完成后的回调函数</p></blockquote><p><strong>需要注意的是，如果路径已经存在，那么或覆盖原有的内容</strong></p><p>###判断文件是否写入成功</p><p>如果写入成功，那么err的值等于null</p><p>如果写入失败，err的值是一个错误对象</p><h2 id="3-处理路径问题"><a href="#3-处理路径问题" class="headerlink" title="3.处理路径问题"></a>3.处理路径问题</h2><h3 id="fs模块-路径动态拼接的问题"><a href="#fs模块-路径动态拼接的问题" class="headerlink" title="fs模块-路径动态拼接的问题"></a>fs模块-路径动态拼接的问题</h3><p>在使用fs模块时，如果使用的时.&#x2F;或者..&#x2F;开头的相对路径时，很容易出现动态拼接错误的问题。</p><p>__原因__：在代码运行的时候，&#x3D;&#x3D;会以执行node命令时所处的目录&#x3D;&#x3D;，动态拼接出被操作文件的完整路径。</p><p><strong>解决方法</strong>:直接使用绝对路径。</p><p>__注意__：在js中，一个反斜杠“&quot;表示转移符，需要写两个反斜杠才表示一个反斜杠”\“。</p><p><strong>缺点</strong>：移植性非常差，并且不利于维护</p><p><strong>解决方法</strong>:&#x3D;&#x3D;__dirname&#x3D;&#x3D;表示当前文件所处的目录，&#x3D;&#x3D;不会被node命令所处目录变化而变化&#x3D;&#x3D;。</p><p>例如</p><h3 id="03-1使用path路径模块"><a href="#03-1使用path路径模块" class="headerlink" title="03.1使用path路径模块"></a>03.1使用path路径模块</h3><p>path是用来专门处理路径的模块，他提供了一系列的方法和属性，用来满足用户对路径的处理需求。</p><p> exp</p><blockquote><p>path.join()方法：用来将多个路径片段拼接成一个完整的路径字符串。</p><p>path.basename()方法：用来从路径字符串中，将文件名字解析出来。</p></blockquote><p>需要以下导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="03-2路径拼接"><a href="#03-2路径拼接" class="headerlink" title="03.2路径拼接"></a>03.2路径拼接</h3><p>path.join()的代码示例：</p><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;在&#x3D;&#x3D;..&#x2F;&#x3D;&#x3D;之前的一个字符串将被抵消。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//../抵消</span></span><br><span class="line"><span class="keyword">const</span> pathStr=path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;/d&#x27;</span>, <span class="string">&#x27;/e&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr)<span class="comment">//输出\a\b\d\e</span></span><br></pre></td></tr></table></figure><p><strong>以后进行拼接时尽量使用path.join(),可以避免错误输入路径带来的某些错误（.)</strong></p><h3 id="03-3获取路径中的文件名"><a href="#03-3获取路径中的文件名" class="headerlink" title="03-3获取路径中的文件名"></a>03-3获取路径中的文件名</h3><p>**1.path.basename():**可以获取路径中的最后一部分，可以使用这个方法获取路径中的文件名，格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[,ext])</span><br></pre></td></tr></table></figure><p><strong>代码示例</strong>，使用这个方法，可以从一个文件路径中，获取到文件的名称部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullname = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"><span class="keyword">const</span> fullname2 = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.html&#x27;</span>)<span class="comment">//消除扩展名</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullname)<span class="comment">//拿到文件名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullname2)</span><br></pre></td></tr></table></figure><h3 id="03-4如何获取路径中的文件扩展名"><a href="#03-4如何获取路径中的文件扩展名" class="headerlink" title="03-4如何获取路径中的文件扩展名"></a>03-4如何获取路径中的文件扩展名</h3><p><strong>语法格式</strong>：path.extname()的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fext)<span class="comment">//.html</span></span><br></pre></td></tr></table></figure><h3 id="03-5时钟案例"><a href="#03-5时钟案例" class="headerlink" title="03-5时钟案例"></a>03-5时钟案例</h3><p>步骤：</p><p>​1.创建两个正则表达式，用来匹配<style>和<scipt>标签</p><p>​2.使用fs模块，读取需要被处理的HTML文件</p><p>​3.自定义resolveCSS方法，写入index.css文件</p><p>​4.自定义resolveJs方法，写入index.js文件</p><p>​5.自定义resolveHtml方法，写入index.html文件</p><p>resolveCSS()方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveCSS</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> r1 = regStyle.<span class="title function_">exec</span>(htmlStr)</span><br><span class="line">  <span class="keyword">const</span> newCSS = r1[<span class="number">0</span>].<span class="title function_">replace</span>(<span class="string">&#x27;&lt;style&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&lt;/style&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="comment">//写入index.css文件</span></span><br><span class="line">  fs.<span class="title function_">writeFile</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;../素材1/index.css&#x27;</span>), newCSS, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入CSS样式失败！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入样式文件成功!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resolveJs()方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveJs</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> r2 = regJs.<span class="title function_">exec</span>(htmlStr)</span><br><span class="line">  <span class="keyword">const</span> newJs = r2[<span class="number">0</span>].<span class="title function_">replace</span>(<span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&lt;/script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="comment">//写入index.css文件</span></span><br><span class="line">  fs.<span class="title function_">writeFile</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;../素材1/index.js&#x27;</span>), newJs, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入JS文件失败！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入JS文件成功!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rsolveHTML()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveHTML</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">  <span class="comment">//调用replace方法</span></span><br><span class="line">  <span class="keyword">const</span> newHTML=htmlStr.<span class="title function_">replace</span>(</span><br><span class="line">    regStyle,<span class="string">`&lt;link rel=&quot;stylesheet&quot; href=&quot;./index.css&quot;&gt;`</span></span><br><span class="line">  ).<span class="title function_">replace</span>(</span><br><span class="line">    regJs,<span class="string">&#x27;&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;&#x27;</span></span><br><span class="line">  )</span><br><span class="line">  <span class="comment">//写入</span></span><br><span class="line">  fs.<span class="title function_">writeFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./素材1/index.html&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入HTML文件失败！&#x27;</span>+err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入HTML文件成功！&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意点&#x3D;&#x3D;</p><blockquote><p>1.一定要新建一个文件夹</p><p>2.使用fs.write()方法写入内容时，重复写入会导致新内容覆盖旧内容</p></blockquote><h2 id="4-HTTP模块"><a href="#4-HTTP模块" class="headerlink" title="4.HTTP模块"></a>4.HTTP模块</h2><p>###4.1什么是HTTP模块</p><p>&#x3D;&#x3D;概念&#x3D;&#x3D;</p><p>在网络节点，负责消费资源的电脑，叫做客户端；负责对外提供网络资源的电脑，叫做服务器。</p><p>&#x3D;&#x3D;方法&#x3D;&#x3D;</p><p>http模块中的http.createServer()方法，能把一台普通的电脑，变成一台Web服务器</p><p>&#x3D;&#x3D;引入&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-2进一步理解http模块的作用"><a href="#4-2进一步理解http模块的作用" class="headerlink" title="4.2进一步理解http模块的作用"></a>4.2进一步理解http模块的作用</h3><p>&#x3D;&#x3D;服务器和普通电脑的区别&#x3D;&#x3D;</p><p>服务器和普通电脑的区别，服务器上安装了Web服务器软件，例如：IIS，Apache等，通过这些服务器软件，能把一台普通的电脑变成一台Web服务器。</p><p><strong>在nodejs中，我们不需要这些软件，我们可以通过HTTP模块创建一个服务器</strong></p><h3 id="4-3服务器相关概念"><a href="#4-3服务器相关概念" class="headerlink" title="4.3服务器相关概念"></a>4.3服务器相关概念</h3><p>&#x3D;&#x3D;IP地址&#x3D;&#x3D;</p><ul><li><p>互联网上每台计算机的唯一标识。</p></li><li><p>格式：“点分十进制”，a.b.c.d，其中abcd都是0-255之间的十进制整数。</p></li><li><p><strong>在cmd中输入ping 网站 可以获取网站IP地址</strong></p></li><li><p>在自己电脑中输入127.0.0.1就可以访问本机了。</p></li></ul><p>&#x3D;&#x3D;域名和域名服务器&#x3D;&#x3D;</p><ul><li><p>IP地址不够直观，因此发明了域名来方便人们记忆</p></li><li><p>IP地址和域名是一一对应的关系，这种关系存放在一种叫做**域名服务器(DNS)**的电脑中。</p></li></ul><p><strong>注意</strong></p><p>127.0.0.1对应的域名是localhost</p><p>&#x3D;&#x3D;端口号&#x3D;&#x3D;</p><p> 一台电脑中，可以运行很多个Web服务，每个Web都对应一个唯一的端口号，通过端口号，可以将网络请求准确的发给对应的Web服务。</p><p><strong>注意</strong></p><ul><li><p>每个端口号不能被同时多个Web服务占用</p></li><li><p>在是基于应用中，只有80端口可以在URL中省略。</p></li></ul><h3 id="4-4创建最基本的Web服务器"><a href="#4-4创建最基本的Web服务器" class="headerlink" title="4.4创建最基本的Web服务器"></a>4.4创建最基本的Web服务器</h3><h4 id="1-创建最基本的Web服务器的步骤"><a href="#1-创建最基本的Web服务器的步骤" class="headerlink" title="1.创建最基本的Web服务器的步骤"></a>1.创建最基本的Web服务器的步骤</h4><ol><li>导入http模块</li><li>创建Web服务器示例</li><li>为服务器绑定request时间，监听客户端请求</li><li>启动服务器</li></ol><h4 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2.示例代码"></a>2.示例代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建示例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.绑定request</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;reques&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;某人访问了服务器....&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.启动</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running...&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-5-REQ"><a href="#4-5-REQ" class="headerlink" title="4.5.REQ"></a>4.5.REQ</h3><p>3.req请求对象，只要服务器收到了客户端的请求，就会调用通过server.on()位服务器绑定的事件处理函数</p><p>包含了与客户端相关的数据和属性</p><blockquote><p>req.url是客户端请求的URL地址</p><p>req.method是客户端请求的method类型</p></blockquote><h3 id="4-6时钟Web服务器案例"><a href="#4-6时钟Web服务器案例" class="headerlink" title="4.6时钟Web服务器案例"></a>4.6时钟Web服务器案例</h3><h4 id="1-核心思路"><a href="#1-核心思路" class="headerlink" title="1.核心思路"></a>1.核心思路</h4><blockquote><p>将每个文件的实际存放路径，作为每个资源的请求URL地址</p></blockquote><h4 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h4><ol><li>导入需要的模块</li><li>创建基本Web服务器</li><li>将资源url地址作为文件存放路径</li><li>读取文件内容并响应客户端</li><li>优化资源请求路径</li></ol><h4 id="3-导入需要的模块"><a href="#3-导入需要的模块" class="headerlink" title="3.导入需要的模块"></a>3.导入需要的模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="4-将资源url作为文件存放路径"><a href="#4-将资源url作为文件存放路径" class="headerlink" title="4.将资源url作为文件存放路径"></a>4.将资源url作为文件存放路径</h4><p>获取到的请求路径:&#x3D;&#x3D;&#x2F;index.html&#x3D;&#x3D;</p><h4 id="5-读取文件内容并发送给客户端"><a href="#5-读取文件内容并发送给客户端" class="headerlink" title="5.读取文件内容并发送给客户端"></a>5.读取文件内容并发送给客户端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(fpath, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//4.2读取失败</span></span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;404 Not Found&#x27;</span>)</span><br><span class="line">  <span class="comment">//4.3读取成功</span></span><br><span class="line">  res.<span class="title function_">end</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>如果获取的文件内容中引用了其他文件，那么浏览器会自动请求</p></blockquote><h4 id="6-优化请求资源的路径"><a href="#6-优化请求资源的路径" class="headerlink" title="6.优化请求资源的路径"></a>6.优化请求资源的路径</h4><p>如果请求根路径，那么就用&#x2F;clock&#x2F;index.html来代替</p><h2 id="5-模块化"><a href="#5-模块化" class="headerlink" title="5.模块化"></a>5.模块化</h2><h3 id="5-1是么是模块化"><a href="#5-1是么是模块化" class="headerlink" title="5.1是么是模块化"></a>5.1是么是模块化</h3><h4 id="1-编程领域中的模块化"><a href="#1-编程领域中的模块化" class="headerlink" title="1.编程领域中的模块化"></a>1.编程领域中的模块化</h4><p>此处的模块化，就是固定遵守的规则，把一个大文件拆分成独立并且互相依赖的多个小模块。</p><p><strong>好处</strong></p><blockquote><p>提高了代码复用性</p><p>提高了代码可维护性</p><p>可以实现按需加载</p></blockquote><h3 id="5-2模块化规范"><a href="#5-2模块化规范" class="headerlink" title="5.2模块化规范"></a>5.2模块化规范</h3><p>模块规范化就是在对代码进行模块化的拆分与组合时，需要遵守的那些规则</p><p>好处：降低了沟通的成本，极大方便了各个模块的相互调用</p><h2 id="6-Nodejs中的模块化"><a href="#6-Nodejs中的模块化" class="headerlink" title="6.Nodejs中的模块化"></a>6.Nodejs中的模块化</h2><h3 id="6-1模块的分类"><a href="#6-1模块的分类" class="headerlink" title="6.1模块的分类"></a>6.1模块的分类</h3><blockquote><p><strong>内置模块</strong>：内置模块是由Nodejs官方提供的，例如fs，path,http等等</p><p><strong>自定义模块</strong>：用户创建的每个.js文件，都是自定义模块</p><p><strong>第三方模块</strong>:由第三方开发出的模块，不是官方也不是用户提供的</p></blockquote><h3 id="6-2加载模块"><a href="#6-2加载模块" class="headerlink" title="6.2加载模块"></a>6.2加载模块</h3><p>使用强大的&#x3D;&#x3D;require&#x3D;&#x3D;方法，可以加载需要的各种模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载内置模块</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//加载用户自定义模块，如果去掉.js后缀名也能运行</span></span><br><span class="line"><span class="keyword">const</span> custom=<span class="built_in">require</span>(<span class="string">&#x27;./custom.js&#x27;</span>)</span><br><span class="line"><span class="comment">//加载第三方模块</span></span><br><span class="line"><span class="keyword">const</span> moment=<span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;使用其他模块时，调用时就会加载模块的代码&#x3D;&#x3D;</p><h3 id="6-3模块作用域"><a href="#6-3模块作用域" class="headerlink" title="6.3模块作用域"></a>6.3模块作用域</h3><h4 id="1-什么是作用域"><a href="#1-什么是作用域" class="headerlink" title="1.什么是作用域"></a>1.什么是作用域</h4><p>和函数作用域类似，自定义模块中的方法、变量等等，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域</p><h4 id="2-好处"><a href="#2-好处" class="headerlink" title="2.好处"></a>2.好处</h4><p>防止全局变量污染的问题</p><p><img src="C:\Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240321205245056.png" alt="image-20240321205245056"></p><p><img src="C:\Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240321205419593.png" alt="image-20240321205419593"></p><h3 id="6-4向外共享模块作用域中的成员"><a href="#6-4向外共享模块作用域中的成员" class="headerlink" title="6.4向外共享模块作用域中的成员"></a>6.4向外共享模块作用域中的成员</h3><h4 id="1-module对象"><a href="#1-module对象" class="headerlink" title="1.module对象"></a>1.module对象</h4><p>每个.js自定义文件中都有一个module对象，他存储了当前模块的数据等等</p><p><img src="C:\Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240321205637062.png" alt="image-20240321205637062"></p><h4 id="2-module-exports对象"><a href="#2-module-exports对象" class="headerlink" title="2.module.exports对象"></a>2.module.exports对象</h4><p>在自定义模块中，可以使用这个对象可以将模块内的成员共享出去；</p><p>外界使用require()方法导入自定义模块时，得到的就是module.exports所指向的对象</p><p>&#x3D;&#x3D;在一个自定义模块中，默认的module.exports对象就是空对象，也就是module对象&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sayHello</span>=<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;usename&#125;</span>`</span>)</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">usename</span> = <span class="string">&#x27;zs&#x27;</span><span class="comment">//像module.exports中挂载一个属性</span></span><br></pre></td></tr></table></figure><p><img src="/Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.assets/image-20240321222048156.png" alt="image-20240321222048156"></p><h4 id="3-共享成员的注意点"><a href="#3-共享成员的注意点" class="headerlink" title="3.共享成员的注意点"></a>3.共享成员的注意点</h4><p>使用require()方法导入模块时，导入的结果，永远以module.exports指向的对象为准</p><h4 id="4-exports对象"><a href="#4-exports对象" class="headerlink" title="4.exports对象"></a>4.exports对象</h4><p>module.exports和exports指向的是同一个对象</p><p>最终指向的值，&#x3D;&#x3D;以module.exports&#x3D;&#x3D;指向的对象为准</p><h4 id="5-module-exports和exports使用误区"><a href="#5-module-exports和exports使用误区" class="headerlink" title="5.module.exports和exports使用误区"></a>5.module.exports和exports使用误区</h4><blockquote><ol><li>使用require时，得到的永远都是module.exports对象</li></ol></blockquote><p>为了防止混乱，建议大家不要在同一个模块中同时使用两者</p><h3 id="6-5Nodejs中的模块化规范"><a href="#6-5Nodejs中的模块化规范" class="headerlink" title="6.5Nodejs中的模块化规范"></a>6.5Nodejs中的模块化规范</h3><p>nodejs遵循了<strong>CommonJS模块化规范</strong>，其规定了模块的特性和各模块之间如何互相依赖</p><p><strong>CommonJS规定：</strong></p><blockquote><p>1.每个模块内部，module变量代表当前某块</p><p>2.module变量是一个对象，他的exports属性(即module.exports)是对外的接口</p><p>3.加载某个模块，其实是加载该模块的module.exports属性，require()方法用于加载模块</p></blockquote><h2 id="7-npm与包"><a href="#7-npm与包" class="headerlink" title="7.npm与包"></a>7.npm与包</h2><h3 id="7-1初步入门"><a href="#7-1初步入门" class="headerlink" title="7.1初步入门"></a>7.1初步入门</h3><h4 id="什么是包"><a href="#什么是包" class="headerlink" title="什么是包"></a>什么是包</h4><p>Nodejs中的第三方模块又叫做包</p><h4 id="包的来源"><a href="#包的来源" class="headerlink" title="包的来源"></a>包的来源</h4><p>Nodejs的内置模块和自定义模块，都是由第三方团队制作的</p><h4 id="为什么需要"><a href="#为什么需要" class="headerlink" title="为什么需要"></a>为什么需要</h4><p>&#x3D;&#x3D;原因&#x3D;&#x3D;Nodejs的内置某块仅提供了一些底层的api，导致开发时效率低</p><p>包是基于内置模块封装出来的</p><h4 id="怎么下载"><a href="#怎么下载" class="headerlink" title="怎么下载"></a>怎么下载</h4><p>npm公司 &lt;<a href="http://www.npmjs.com>是全球最大的包共享平台">www.npmjs.com&gt;是全球最大的包共享平台</a></p><p>npm公司还提供了一个地址为 <a href="https://registy.npmjs.org/%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%9D%A5%E5%AF%B9%E5%A4%96%E5%85%B1%E4%BA%AB%E6%89%80%E6%9C%89%E7%9A%84%E5%8C%85%EF%BC%8C%E4%BD%86%E6%98%AF%E5%85%B6%E6%89%93%E4%B8%8D%E5%BC%80%E3%80%82">https://registy.npmjs.org/的服务器，来对外共享所有的包，但是其打不开。</a></p><h4 id="如何下载"><a href="#如何下载" class="headerlink" title="如何下载"></a>如何下载</h4><p>这个包管理工具叫做&#x3D;&#x3D;Node Package Manager&#x3D;&#x3D;(简称npm包管理工具)</p><h3 id="7-2npm初体验"><a href="#7-2npm初体验" class="headerlink" title="7.2npm初体验"></a>7.2npm初体验</h3><h4 id="1-格式化实践的传统做法"><a href="#1-格式化实践的传统做法" class="headerlink" title="1.格式化实践的传统做法"></a>1.格式化实践的传统做法</h4><p>dateFormat()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">dtStr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dtStr)</span><br><span class="line">  <span class="keyword">const</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">  <span class="keyword">const</span> m = <span class="title function_">padZero</span>(dt.<span class="title function_">getMonth</span>()+<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> d = <span class="title function_">padZero</span>(dt.<span class="title function_">getDate</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hh = <span class="title function_">padZero</span>(dt.<span class="title function_">getHours</span>())</span><br><span class="line">  <span class="keyword">const</span> mm = <span class="title function_">padZero</span>(dt.<span class="title function_">getMinutes</span>())</span><br><span class="line">  <span class="keyword">const</span> ss = <span class="title function_">padZero</span>(dt.<span class="title function_">getSeconds</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padZero</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (n &gt; <span class="number">9</span> ? n : <span class="string">&#x27;0&#x27;</span>+n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  dateFormat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-格式化时间高级做法"><a href="#2-格式化时间高级做法" class="headerlink" title="2.格式化时间高级做法"></a>2.格式化时间高级做法</h4><blockquote><p>1.使用npm包管理工具，安装时间包moment</p><p>2.使用require</p><p>3.参考官方文档调用API</p></blockquote><h4 id="3-在项目中安装包"><a href="#3-在项目中安装包" class="headerlink" title="3.在项目中安装包"></a>3.在项目中安装包</h4><p>初次安装包后，会在项目文件夹下多一个叫做node_modules的文件夹和package-lock.json的文件</p><p>第一个用于存放所有一安装到项目中的包</p><p>第二个记录了第一个目录下每一个包的下载信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install 包的完整名称</span><br><span class="line">可以简写为</span><br><span class="line"> npm i 完整的名称</span><br></pre></td></tr></table></figure><h4 id="4-使用moment"><a href="#4-使用moment" class="headerlink" title="4.使用moment"></a>4.使用moment</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dt = <span class="title function_">moment</span>().<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH-mm-ss&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dt)</span><br></pre></td></tr></table></figure><h4 id="5-安装指定版本的包"><a href="#5-安装指定版本的包" class="headerlink" title="5.安装指定版本的包"></a>5.安装指定版本的包</h4><p>在包的名称之后，&#x3D;&#x3D;通过@符号跟上具体的版本号&#x3D;&#x3D;，从而安装指定版本的包</p><p>后安装的相同的包会覆盖原有的包</p><h4 id="6-包的语义化版本规范"><a href="#6-包的语义化版本规范" class="headerlink" title="6.包的语义化版本规范"></a>6.包的语义化版本规范</h4><p>包的版本号是按照点分十进制形式进行定义的，总共由三位数字</p><blockquote><p>1.第一位数字：大版本</p><p>2.第二位数字：功能版本</p><p>3.第三位数字：Bug修复版本</p></blockquote><h3 id="7-3包管理配置文件"><a href="#7-3包管理配置文件" class="headerlink" title="7.3包管理配置文件"></a>7.3包管理配置文件</h3><p>npm<strong>规定</strong>，在项目根目录中，必须提供一个叫做package.json的包配置管理文件，用来记录与项目有关的一些配置信息</p><ul><li><strong>项目的名称、版本号、描述等等</strong></li><li><strong>项目中用到了那些包</strong></li><li><strong>那些包只会在开发期间用到</strong></li><li><strong>那些包在开发和部署起家都会用到</strong></li></ul><h4 id="1-多人协作的问题"><a href="#1-多人协作的问题" class="headerlink" title="1.多人协作的问题"></a>1.多人协作的问题</h4><ol><li>第三方包体积过大，不方柏霓团队成员之间共享项目源代码</li></ol><h4 id="2-如何记录项目中安装了哪些包"><a href="#2-如何记录项目中安装了哪些包" class="headerlink" title="2.如何记录项目中安装了哪些包"></a>2.如何记录项目中安装了哪些包</h4><p>在项目根目录中，创建一个叫做&#x3D;&#x3D;package.json&#x3D;&#x3D;的配置文件，用于记录项目中安装了哪些包，</p><p>以后在项目开发中，一定要把<strong>node_modules文件夹</strong>，添加到.gitignore忽略文件中</p><h4 id="3-快速创建package-json"><a href="#3-快速创建package-json" class="headerlink" title="3.快速创建package.json"></a>3.快速创建package.json</h4><p>可以在执行目录中，快速创建package.json包管理配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>上述命令只能在英文目录下运行</p><p>运行npm install时，npm包管理工具会自动把包的名称和版本号，记录到package.json文件中</p></blockquote><p>**PS:**现在已经可以自动创建package.json文件了！</p><h4 id="4-depenencies节点"><a href="#4-depenencies节点" class="headerlink" title="4.depenencies节点"></a>4.depenencies节点</h4><p>这个节点，用于记录npm install 安装了哪些包，会记录包的名称和版本号</p><p><img src="/Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.assets/image-20240324214311357.png" alt="image-20240324214311357"></p><h4 id="5-一次性安装所有包"><a href="#5-一次性安装所有包" class="headerlink" title="5.一次性安装所有包"></a>5.一次性安装所有包</h4><p>拿到一个node_module被删除了的项目之后，需要先把所有的包下载下来，不然运行不起来</p><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="comment">//npm i</span></span><br></pre></td></tr></table></figure><p>可以一次性安装所有的包</p><h4 id="6-卸载包"><a href="#6-卸载包" class="headerlink" title="6.卸载包"></a>6.卸载包</h4><p>可以运行&#x3D;&#x3D;npm uninstall + 指定包&#x3D;&#x3D;命令</p><p>注意，删除包之后，在node_mudules中业户删除包信息</p><h4 id="7-devDependencies节点"><a href="#7-devDependencies节点" class="headerlink" title="7.devDependencies节点"></a>7.devDependencies节点</h4><p>如果某些包旨在项目开发阶段使用，可以把这些包记录到<strong>devDependencies</strong>节点中；</p><p>如果某些包在开发与上线中都要用到，那建议记录到<strong>Dependencies</strong></p><p>可以使用如下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装指定包到devDependencies</span></span><br><span class="line">npm i 包名 -D</span><br><span class="line"><span class="comment">//上述命令是简写形式</span></span><br><span class="line">npm install 包名 --save-dev</span><br></pre></td></tr></table></figure><h3 id="7-4解决下包速度慢的问题"><a href="#7-4解决下包速度慢的问题" class="headerlink" title="7.4解决下包速度慢的问题"></a>7.4解决下包速度慢的问题</h3><h4 id="1-为什么慢"><a href="#1-为什么慢" class="headerlink" title="1.为什么慢"></a>1.为什么慢</h4><p>使用npm下包时，默认从国外网站进行下载</p><p>官方源 <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p><h4 id="2-淘宝镜像"><a href="#2-淘宝镜像" class="headerlink" title="2.淘宝镜像"></a>2.淘宝镜像</h4><p>&#x3D;&#x3D;已安装&#x3D;&#x3D;</p><h4 id="3-切换npm下包镜像源"><a href="#3-切换npm下包镜像源" class="headerlink" title="3.切换npm下包镜像源"></a>3.切换npm下包镜像源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry //查看下包源</span><br><span class="line">npm config set registry=https://registry.npm.taobao.rog/ //切换为淘宝镜像源</span><br></pre></td></tr></table></figure><h4 id="4-nrm"><a href="#4-nrm" class="headerlink" title="4.nrm"></a>4.nrm</h4><p>为了更方便切换，可以使用nrm这个工具，快速查看和切换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#安装全局</span><br><span class="line">npm i nrm -g</span><br><span class="line">#查看可用镜像源</span><br><span class="line">nrm ls</span><br><span class="line">#将下包镜像源切换为taobao</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><h3 id="7-5包的分类"><a href="#7-5包的分类" class="headerlink" title="7.5包的分类"></a>7.5包的分类</h3><h4 id="1-项目包"><a href="#1-项目包" class="headerlink" title="1.项目包"></a>1.项目包</h4><p>那些被安装到项目中的node_modules的包，都是项目包</p><blockquote><p>开发依赖包 在devD</p><p>核心依赖包 在D</p></blockquote><h4 id="2-全局包"><a href="#2-全局包" class="headerlink" title="2.全局包"></a>2.全局包</h4><p>在执行&#x3D;&#x3D;npm install&#x3D;&#x3D;时候，如果提供了-g参数，则会把她安装为全局包</p><p>&#x3D;&#x3D;注意-&#x3D;&#x3D;</p><p>只有工具性的包，才有全局安装的必要***</p><p>判断某个包是否全局才能使用，查看官方文档即可***</p><h4 id="3-i5ting-toc"><a href="#3-i5ting-toc" class="headerlink" title="3.i5ting_toc"></a>3.i5ting_toc</h4><blockquote><p>i5ting_doc是一个可以把md文档转为htnl页面的小工具，使用步骤如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#将其安装为全局包</span><br><span class="line">npm install -g i5ting_toc</span><br><span class="line">#调用i5ting_toc，轻松和实现md 转 html页面功能</span><br><span class="line">i5ting_toc -f 要转换的md文件路径 -o</span><br></pre></td></tr></table></figure><h4 id="4-规范的包结构"><a href="#4-规范的包结构" class="headerlink" title="4.规范的包结构"></a>4.规范的包结构</h4><ol><li>每一个包都需要单独的目录</li><li>包的顶级目录下必须要package.json这个配置文件</li><li>package.json必须包含name,version,main三个属性，对应了包的名字、版本号和包的入口</li></ol><h3 id="7-6开发属于自己的包"><a href="#7-6开发属于自己的包" class="headerlink" title="7.6开发属于自己的包"></a>7.6开发属于自己的包</h3><h4 id="1-skip"><a href="#1-skip" class="headerlink" title="1.skip"></a>1.skip</h4><h4 id="2-初始化包的基本结构"><a href="#2-初始化包的基本结构" class="headerlink" title="2.初始化包的基本结构"></a>2.初始化包的基本结构</h4><ol><li>新建itheima-tools文件夹，作为包的根目录</li><li>在itheima-tools文件夹中华，新建如下三个文件<ul><li>package.json</li><li>index.js</li><li>README.md</li></ul></li></ol><h4 id="3-初始化package-json"><a href="#3-初始化package-json" class="headerlink" title="3.初始化package.json"></a>3.初始化package.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ycx_tools&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提供了格式化时间、HTMLESCAPE的功能&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ycx_tools&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;format&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;ycx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;escape&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span><span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-在index-js中定义方法"><a href="#4-在index-js中定义方法" class="headerlink" title="4.在index.js中定义方法"></a>4.在index.js中定义方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">dtStr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dtStr)</span><br><span class="line">  <span class="keyword">const</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">  <span class="keyword">const</span> m = <span class="title function_">padZero</span>(dt.<span class="title function_">getMonth</span>()+<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> d = <span class="title function_">padZero</span>(dt.<span class="title function_">getDate</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hh = <span class="title function_">padZero</span>(dt.<span class="title function_">getHours</span>())</span><br><span class="line">  <span class="keyword">const</span> mm = <span class="title function_">padZero</span>(dt.<span class="title function_">getMinutes</span>())</span><br><span class="line">  <span class="keyword">const</span> ss = <span class="title function_">padZero</span>(dt.<span class="title function_">getSeconds</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padZero</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (n &gt; <span class="number">9</span> ? n : <span class="string">&#x27;0&#x27;</span>+n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  dateFormat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>即使require没有指定文件，根据package.json中的main属性来查找</strong></p><h4 id="5-在index-js中定义转移HTML的方法"><a href="#5-在index-js中定义转移HTML的方法" class="headerlink" title="5.在index.js中定义转移HTML的方法"></a>5.在index.js中定义转移HTML的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义转移html</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlescape</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> htmlStr.<span class="title function_">replaca</span>(<span class="regexp">/&lt;|&gt;|&quot;|&amp;/g</span>, <span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&lt;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;lt;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&gt;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;gt;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&quot;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;quot;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&amp;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;amp;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-index-js定义还原HTML的方法"><a href="#6-index-js定义还原HTML的方法" class="headerlink" title="6.index.js定义还原HTML的方法"></a>6.index.js定义还原HTML的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义还原HTML</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlUnEscape</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g</span>, <span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&amp;lt;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&amp;gt;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&amp;quot;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">`&amp;amp;`</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-将不同的功能纪念性模块化拆分"><a href="#7-将不同的功能纪念性模块化拆分" class="headerlink" title="7.将不同的功能纪念性模块化拆分"></a>7.将不同的功能纪念性模块化拆分</h4><blockquote><ol><li>将格式化时间的功能，拆分到src-&gt;dateFormat.js中</li><li>将处理HTML字符换的功能，拆分到src-&gt;htmlescape.js中</li><li>在index.js中，导入两个模块，得到需要向外共享的方法</li></ol><p>4.在index.js中，使用module.exports把对应的方法共享出去</p></blockquote><p><strong>es6–扩展运算符</strong> 将数组或者对象的内容转换为一段以逗号隔开的序列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...date,<span class="comment">//展开运算符</span></span><br><span class="line">  ...<span class="built_in">escape</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-编写包的说明文档"><a href="#8-编写包的说明文档" class="headerlink" title="8.编写包的说明文档"></a>8.编写包的说明文档</h4><p>README.md文档用于说明包</p><p><strong>可以包含以下说明</strong></p><blockquote><p>安装方式、导入方式、格式化时间</p><p>转移HTML中的特殊字符、还原HTML中的特殊字符、开源协议</p></blockquote><h3 id="7-7发布包"><a href="#7-7发布包" class="headerlink" title="7.7发布包"></a>7.7发布包</h3><h4 id="1-注册账号"><a href="#1-注册账号" class="headerlink" title="1.注册账号"></a>1.注册账号</h4><p>&#x3D;&#x3D;已注册&#x3D;&#x3D;</p><h4 id="2-登录"><a href="#2-登录" class="headerlink" title="2.登录"></a>2.登录</h4><p>在命令行中输入 <code>npm login</code> 进行登录</p><p><strong>注意，使用之前需要先将服务器切换到官方服务器</strong></p><p><code>npm config set registry=https://registry.npmjs.org/</code></p><h4 id="3-把包发布到npm上"><a href="#3-把包发布到npm上" class="headerlink" title="3.把包发布到npm上"></a>3.把包发布到npm上</h4><blockquote><p>将终端切换到包的根目录，运行 npm publish命令，即可发布</p></blockquote><p><img src="/Node.js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.assets/image-20240325110008091.png" alt="image-20240325110008091"></p><p>发布成功!!!</p><h4 id="4-删除已发布的包"><a href="#4-删除已发布的包" class="headerlink" title="4.删除已发布的包"></a>4.删除已发布的包</h4><p><strong>注意</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish 包名 --force，即可删除</span><br></pre></td></tr></table></figure><blockquote><p>npm unpublish命令只能删除72小时以内的包</p><p>npm unpublish删除的包，在24小时内不能重新发布</p><p>尽量不要发布没有意义的包</p></blockquote><h2 id="8-模块的缓存机制"><a href="#8-模块的缓存机制" class="headerlink" title="8.模块的缓存机制"></a>8.模块的缓存机制</h2><h3 id="8-1优先从缓存中加载"><a href="#8-1优先从缓存中加载" class="headerlink" title="8.1优先从缓存中加载"></a>8.1优先从缓存中加载</h3><p>模块第一次加载会被缓存，这也意味着多次调用require()不会导致模块代码被执行多次</p><p><strong>注意</strong>  各种模块都会从缓存中加载，从而提高模块的加载效率</p><h3 id="8-2内置模块加载机制"><a href="#8-2内置模块加载机制" class="headerlink" title="8.2内置模块加载机制"></a>8.2内置模块加载机制</h3><blockquote><p>内置模块是Node.js提供的模块，优先级最高。</p></blockquote><h3 id="8-3自定义模块加载机制"><a href="#8-3自定义模块加载机制" class="headerlink" title="8.3自定义模块加载机制"></a>8.3自定义模块加载机制</h3><p>使用require()加载自定义模块是，必须指定以.&#x2F; 或者 ..&#x2F;开头的路径标识符，否则node会把他当作第三方模块或者内置模块加载</p><p>如果省略了文件扩展名，那么node或按照一下顺序分别尝试加载文件</p><ol><li>按照确切的文件名进行加载</li><li>补全.js进行加载</li><li>补全.json进行</li><li>补全.node</li><li>加载失败</li></ol><h3 id="8-4第三方模块加载机制"><a href="#8-4第三方模块加载机制" class="headerlink" title="8.4第三方模块加载机制"></a>8.4第三方模块加载机制</h3><p>如果传递给require的不符合上述两种规则，则node.js会从当前模块父目录开始，尝试从&#x2F;node_modules加载第三方模块</p><p>如果没有找到，则移动到再上一层父目录中，直到磁盘根目录中。</p><h3 id="8-5目录作为模块"><a href="#8-5目录作为模块" class="headerlink" title="8.5目录作为模块"></a>8.5目录作为模块</h3><p>把目录作为标识符，传递给require()时，有三种加载方式</p><blockquote><ol><li>被加载目录下查找一个叫做package.json的文件，并寻找main属性，作为require()入口</li><li>如果没有.json文件按，或者main不存在或者无法解析，则Node.js或试图加载目录下的index.js文件</li><li>如果都失败了，会打印模块缺失 Error:Cannot find module ‘xxx’</li></ol></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1></style></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Node-js使用教程&quot;&gt;&lt;a href=&quot;#Node-js使用教程&quot; class=&quot;headerlink&quot; title=&quot;Node.js使用教程&quot;&gt;&lt;/a&gt;Node.js使用教程&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;
  &lt;br&gt;
  &lt;/p&gt;&lt;h2 s</summary>
      
    
    
    
    <category term="node.js" scheme="https://ycx6666.github.io/categories/node-js/"/>
    
    
    <category term="入门" scheme="https://ycx6666.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
    <category term="nodejs" scheme="https://ycx6666.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>协变返回类型</title>
    <link href="https://ycx6666.github.io/2024/03/%E5%8D%8F%E5%8F%98%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/"/>
    <id>https://ycx6666.github.io/2024/03/%E5%8D%8F%E5%8F%98%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-12T15:21:44.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="协变返回类型"><a href="#协变返回类型" class="headerlink" title="协变返回类型"></a>协变返回类型</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>&#x3D;&#x3D;定义&#x3D;&#x3D;</p><p>导出类中被覆盖的方法可以返回积累芳芳的返回类型的某种到处类型</p><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//polymorphism/CovariantReturn.java</span></span><br><span class="line"><span class="keyword">package</span> polymorphism;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grain</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Grain&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wheat</span> <span class="keyword">extends</span> <span class="title class_">Grain</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Wheat&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mill</span> &#123;</span><br><span class="line">  Grain <span class="title function_">process</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Grain</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WheatMill</span> <span class="keyword">extends</span> <span class="title class_">Mill</span> &#123;</span><br><span class="line">  Wheat <span class="title function_">process</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Wheat</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CovariantReturn</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Mill</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mill</span>();</span><br><span class="line">    <span class="type">Grain</span> <span class="variable">g</span> <span class="operator">=</span> m.process();</span><br><span class="line">    System.out.println(g);</span><br><span class="line">    m = <span class="keyword">new</span> <span class="title class_">WheatMill</span>();</span><br><span class="line">    g = m.process();</span><br><span class="line">    System.out.println(g);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">Grain</span></span><br><span class="line"><span class="comment">Wheat</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stage</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HappyActor</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">()</span> &#123; actor = <span class="keyword">new</span> <span class="title class_">SadActor</span>(); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performPlay</span><span class="params">()</span> &#123; actor.act(); &#125;</span><br></pre></td></tr></table></figure><h2 id="纯继承模式"><a href="#纯继承模式" class="headerlink" title="纯继承模式"></a>纯继承模式</h2><blockquote>只有在基类中出现的方法才可以在导出类中定义，是一种纯粹的“is a"关系<blockquote>扩展接口可定义为”is-like-a"关系<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: polymorphism/RTTI.java</span></span><br><span class="line"><span class="comment">// Downcasting &amp; Runtime type information (RTTI).</span></span><br><span class="line"><span class="comment">// &#123;ThrowsException&#125;</span></span><br><span class="line"><span class="keyword">package</span> polymorphism;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Useful</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;Userful:f()&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">g</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;Userful:g()&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MoreUseful</span> <span class="keyword">extends</span> <span class="title class_">Useful</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;MoreUseful:f()&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">g</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;MoreUseful:g()&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">u</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;MoreUseful:u()&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">v</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;MoreUseful:v()&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">w</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;MoreUseful:w()&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RTTI</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Useful[] x = &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Useful</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">MoreUseful</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">    x[<span class="number">0</span>].f();</span><br><span class="line">    x[<span class="number">1</span>].g();</span><br><span class="line">    <span class="comment">// Compile time: method not found in Useful:</span></span><br><span class="line">    <span class="comment">//x[1].u();</span></span><br><span class="line">    ((MoreUseful)x[<span class="number">1</span>]).u(); <span class="comment">// Downcast/RTTI</span></span><br><span class="line">  <span class="comment">//  ((MoreUseful)x[0]).u(); // Exception thrown</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">0</span>] <span class="keyword">instanceof</span> MoreUseful)</span><br><span class="line">    &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ttt&quot;</span>);</span><br><span class="line">    <span class="type">MoreUseful</span> <span class="variable">mf</span> <span class="operator">=</span> (MoreUseful) x[<span class="number">0</span>];</span><br><span class="line">    mf.u();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">///:~</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;对象不能向上转型，类型才能向上转型。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;内存分析&#x3D;&#x3D; </p><p>“<a href="https://blog.csdn.net/qq_43582566/article/details/121909107">Java多态的向上转型——内存分析_向上转型内存结构-CSDN博客</a>“</p><h1 id="java的异常处理机制"><a href="#java的异常处理机制" class="headerlink" title="java的异常处理机制"></a>java的异常处理机制</h1><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><p><img src="/2024/03/%E5%8D%8F%E5%8F%98%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20231220165420962.png" alt="image-20231220165420962"></p><p><b>例</b>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException&#123;</span><br><span class="line"><span class="type">int</span> c[]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">c[<span class="number">5</span>]=<span class="number">60</span>;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">    <span class="type">int</span> b=<span class="number">50</span>/a;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">calculate();</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">catch</span> (IllegalAccessException e)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;非法存取&quot;</span>+e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h1><p>功能类似于cpp中的模板,作用是提高代码的复用率</p><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException&#123;</span><br><span class="line"><span class="type">int</span> c[]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">c[<span class="number">5</span>]=<span class="number">60</span>;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">    <span class="type">int</span> b=<span class="number">50</span>/a;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">calculate();</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">catch</span> (IllegalAccessException e)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;非法存取&quot;</span>+e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><blockquote><p>泛型是带一个或则和多个类型参数的类</p></blockquote><p>eg </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> generics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> T  t;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T  t)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T  <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>  t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">Box&lt;String&gt; box = <span class="keyword">new</span> <span class="title class_">Box</span>();</span><br><span class="line">    Box&lt;Integer&gt; box1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;Integer&gt;();</span><br><span class="line">box.add(<span class="string">&quot;hello&quot;</span>);     <span class="comment">//box.add(100);</span></span><br><span class="line">System.out.println(box.get());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>泛型类的使用与方法调用类似。 ¡ 方法调用需向方法传递参数，使用泛型需传递一个类型参 数，即用某个具体的类型替换T。 要在Box对象中存放String对象，就要在创建Box对象时为其 传递String类型参数。 ¡ 要实例化泛型类对象，也使用new运算符，但在类名和括 号之间需加上要传递的具体类型，</p><blockquote><p>例如： &#x2F;&#x2F;在JDK 1.7之前，创建泛型对象时的写法 BoxGenerics box &#x3D; new BoxGenerics(); </p></blockquote><blockquote><p>&#x2F;&#x2F;在JDK 1.7之后，创建泛型对象时的写法 BoxGenerics box &#x3D; new BoxGenerics(); </p></blockquote><p>按照约定，类型参数名使用单个大写字母表示。常用的类 型参数名（标记符）有：E表示元素，K表示键，N表示数字，T 表示类型，V表示值，？等</p></blockquote><blockquote><p>当没有指定模板类型时，会默认当成object对像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class REG1 &#123;</span><br><span class="line">public static void main(String[] args)</span><br><span class="line">&#123;</span><br><span class="line">    CE c3=new CE();</span><br><span class="line">    c3.x=5;</span><br><span class="line">    c3.y=10;</span><br><span class="line">    System.out.println(c3.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/03/%E5%8D%8F%E5%8F%98%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20231222144704812.png" alt="image-20231222144704812"></p><p>当定义数组时，不能直接定义,需要用以下方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//CE&lt;Integer,Double&gt;[] carry1=new CE&lt;Integer,Double&gt;[5];</span></span><br><span class="line">CE&lt;Integer,Double&gt;[] carry2=<span class="keyword">new</span> <span class="title class_">CE</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    carry2[i]=<span class="keyword">new</span> <span class="title class_">CE</span>&lt;Integer,Double&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><h4 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h4><p>在泛型代码内部，无法获得任何有关泛型参数的信息。 ¡ 当泛型类型实例化时，编译器使用一种叫类型擦除的技术 转换这些类型。在编译时，编译器将清除类和方法中的所 有与类型参数有关的信息。 ¡ Java考虑到兼容问题，使用擦除实现泛型，意味着泛型使 用时，任何具体的类型信息都被擦除了，唯一知道的就是 你在使用一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErasedTypeEquivalence</span> &#123; <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>().getClass(); <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>().getClass(); System.out.println(c1 == c2); <span class="comment">//True or False？ &#125; &#125; //generics.ErasedTypeEquivalence.java 35 //: generics/LostInformation.java</span></span><br></pre></td></tr></table></figure><h4 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h4><blockquote><p><u>边界通配符</u> <code>? super Apple</code> 表示传入apple整个类及其以上的父类。</p><p><u>边界通配符</u> <code>? extend Apple</code> 表示传入apple整个类及其以下的子类。</p></blockquote><ul><li><p>1.上界不能往里存，只能往外取 编译器只知道容器里的是Fruit或者Fruit的子类，但不 知道它具体是什么类型，所以存的时候，无法判断是否要存 入的数据的类型与容器种的类型一致，所以会拒绝set操作。 </p></li><li><p>2.下界往外取只能赋值给Object变量，不影 响往里存 因为编译器只知道它是Fruit或者它的父类，这样实际上 是放松了类型限制，Fruit的父类一直到Object类型的对象 都可以往里存，但是取的时候，就只能当成Object对象使用 了。</p></li><li><p>所以如果需要经常往外读，则使用，如果需 要经常往外取，则使用。</p></li></ul><p>  [＜? extend T＞和＜? super T＞的解释_-CSDN博客](<a href="https://blog.csdn.net/qq_58746475/article/details/119887000?ops_request_misc=%7B%22request_id%22:%22170323034416800222821634%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170323034416800222821634&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-119887000-null-">https://blog.csdn.net/qq_58746475/article/details/119887000?ops_request_misc=%7B%22request%5Fid%22%3A%22170323034416800222821634%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170323034416800222821634&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-119887000-null-</a>null.142^v96^pc_search_result_base9&amp;utm_term&#x3D; extend &amp;spm&#x3D;1018.2226.3001.4187)”</p><blockquote><p><u>无界通配符</u>  使用无界通配符指定一个未知类型 “？” 。 ？ 与&#x3D;&#x3D;? extend Apple&#x3D;&#x3D;具有相同的含义，表示任何类 型。</p></blockquote><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><ul>泛型也可以用于接口<ul><li>实现泛型接口时，如果不生命类型，那么泛型自动变为object</li><li>如果想保留接口中的泛型，则在实现剋的声明时，必须保留泛型接口中的泛型声明</li><li>也可以在是实现时，直接给定接口泛型中的具体类型</li></ul><h4 id="使用泛型需要注意的问题"><a href="#使用泛型需要注意的问题" class="headerlink" title="使用泛型需要注意的问题"></a>使用泛型需要注意的问题</h4><ul><li>任何基本类型都不能作为类型参数</li><li>实现参数化接口，由于擦除，一个类不能实现同一 泛型接口的两种变体</li><li>转型与警告：使用带泛型类型参数的转型， instanceof无任何效果，因为擦除</li><li>方法重载：类型参数不能识别</li></ul></ul></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;协变返回类型&quot;&gt;&lt;a href=&quot;#协变返回类型&quot; class=&quot;headerlink&quot; title=&quot;协变返回类型&quot;&gt;&lt;/a&gt;协变返回类型&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Java" scheme="https://ycx6666.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://ycx6666.github.io/tags/Java/"/>
    
    <category term="协变" scheme="https://ycx6666.github.io/tags/%E5%8D%8F%E5%8F%98/"/>
    
  </entry>
  
  <entry>
    <title>操作系统第四组第二次小班课</title>
    <link href="https://ycx6666.github.io/2024/03/%E5%A4%A7%E7%BA%B2%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://ycx6666.github.io/2024/03/%E5%A4%A7%E7%BA%B2%20-%20%E5%89%AF%E6%9C%AC/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-12T15:22:16.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统第四组第二次小班课"><a href="#操作系统第四组第二次小班课" class="headerlink" title="操作系统第四组第二次小班课"></a>操作系统第四组第二次小班课</h1><blockquote><p>代码实现利用多进程实现 C&#x2F;S 模式聊天程序，启动一个服务器，单个和多个客户端，服务端接收到新的客户端请求就创建一个进程与客户端通信。</p></blockquote><h2 id="CS-架构和-BS-架构"><a href="#CS-架构和-BS-架构" class="headerlink" title="CS 架构和 BS 架构"></a>CS 架构和 BS 架构</h2><p>常见的软件架构有两种：CS、BS。不管是哪种，真正的核心处理逻辑都是在服务器上：</p><ol><li><p>CS：Client&#x2F;Server（客户端 &#x2F; 服务器），采取这种架构的软件，在用户本地需要下载并安装客户端程序，在远程有一个服务器端程序。比如：QQ、steam。</p><p>优点：事先下载好所有资源，用户体验好。缺点：需要开发客户端和服务端，开发、部署、维护麻烦，服务端更新时，客户端也需要更新。CS架构适合定制专业化的办公类软件。</p></li><li><p>BS：Brower&#x2F;Server（浏览器 &#x2F; 服务器），采取这种架构时，只需要一个浏览器，用户通过不同的网址就可以访问不同的服务器。比如：京东、淘宝（网页端）。</p><p>优点：方便，不需要开发客户端，只需要页面+服务端，且只需要打开浏览器就可以使用。缺点：需要通过网络传输所有的图片、音频资源，如果资源过大，则会降低用户体验。BS架构适合移动互联网应用。</p></li></ol><h2 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h2><p>当我们要向另外一台计算机发送信息时，我们要知晓对方电脑在互联网上的地址（<strong>IP</strong>），还需要确定对方电脑接受数据的软件（<strong>端口号</strong>，一个端口号只能被一个软件绑定使用），还需要确定网络传输的规则（<strong>协议</strong>）。故<strong>IP、端口号、协议</strong>就是网络编程三要素。</p><p><strong>网络编程三要素</strong>：</p><ol><li>IP：设备在网络中的地址，是唯一的标识。</li><li>端口号：应用程序在设备中唯一的标识。</li><li>协议：数据在网络中传输的规则，常见的协议有 UDP、TCP、http、https、ftp。</li></ol><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>全称：Internet Protocol，是互联网协议地址，也称IP地址。是分配给上网设备的数字标签。常见的IP分为：ipv4、ipv6。</p><p>IPv4：全称为Internet Protocol version 4，即互联网通信协议第四版。采用<strong>32位地址长度</strong>，<strong>分成4组（每组1字节，8位）</strong>。一般用<strong>点分十进制表示法</strong>，例如：<code>192.168.1.66</code>。每一组最大值是255，最小值是0。在IPv4中，每一组有256种表示方法，一共4组，最多可以表示 $256^4 &#x3D; 4294967296$ 种地址，数量有限，不够使用。实际上，在2019年11月26日，IPv4的全部可用地址就已经分配完毕了。</p><p>IPv6：全称为Internet Protocol version 6，即互联网通信协议第六版。由于互联网的蓬勃发展，IP地址的需求量越来越大，而IPv4模式下的IP总数有限，为了让地址能够继续分配，故出现了IPv6。采用<strong>128位地址长度，分成8组（每组2字节，16位）</strong>。一共有 $2^{128} &#x3D; 3.04\times10^{38}$ 种地址，这个数量，可以给地球上的每一粒沙子都编上号。一般用<strong>冒分十六进制表示法</strong>，例如：<code>2001:0DB8:0000:0023:0008:0800:200C:417A</code>。对于每一组，可以省略前导0，此时，对于上述IP地址，可以记录为：<code>2001:DB8:0:23:8:800:200C:417A</code>。此外，还有一种特殊情况：<strong>0位压缩表示法</strong>。即如果计算出的16进制表示形式中有多个连续的0，可以利用<code>::</code>进行压缩表示，例如对于<code>FF01:0:0:0:0:0:0:1101</code>，我们可以压缩为：<code>FF01::1101</code>。</p><p>上述是对于IPv4和IPv6的基本介绍，现对IPv4进行额外补充。</p><p>IPv4的地址分类形式有两种：一种是公网地址（万维网使用），一种是私有地址（局域网使用）。<code>192.168.</code>开头的就是私有地址，范围即为<code>192.168.0.0--192.168.255.255</code>，专门为组织机构内部使用，通过共享公网IP以此节省IP。</p><p>一个特殊的IP地址为：<code>127.0.0.1</code>，又称localhost。是回送地址，也叫本地回环地址，又称本机IP。永远只会寻找当前所在的本机。换个地方上网，局域网IP可能不一样，因为这个是通过路由器分配的。通过localhost，可以保证自己给自己发送数据时不出错。</p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>应用程序在设备中唯一的标识。<strong>一个端口号只能被一个应用程序使用。</strong></p><p>端口号是由两个字节表示的整数，取值范围：0-65535。其中0-1023之间的端口号是用于一些知名的网络服务或者应用。我们自己使用1024以上的端口号就可以了。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>计算机网络中，连接和通信的规则被称作网络通信协议。</p><p>OSI参考模型：世界互联协议标准，全球通信规范，单模型过于理想化，未能在因特网上进行广泛推广。</p><p>TCP &#x2F; IP 参考模型：事实上的国际标准。</p><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><p>用户数据报协议（User Datagram Protocol），是<strong>面向无连接</strong>（不管两台计算机是否建立连接，直接传输数据）通信协议。速度快，有大小限制，一次最多发送64K，数据不安全，易丢失数据。应用场景：网络会议、语音通话、在线视频。（丢失数据的影响不大）</p><h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><p>传输控制协议（Transmission Control Protocol），是<strong>面向连接</strong>的通信协议。速度慢，没有大小限制，数据安全。应用场景：下载软件、文字聊天、发送邮件。（丢失数据影响较大）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;操作系统第四组第二次小班课&quot;&gt;&lt;a href=&quot;#操作系统第四组第二次小班课&quot; class=&quot;headerlink&quot; title=&quot;操作系统第四组第二次小班课&quot;&gt;&lt;/a&gt;操作系统第四组第二次小班课&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;代码实现利用多进程实现 C</summary>
      
    
    
    
    <category term="小班" scheme="https://ycx6666.github.io/categories/%E5%B0%8F%E7%8F%AD/"/>
    
    
    <category term="操作系统" scheme="https://ycx6666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统作业1</title>
    <link href="https://ycx6666.github.io/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/"/>
    <id>https://ycx6666.github.io/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-12T15:22:22.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><h2 id="4-1"><a href="#4-1" class="headerlink" title="4-1"></a>4-1</h2><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240316210403950.png" alt="image-20240316210403950"></p><p>可以看到，在每一个时刻，都保持cpu处于忙碌状态，因此cpu利用率位100%;</p><p>使用-c指令查看发现符合预期。</p><h2 id="4-2"><a href="#4-2" class="headerlink" title="4-2"></a>4-2</h2><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240316210906963.png" alt="image-20240316210906963"></p><p>进程二为一个I&#x2F;O操作，因此程序完成的时间与等待I&#x2F;O完成的时间有关；</p><p>若设这个时间位x，那么所需要的总时间就为进程0的执行时间加上I&#x2F;O发起请求的时间加上I&#x2F;O等待的时间再加上I&#x2F;O执行完成的时间；</p><p>即<br>$$<br>4+x+2&#x3D;6+x<br>$$<br>如输入-c之后的表，表中I&#x2F;O等待了4个时刻，因此耗费了11个时刻的时间，与预期相符。</p><h2 id="4-3"><a href="#4-3" class="headerlink" title="4-3"></a>4-3</h2><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240316211841117.png" alt="image-20240316211841117"></p><p>我们可以看到，当交换了程序运行时间后，实际上进行I&#x2F;O操作时仍旧处于阻塞状态，但是不同的是，此时程序二由于cpu空闲而可以运行，这样子就大大提高了cpu利用率，有效缩短了时间，因此交换顺序是很重要的，这样可以大大提高cpu利用率和运行效率。</p><p>使用-c指令可以发现答案正确。</p><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><h2 id="5-1"><a href="#5-1" class="headerlink" title="5-1"></a>5-1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> x=<span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> rc=fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rc&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;child(pid:%d) (x:%d)\n&quot;</span>,(<span class="type">int</span>)getpid(),x);</span><br><span class="line">        </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;parent of %d (pid:%d) (x:%d)\n&quot;</span>,</span><br><span class="line">                                rc,(<span class="type">int</span>)getpid(),x);</span><br><span class="line">          x=<span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主进程访问x并将100设置为50时，子进程中的值仍为100，这说明子进程与父进程中的x值互不影响。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> x=<span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> rc=fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rc&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">50</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;child(pid:%d) (x:%d)\n&quot;</span>,(<span class="type">int</span>)getpid(),x);</span><br><span class="line">        </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">        x=<span class="number">150</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;parent of %d (pid:%d) (x:%d)\n&quot;</span>,</span><br><span class="line">                                rc,(<span class="type">int</span>)getpid(),x);</span><br><span class="line">               </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将父进程中的x设置为50再输出而子进程中的x设置为150输出，可以观察到：</p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240316214932000.png" alt="image-20240316214932000"></p><p>因此这更加证明了父进程和子进程中的变量x并不互相影响。</p><h2 id="5-2"><a href="#5-2" class="headerlink" title="5-2"></a>5-2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> rc=fork();</span><br><span class="line">        <span class="type">int</span> fd=open(<span class="string">&quot;./op-5-2-open.txt&quot;</span>,O_RDWR);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rc&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;child(fd:%d)\n&quot;</span>,fd);</span><br><span class="line">                <span class="type">char</span> str[]=<span class="string">&quot;child process&quot;</span>;</span><br><span class="line">                write(fd,str,<span class="keyword">sizeof</span>(str));</span><br><span class="line">        </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;parent (fd:%d)\n&quot;</span>,fd);</span><br><span class="line">               </span><br><span class="line">                <span class="type">char</span> str2[]=<span class="string">&quot;parent process&quot;</span>;</span><br><span class="line">                write(fd,str2,<span class="keyword">sizeof</span>(str2));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当他们并发的写入同一个文件中时，可以看到子进程和父进程都可以正常的访问open()返回的文件描述符；打开txt文件后可以发现后运行的子进程覆盖了先运行的父进程，如下面第二张图所示：</p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240316221640885.png" alt="image-20240316221640885"></p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240316221829401.png" alt="image-20240316221829401"></p><h2 id="5-4"><a href="#5-4" class="headerlink" title="5-4"></a>5-4</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> rc=fork();</span><br><span class="line"><span class="keyword">if</span>(rc&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;fork failed!\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;execl\n&quot;</span>);</span><br><span class="line">execl(<span class="string">&quot;/bin/ls&quot;</span>,<span class="string">&quot;ls&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> wc=wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后输出结果如图所示：</p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240317171813950.png" alt="image-20240317171813950"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> rc=fork();</span><br><span class="line"><span class="keyword">if</span>(rc&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;fork failed!\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;execl\n&quot;</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*arg;</span><br><span class="line"><span class="type">char</span> *<span class="type">const</span> argv[]=&#123;<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-l&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">cahr *<span class="type">const</span> envp[]=&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">execl(<span class="string">&quot;/bin/ls&quot;</span>,arg,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execlp\n&quot;</span>);</span><br><span class="line">execlp(<span class="string">&quot;ls&quot;</span>,arg,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execle\n&quot;</span>);</span><br><span class="line">execle(<span class="string">&quot;/bin/ls&quot;</span>,arg,<span class="literal">NULL</span>,envp);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execv\n&quot;</span>);</span><br><span class="line">execv(<span class="string">&quot;/bin/ls&quot;</span>,argv);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ececvp\n&quot;</span>);</span><br><span class="line">execvp(<span class="string">&quot;ls&quot;</span>,argv);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ececvp\n&quot;</span>);</span><br><span class="line">execvp(<span class="string">&quot;ls&quot;</span>,argv,envp);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> wc=wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别运行后可以看到如图所示的结果：</p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240317173008027.png" alt="image-20240317173008027"></p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240317173034407.png" alt="image-20240317173034407"></p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240317173059810.png" alt="image-20240317173059810"></p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240317173127891.png" alt="image-20240317173127891"></p><p><img src="/2024/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/Users\南渡的南\AppData\Roaming\Typora\typora-user-images\image-20240317173153763.png" alt="image-20240317173153763"></p><p>__为什么会有这么多的变种__，是因为多种exec()调用的参数传递方式和传递参数不同，这样子就可以更加灵活多样的使用exec()的功能，从而完成更加细致多样的操作来满足不同的需求。</p><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><h2 id="7-1"><a href="#7-1" class="headerlink" title="7-1"></a>7-1</h2><p>由于三个任务时间相同且在同一时刻到达，因此他们两种方式的响应时间和周转时间分别相同。</p><p><strong>其调度方式为:</strong></p><table><thead><tr><th>SJF&#x2F;FIFO调度顺序</th><th>A</th><th>B</th><th>B</th></tr></thead><tbody><tr><td>运行长度</td><td>200</td><td>200</td><td>200</td></tr></tbody></table><p>其中每个单元格表示：<strong>响应时间&#x2F;周转时间</strong></p><table><thead><tr><th>调度方式</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>FIFO</td><td>0&#x2F;200</td><td>200&#x2F;400</td><td>400&#x2F;600</td></tr><tr><td>SJF</td><td>0&#x2F;200</td><td>200&#x2F;400</td><td>400&#x2F;600</td></tr></tbody></table><p><strong>这两种调度方式的平均响应时间为:</strong><br>$$<br>（0+200+400）&#x2F;3&#x3D;200<br>$$<br><strong>这两种调度方式的平均周转时间为：</strong><br>$$<br>(200+400+600)&#x2F;3&#x3D;400<br>$$</p><h2 id="7-2"><a href="#7-2" class="headerlink" title="7-2"></a>7-2</h2><p><strong>其调度方式为:</strong></p><table><thead><tr><th>SJF&#x2F;FIFO调度顺序</th><th>A</th><th>B</th><th>B</th></tr></thead><tbody><tr><td>运行长度</td><td>100</td><td>200</td><td>300</td></tr></tbody></table><p>其中每个单元格表示：<strong>响应时间&#x2F;周转时间</strong></p><table><thead><tr><th>调度方式</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>FIFO</td><td>0&#x2F;100</td><td>100&#x2F;300</td><td>300&#x2F;600</td></tr><tr><td>SJF</td><td>0&#x2F;100</td><td>100&#x2F;300</td><td>300&#x2F;600</td></tr></tbody></table><p><strong>这两种调度方式的平均响应时间为:</strong><br>$$<br>（0+100+300）&#x2F;3&#x3D;133.33<br>$$<br><strong>这两种调度方式的平均周转时间为：</strong><br>$$<br>(100+300+600)&#x2F;3&#x3D;333.33<br>$$</p><h2 id="7-3"><a href="#7-3" class="headerlink" title="7-3"></a>7-3</h2><p>其中每个单元格表示：<strong>响应时间&#x2F;周转时间</strong></p><table><thead><tr><th>调度方式</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>RR</td><td>0&#x2F;598</td><td>1&#x2F;599</td><td>2&#x2F;600</td></tr></tbody></table><p><strong>这两种调度方式的平均响应时间为:</strong><br>$$<br>（0+1+2）&#x2F;3&#x3D;1<br>$$<br><strong>这两种调度方式的平均周转时间为：</strong><br>$$<br>(598+599+600)&#x2F;3&#x3D;599<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4&quot;&gt;&lt;a href=&quot;#4&quot; class=&quot;headerlink&quot; title=&quot;4&quot;&gt;&lt;/a&gt;4&lt;/h1&gt;&lt;h2 id=&quot;4-1&quot;&gt;&lt;a href=&quot;#4-1&quot; class=&quot;headerlink&quot; title=&quot;4-1&quot;&gt;&lt;/a&gt;4-1&lt;/h2&gt;&lt;p&gt;&lt;im</summary>
      
    
    
    
    <category term="作业" scheme="https://ycx6666.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="操作系统" scheme="https://ycx6666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统第四章课后作业</title>
    <link href="https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A2%E8%BD%AF%E4%BB%B62204%E6%88%B4%E8%85%BE%E5%AE%87202226010418/"/>
    <id>https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A2%E8%BD%AF%E4%BB%B62204%E6%88%B4%E8%85%BE%E5%AE%87202226010418/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-12T15:22:05.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四章课后作业"><a href="#第四章课后作业" class="headerlink" title="第四章课后作业"></a>第四章课后作业</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p><strong>某酒店集团公司在全国各城市开有酒店。每个酒店都有客房，客户可在网上先登录，然后预订，也可入店时现场预订。其住宿业务数据库中有如下4个表：</strong></p><p><strong>Hotel(hotelNo, name, city, address, phone)</strong><br><strong>Room(roomNo, hotelNo, type, price)</strong><br><strong>Booking (hotelNo, roomNo, guestNo, dateFrom, dateTo)</strong><br><strong>Guest(guestNo, password, name, city, email, phone, discount, creditNo)</strong><br><strong>其中房间类型type字段的取值有单人间、双人间、商务间、豪华间。price是指住宿一天的房价。</strong><br><strong>1)写出创建Room表和Booking表的SQL语句。</strong><br><strong>2)创建一个视图，列出在2019-09-30这天，入住在编号为H0001的酒店的客人情况表，输出字段包括客人名字、房间号、房间类型、价格。</strong><br><strong>3)创建一个存储过程，以起始日期、结束日期、酒店号为输入参数，求出所指的住宿期间，这个酒店可供预定的房间列表，包括房间号、类型、价格。按价格升序排列。</strong><br><strong>4)有业务规则：不允许发生一个客户在两个不同的酒店有起始日期相同的预订。请创建一个触发器，表示该业务规则。</strong></p><ol><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Room (</span><br><span class="line">roomNo VARCHAR(10),//假设房间号为10个字符</span><br><span class="line">hotelNo VARCHAR(10),//假设宾馆好为10个字符</span><br><span class="line">type ENUM(‘单人间’，‘双人间’，‘三人间’)，//假设有这三种房间</span><br><span class="line">price INT,</span><br><span class="line">PRIMARY KEY (roomNo,hotelNo),</span><br><span class="line">  FOREIGN KEY (hotelNo) REFERENCES Hotel(hotelNo)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE Booking (</span><br><span class="line">  hotelNo VARCHAR(10),</span><br><span class="line">  roomNo VARCHAR(10),</span><br><span class="line">  guestNo int,</span><br><span class="line">  dateFrom DATE,</span><br><span class="line">  dateto DATE,</span><br><span class="line">  PRIMARY KEY (hotelNo,roomNo,guestNo,dateFrom,dateTo),</span><br><span class="line">  FOREIGN KEY (hotelNo) REFERENCES Hotel(hotelNo),</span><br><span class="line">  FOREIGN KEY (roomNo) REFERENCES Room(roomNo),</span><br><span class="line">  FOREIGN KEY (guestNo) REFERENCES Guest(guestNo)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_h0001 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> g.name,b.roomNo,r.type,r.prcie </span><br><span class="line"><span class="keyword">FROM</span> Booking b</span><br><span class="line"><span class="keyword">JOIN</span> Guest g <span class="keyword">IN</span> b.guestNo<span class="operator">=</span>g.guestNo</span><br><span class="line"><span class="keyword">JOIN</span> Room r <span class="keyword">IN</span> b.roomNo<span class="operator">=</span>r.roomNo <span class="keyword">AND</span> b.hotelNo<span class="operator">=</span>r.hotelNo</span><br><span class="line"><span class="keyword">WHERE</span> b.hotelNo<span class="operator">=</span><span class="string">&#x27;H0001&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> <span class="string">&#x27;2019-09-30&#x27;</span> <span class="keyword">BETWEEN</span> b.dateFrom <span class="keyword">AND</span> b.dateTo;</span><br></pre></td></tr></table></figure><ol start="3"><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE getGuestInfo(@gDateFrom in DATE,@gDateTo in DATE,@gHotelNo in VARCHAR)</span><br><span class="line">BEGIN </span><br><span class="line">SELECT r.roomNo,r.type,r.price</span><br><span class="line">FROM Room r</span><br><span class="line">WHERE @gHotelNo=r.hotelNo AND r.roomNo NOT IN(</span><br><span class="line">  SELECT b.roomNo</span><br><span class="line">    FROM Booking b</span><br><span class="line">    WHERE b.hotelNo=@gHotelNo AND NOT(</span><br><span class="line">    b.dateTo&gt;@gDateFrom AND </span><br><span class="line">      b.dateStart&lt;@gDateTo</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  ORDER BY r.price ASC</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><ol start="4"><li></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> unableInsertBooking</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> Booking</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> sum <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">INTO</span> sum</span><br><span class="line"><span class="keyword">FROM</span> Booking</span><br><span class="line"><span class="keyword">WHERE</span> new.guestNo<span class="operator">=</span>b.guestNo</span><br><span class="line"><span class="keyword">AND</span> new.dateFrom<span class="operator">=</span>b.dateFrom</span><br><span class="line"><span class="keyword">AND</span> new.hotelNo<span class="operator">&lt;&gt;</span>b.hotelNo</span><br><span class="line">IF sum<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line"><span class="keyword">SET</span> MESSAGE_TEXT<span class="operator">=</span><span class="string">&#x27;Wrong operation!&#x27;</span></span><br><span class="line"><span class="keyword">END</span> IF</span><br><span class="line"> <span class="keyword">END</span></span><br><span class="line"> DELIMITER;</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p><strong>数据库中的对象，例如表，其模式是存储在DBMS内部的表中。假设表对象的模式存储在DBMS内部的tableSchema表中，请写出tableSchema表的模式。并用SQL写出tableSchema表的模式的定义语句。注意：要存储表对象的模式，在DBMS内部光有tableSchema表还不够，还要有辅助表才行。基于严格按类分表存储原则，以及类与类之间有联系，还要求写出辅助表的定义。</strong></p><p><strong>tableSchema表的模式定义</strong></p><p>TableSchema 表可能包括表名、字段名、数据类型、是否可为空、主键、外键等信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tableSchema (</span><br><span class="line">  tableName <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  columnName <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  dataType <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  isNullable <span class="type">BOOLEAN</span>,</span><br><span class="line">  isPrimaryKey <span class="type">BOOLEAN</span>,</span><br><span class="line">  isForeignKey <span class="type">BOOLEAN</span>,</span><br><span class="line">  referenceTable <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  referenceColumn <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="comment">/* 其它可能的字段 */</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (tableName, columnName)</span><br><span class="line">  <span class="comment">/* 外键约束等 */</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>辅助表</strong></p><p>辅助表可用来存储索引或者关系信息的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> auxiliaryTable (</span><br><span class="line">  tableName <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  constraintName <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  constraintType <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="comment">/* 其它可能的辅助信息 */</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (tableName, constraintName)</span><br><span class="line">  <span class="comment">/* 外键约束等 */</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第四章课后作业&quot;&gt;&lt;a href=&quot;#第四章课后作业&quot; class=&quot;headerlink&quot; title=&quot;第四章课后作业&quot;&gt;&lt;/a&gt;第四章课后作业&lt;/h2&gt;&lt;h3 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1.&quot;</summary>
      
    
    
    
    <category term="作业" scheme="https://ycx6666.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="数据库系统" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统第一、二章课后作业</title>
    <link href="https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E4%B8%80/"/>
    <id>https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E4%B8%80/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-12T15:22:00.638Z</updated>
    
    <content type="html"><![CDATA[<p>##习题一</p><ol><li><p>标识每个表的主键和外键：</p><ul><li>学院表（Department）：主键是 <code>deptNo</code>。</li><li>学生表（Student）：主键是 <code>studentNo</code>。<code>deptNo</code> 是外键，引用了学院表（Department）的<code>deptNo</code>。</li><li>课程表（Course）：主键是 <code>courseNo</code>。<code>deptNo</code> 是外键，引用学院表（Department）的<code>deptNo</code>。</li><li>教师表（Teacher）：主键是 <code>teacherNo</code>。<code>deptNo</code> 是外键，引用学院表（Department）的<code>deptNo</code>。</li><li>教师开课表（Teach）：主键可能是 <code>courseNo</code>、<code>semester</code> 和 <code>classNo</code> 的组合。<code>courseNo</code> 是外键，引用课程表（Course）的<code>courseNo</code>；<code>teacherNo</code> 是外键，引用教师表（Teacher）的<code>teacherNo</code>。</li><li>学生选课表（Enroll）：主键是 <code>studentNo</code>、<code>courseNo</code>、<code>semester</code> 的组合。<code>studentNo</code> 是外键，引用学生表（Student）的<code>studentNo</code>；<code>courseNo</code> 是外键，引用教师开课表（Teach）的<code>courseNo</code>；<code>teacherNo</code>是外键，引用教师表<code>(Teacher)</code>中的主键。</li><li>教室表（Classroom）：主键是 <code>classroomNo</code>。</li><li>排课表（Dispatch）：主键是 <code>courseNo</code>、<code>semester</code>、<code>classNo</code>、<code>period</code>、<code>weekday</code> 的组合。<code>classroomNo</code> 是外键，引用教室表（Classroom）的<code>classroomNo</code>。</li></ul></li><li><p>域约束：</p><ul><li>课程表（Course）中的 <code>credit</code> 字段：域约束为数值类型，取值范围取决于学校的学分制度。</li><li>教师表（Teacher）中的 <code>rank</code> 字段：域约束为字符串类型,取值范围是预定义的职称集合，例如 {‘助教’, ‘讲师’, ‘副教授’, ‘教授’} 等。</li></ul></li><li><p>使用关系代数生成以下用户所需业务数据：</p><p>(a)</p><p>​<br>$$<br>\Pi_{studentNo, name, birthday}(\sigma_{sex &#x3D; ‘女’ \land YEAR(birthday) &#x3D; 2000}(Student))<br>$$<br>​</p><p>(b)<br>$$<br>\Pi_{Course.courseNo, Course.name, Enroll.semester, Course.credit, Enroll.score}(Enroll ⨝_{Enroll.courseNo&#x3D;Course.courseNo \land Enroll.studentNo&#x3D;’200843407’} Course)<br>$$</p><p>(c)<br>$$<br>\Pi_{Student.studentNo,Student.name,Student.sex}(\sigma_{semester&#x3D;’2011-1’ \ landcourseNo&#x3D;’G61030009’}(Enroll) \Join _{Enroll.student&#x3D;Student.studentNo}Student)<br>$$</p><h2 id="习题二"><a href="#习题二" class="headerlink" title="习题二"></a>习题二</h2><p>（1）</p><ul><li>Hotel表<ul><li>主键: hotelNo</li><li>没有外键</li></ul></li><li>Room表<ul><li>主键: (roomNo, hotelNo) 的联合主键</li><li>外键: hotelNo (关联到Hotel表的hotelNo)</li></ul></li><li>Booking表<ul><li>主键: (hotelNo, roomNo, guestNo, dateFrom, dateTo) 的联合主键</li><li>外键: hotelNo (关联到Hotel表的hotelNo)，roomNo (关联到Room表的roomNo)，guestNo (关联到Guest表的guestNo)</li></ul></li><li>Guest表<ul><li>主键: guestNo</li><li>没有外键</li></ul></li></ul><p>(2)</p><ul><li>每个房间在任何时间段内只能被一位客户预订，不允许在相同日期范围内有重叠的预订。</li><li>客户在进行网络预订时必须使用有效的身份验证登陆信息，即客户的guestNo和password字段需要有效对应才能完成预订流程。</li></ul><p>(3)</p><p>​(a)<br>$$<br>\Pi_{Room.type, Hotel.name, Hotel.city}(\sigma_{Room.price &gt; 1500}(Room ⨝ Hotel))<br>$$<br>​(b)<br>$$<br>\Pi_{Hotel.name, Room.roomNo, Room.price}(<br>    (σ_{Hotel.city &#x3D; ‘长沙’ AND Room.type &#x3D; ‘单人间’}(Hotel ⨝ Room))<br>    -\<br>    (σ_{Booking.dateFrom \leq ‘2019-09-11’ AND Booking.dateTo \geq ‘2019-09-11’}(Booking))<br>)<br>$$</p></li></ol><h2 id="习题三"><a href="#习题三" class="headerlink" title="习题三"></a>习题三</h2><ol><li><pre><code class="SQL">SELECT h.name,r.type,COUTT(r.roomNo) AS room_num From Hotel As hJOIN Room r ON h.hotelNo=r.hotelNoWHERE h.city=&#39;长沙&#39;GROUP BY h.name,r.typeORDER BY h.name;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```sql</span><br><span class="line">   SELECT g.name,b.roomNo</span><br><span class="line">   From Booking b</span><br><span class="line">   JOIN Hotel h ON b.hotelNo=h.hotelNo</span><br><span class="line">   JOIN GUEST g ON b.guestNo=g.guestNo</span><br><span class="line">   WHERE h.city=&#x27;长沙&#x27; AND b.dateFrom&lt;=&#x27;2019-09-29&#x27; AND b.dateTo&gt;=&#x27;2019-09-29&#x27;</span><br><span class="line">   ORDER By g.name;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">SELECT h.name,r.roomNo,r.priceFROM Hotel hJOIN Room r ON h.hotelNo=r.hotelNoWHERE h.city=&#39;长沙&#39; AND r.type=&#39;双人间&#39; AND r.price&lt;140ORDER BY h.name,r.price;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. ```sql</span><br><span class="line">   SELECT COUNT(DISTINCT b.name)</span><br><span class="line">   FROM Booking b</span><br><span class="line">   WHERE b.dateFrom&gt;=&#x27;2019-08-00&#x27; AND b.dateTo&lt;=&#x27;2019-08-31&#x27;;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">SELECT *FROM Booking bWHERE b.dateTo=NULL;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">6. ```sql</span><br><span class="line">   SELECT COUNT(h.hotelNo)</span><br><span class="line">   FROM Hotel h;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">SELECT h.city AVG(r.price) AS avg_priceFROM Hotel hJOIN Room r ON h.hotelNo=r.hotelNoGROUP BY h.city;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">8. ```sql</span><br><span class="line">   SELECT h.city,r.type,AVG(r.price) AS avg_price</span><br><span class="line">   FROM Hotel h</span><br><span class="line">   JOIN Room r ON h.hotelNo=r.hotelNo</span><br><span class="line">   GROUP BY h.city,r.type;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">SELECT h.city,h.name,b.roomNo,g.name,g.guestNoFROM Booking bJOIN Hotel h ON r.hotelNo=b.hotelNoJOIN Guest g ON b.guestNo=b.guestNoWHERE g.city=&#39;北京&#39; AND b.dateFrom&lt;=&#39;2019-09-29&#39; AND b.dateTo&gt;=&#39;2019-09-29&#39;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">10. ```sql</span><br><span class="line">   SELECT SUM(r.price) AS sum_income</span><br><span class="line">   FROM Room r</span><br><span class="line">   JOIN Hotel h ON h.hotelNo=r.hotelNo</span><br><span class="line">   WHERE h.city=&#x27;长沙&#x27;;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">SELECT SUM(r.price) AS sum_incomeFROM Booking bJOIN Hotel h ON b.hotelNo=h.hotelNOJOIN Room r ON b.hotelNo=r.hotelNoWHERE h.city=&#39;长沙&#39; AND b.dateFrom&lt;=&#39;2019-09-29&#39; AND b.dateTo&gt;=&#39;2019-09-29&#39;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">12. ``` sql</span><br><span class="line">    SELECT r.roomNo</span><br><span class="line">    FROM Room r</span><br><span class="line">    JOIN Hotel h ON h.hotelNo=r.hotelNo</span><br><span class="line">    WHERE h.city=&#x27;长沙&#x27; AND r.roomNo NOT IN&#123;</span><br><span class="line">    SELECT b.roomNo</span><br><span class="line">    FROM Booking b</span><br><span class="line">    WHERE b.dateFrom&lt;=&#x27;2019-09-29&#x27; AND b.dateTo&gt;=&#x27;2019-09-29&#x27;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">SELECT h.city,h.name,            (COUNT(DISTINCT b.roomNo)/COUNT(DISTINCT r.roomNO))*100            AS occupancyRateFROM Hotel hJOIN Room r ON r.hotelNo=h.hotelNoJOIN Booking b ON r.hotel=b.hotelNo AND r.roomNo=b.roomNoWHERE b.dateFrom&lt;=&#39;2019-09-29&#39; AND b.dateTo&gt;=&#39;2019-09-29&#39;GROUP BY h.city,h.name;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">14. ```sql</span><br><span class="line">    SELECT r.roomNo,r.price</span><br><span class="line">    FROM Room r</span><br><span class="line">    JOIN Hotel h ON h.hotelNo=r.hotelNo</span><br><span class="line">    WHERE r.type=&#x27;双人间&#x27; AND h.city=&#x27;长沙&#x27; AND r.roomNo NOT IN &#123;</span><br><span class="line">    SELECT b.roomNo</span><br><span class="line">    FROM Booking b</span><br><span class="line">    WHERE b.dateFrom=&#x27;2019-10-01&#x27; AND b.dateTo=&#x27;2019-10-03&#x27;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">SELECT r.typeFROM Room rJOIN Hotel h ON h.hotelNo=r.hotelNoJOIN Booking b ON b.hotelNo=r.hotelNo AND b.roomNo=r.roomNoWHERE h.city=&#39;长沙&#39; AND &#39;2019-09-29&#39; BETWEEN b.dateFrom AND b.dateToGROUP BY r.typeORDER BY COUNT(*) DESCLIMIT 1;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">16. ```sql</span><br><span class="line">    SELECT g.name,g.creditNo,g.city</span><br><span class="line">    FROM Guest g</span><br><span class="line">    JOIN Booking b ON b.guestNo=g.guestNo</span><br><span class="line">    WHERE b.dateFrom&gt;=&#x27;2019-08-01&#x27; AND b.dateTo&lt;=&#x27;2019-08-31&#x27;</span><br><span class="line">    GROUP g.name,g.creditNo,g.city</span><br><span class="line">    HAVING COUNT(b.guest)&gt;5;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">INSERT INTO Hotel(hotelNo,name,city,address,phone)             VALUES (&#39;001&#39;,&#39;天马大酒店&#39;，&#39;长沙&#39;，&#39;岳麓区&#39;，&#39;10086&#39;);INSERT INTO Room(roomNo,hotelNo,type,price)             VALUES (&#39;001&#39;,&#39;001&#39;，&#39;十人间&#39;，&#39;10086&#39;);INSERT INTO Booking(hotelNo,roomNo,guestNo,dateFrom,dateTo)             VALUES (&#39;001&#39;,&#39;001&#39;，&#39;001&#39;，&#39;2024-03-15&#39;，&#39;2024-03-16&#39;);INSERT INTO Guest(guestNo,password,name,city,email,phone,discount,creditNo)             VALUES (&#39;001&#39;,&#39;114514&#39;，&#39;张三&#39;，&#39;长沙&#39;，&#39;999@gmail.com&#39;,&#39;10086&#39;,&#39;0.01&#39;,&#39;3131313313131&#39;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">18. ```sql</span><br><span class="line">    UPDATE Room SET price=price*1.05;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">CREATE TABLE archival_booking like Booking;INSERT INTO archival_booking             SELECT *            FROM Booking             WHERE b.dateFrom&lt;=&#39;2019-01-01&#39;;DELETE FROM Booking            WHERE dateFrom&lt;=&#39;2019-01-01&#39;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">20. ```sql</span><br><span class="line">    UPDATE Guest SET Discount=Discount*0.9</span><br><span class="line">    WHERE guestNo&#123;</span><br><span class="line">    SELECT guestNo</span><br><span class="line">    From Guest</span><br><span class="line">    WHERE dateFrom&gt;=&#x27;2019-01-01&#x27; AND dateTo&lt;=&#x27;2019-12-31&#x27;</span><br><span class="line">    GROUP BY guestNO</span><br><span class="line">    HAVING COUNT(*)&gt;=12</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sql">DELETE FROM Guest             WHERE g.guest NOT IN&#123;            SELECT b.guestNo            FROM Booking b            WHERE b.dateFrom&gt;=&#39;2017-01-01&#39;            &#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">22. ```sql</span><br><span class="line">    SELECT g.name,g.creditNo,g.city</span><br><span class="line">    FROM guest g</span><br><span class="line">    WHERE NOT EXISTS(</span><br><span class="line">    SELECT h.hotelNO</span><br><span class="line">    FROM Hotel h</span><br><span class="line">    WHERE h.city=&#x27;长沙&#x27;</span><br><span class="line">    AND NOT EXISTS(</span><br><span class="line">                    SELECT b.hotelNo</span><br><span class="line">                    FROM Booking b</span><br><span class="line">                    WHERE b.hotelNo=g.hotelNo </span><br><span class="line">                          AND b.guestNo=g.guestNo</span><br><span class="line">                          AND b.dateFrom BETWEEN &#x27;2019-01-01&#x27; AND &#x27;2019-12-31&#x27;</span><br><span class="line">    )</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##习题一&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;标识每个表的主键和外键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学院表（Department）：主键是 &lt;code&gt;deptNo&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;学生表（Student）：主键是 &lt;code&gt;studentNo&lt;/code&gt;</summary>
      
    
    
    
    <category term="作业" scheme="https://ycx6666.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="数据库系统" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据库与身份验证</title>
    <link href="https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
    <id>https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-12T15:22:08.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库与身份验证"><a href="#数据库与身份验证" class="headerlink" title="数据库与身份验证"></a>数据库与身份验证</h1><p align="center">  <br>  </p><h2 style="text-align:center;color:#F4E0EA">    樱春雪    </h2>  <br>  <br>    <div style="text-align:center">    <a href="https://codeload.github.com/liangjingkanji/DrakeTyporaTheme/zip/refs/heads/master">湖南大学</a>  | <a href="https://theme.typora.io/theme/Drake/">软件工程</a>  | <a href="https://github.com/liangjingkanji/DrakeTyporaTheme/blob/master/issues.md">2204</a></div><br><br><img style="clear:both;display:block;margin:auto;width:400px;height:100px" src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/7HN)MKDR%[2BI2$@Q69A8$H.png">  <br><p></p><h2 id="1-数据库的基本概念"><a href="#1-数据库的基本概念" class="headerlink" title="1.数据库的基本概念"></a>1.数据库的基本概念</h2><h3 id="1-1什么是数据库"><a href="#1-1什么是数据库" class="headerlink" title="1.1什么是数据库"></a>1.1什么是数据库</h3><blockquote><p>数据库是用来组织、存储和管理数据的仓库</p></blockquote><h3 id="1-2常见的数据库及其分类"><a href="#1-2常见的数据库及其分类" class="headerlink" title="1.2常见的数据库及其分类"></a>1.2常见的数据库及其分类</h3><ol><li>MySQL数据库(最广泛、流行度最高的开源免费数据库</li><li>Oracle数据库</li><li>SQL Server数据库</li><li>Mongodb数据库</li></ol><h2 id="2-安装并配置MySql相关的服务"><a href="#2-安装并配置MySql相关的服务" class="headerlink" title="2.安装并配置MySql相关的服务"></a>2.安装并配置MySql相关的服务</h2><h4 id="2-1了解"><a href="#2-1了解" class="headerlink" title="2.1了解"></a>2.1了解</h4><ul><li>MySql server :专门用来提供数据存储和服务的软件</li><li>MySQL Workbench :可视化的MySQL管理工具，通过它，可以方便的操作存储在MySQL Server中的数据</li></ul><h4 id="2-2-3-安装"><a href="#2-2-3-安装" class="headerlink" title="2.2&amp;3.安装"></a>2.2&amp;3.安装</h4><p>略</p><h2 id="3-MySQL的基本使用"><a href="#3-MySQL的基本使用" class="headerlink" title="3.MySQL的基本使用"></a>3.MySQL的基本使用</h2><h3 id="3-1使用mysql-workbench管理数据库"><a href="#3-1使用mysql-workbench管理数据库" class="headerlink" title="3.1使用mysql workbench管理数据库"></a>3.1使用mysql workbench管理数据库</h3><p>略</p><h4 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3.创建数据库"></a>3.创建数据库</h4><h4 id="4-常见数据表"><a href="#4-常见数据表" class="headerlink" title="4.常见数据表"></a>4.常见数据表</h4><blockquote><ol><li>PK主键，唯一标识</li><li>NN，值不允许为空</li><li>UQ，值唯一</li><li>AI，值自动增长</li></ol></blockquote><h3 id="3-2使用SQL管理数据"><a href="#3-2使用SQL管理数据" class="headerlink" title="3.2使用SQL管理数据"></a>3.2使用SQL管理数据</h3><h4 id="1-什么是SQL"><a href="#1-什么是SQL" class="headerlink" title="1.什么是SQL"></a>1.什么是SQL</h4><blockquote><p>sql是一门结构化查询语言，专门用于访问和处理数据库的编程语言，能让我们以编程的形式，操作数据库里面的数据。</p></blockquote><p><strong>三个关键点：</strong></p><ul><li>SQL是一门数据库编程语言</li><li>使用SQL编写出来的代码，叫做SQL语句</li><li>SQL语言只能在&#x3D;&#x3D;关系型数据库中使用&#x3D;&#x3D;（例如Mysql，Oracle，SQL server)，非关系型数据库(如mongdb)不支持SQL语言。</li></ul><h4 id="2-SQL能够做什么"><a href="#2-SQL能够做什么" class="headerlink" title="2.SQL能够做什么"></a>2.SQL能够做什么</h4><p>从数据库中增删改查数据，创建新的数据库，创建表等等</p><h4 id="3-SQL的学习目标"><a href="#3-SQL的学习目标" class="headerlink" title="3.SQL的学习目标"></a>3.SQL的学习目标</h4><p>如何对数据库进行增删改查</p><hr><p>where、and和or、order by、count(*)函数</p><h3 id="3-3SQL语言"><a href="#3-3SQL语言" class="headerlink" title="3.3SQL语言"></a>3.3SQL语言</h3><h2 id="4-在项目中操作MySql"><a href="#4-在项目中操作MySql" class="headerlink" title="4.在项目中操作MySql"></a>4.在项目中操作MySql</h2><h3 id="4-1在项目中操作数据库的步骤"><a href="#4-1在项目中操作数据库的步骤" class="headerlink" title="4.1在项目中操作数据库的步骤"></a>4.1在项目中操作数据库的步骤</h3><ol><li>安装专门的MySql数据库的第三方模块</li><li>通过mysql模块连接到MySql数据库</li><li>通过mysql模块执行SQL语句</li></ol><h4 id="1-安装mysql模块"><a href="#1-安装mysql模块" class="headerlink" title="1.安装mysql模块"></a>1.安装mysql模块</h4><blockquote><p>mysql是一个托关于npm上的第三方某块</p></blockquote><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql<span class="comment">//mysql2</span></span><br></pre></td></tr></table></figure><h4 id="2-配置mysql模块"><a href="#2-配置mysql模块" class="headerlink" title="2.配置mysql模块"></a>2.配置mysql模块</h4><p>在使用sql模块操作mysql数据库之前，必须先对MySQL进行必要的配置，主要配置步骤如下</p><p>&#x3D;&#x3D;这里推荐安装mysql2&#x3D;&#x3D;,否则会因为加密不一样而出现错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入mysql模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.建立与mysql数据库的链接</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,<span class="comment">//登录ip地址</span></span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,<span class="comment">//数据库账号</span></span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;615715&#x27;</span>,<span class="comment">//数据库密码</span></span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span><span class="comment">//指定数据库</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-测试mysql模块能否正确工作"><a href="#3-测试mysql模块能否正确工作" class="headerlink" title="3.测试mysql模块能否正确工作"></a>3.测试mysql模块能否正确工作</h4><p>通过db.query()函数，指定要执行的sql语句，通过回调函数拿到结果:</p><p><strong>这里的SELECT 1没有任何实质性作用，仅用于测试</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断mysql能否正确工作</span></span><br><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;SELECT 1&#x27;</span>, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//如果出错了</span></span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-2使用mysql操作mysql数据库"><a href="#4-2使用mysql操作mysql数据库" class="headerlink" title="4.2使用mysql操作mysql数据库"></a>4.2使用mysql操作mysql数据库</h3><h4 id="1-查询数据"><a href="#1-查询数据" class="headerlink" title="1.查询数据"></a>1.查询数据</h4><p>查询user中所有的数据</p><p>如果执行的是SELECT，则执行的结果是以一个<strong>数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询user中所有的数据</span></span><br><span class="line"><span class="keyword">const</span> sqlstr = <span class="string">`SELECT * FROM user`</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlstr, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240328215553883.png" alt="image-20240328215553883"></p><h4 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h4><p>向user中插入数据</p><p>id为001，name为zz</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向user中新增一条数据，user=‘001’ name=&#x27;dn&#x27;</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">username</span>: <span class="string">&#x27;dn&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义sql语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">`insert into user (id,name) values(?,?)`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">id</span>, user.<span class="property">password</span>], <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br><span class="line">  <span class="comment">//判断成功</span></span><br><span class="line">  <span class="comment">//注意，如果执行的是insert，则res是一个对象，在这个对象中有affectRows这个属性来判断是否陈功</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入成功&#x27;</span>)</span><br><span class="line">&#125;)<span class="comment">//填写两个占位符的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在这里面，有几个需要注意的：</strong></p><blockquote><ul><li>占位符?可以用于表示待插入的位置，在执行db.query时指定属性值进行填充</li><li>在返回的对象res中有一个属性affectRows，如果他的值为1，代表插入成功</li></ul></blockquote><h4 id="3-插入数据的便捷操作"><a href="#3-插入数据的便捷操作" class="headerlink" title="3.插入数据的便捷操作"></a>3.插入数据的便捷操作</h4><p>当我们向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应，可以通过如下方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>:<span class="number">10</span>,<span class="attr">name</span>:<span class="string">&#x27;zz&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">`insert into user set ?`</span></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, user, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br><span class="line">  <span class="comment">//判断成功</span></span><br><span class="line">  <span class="comment">//注意，如果执行的是insert，则res是一个对象，在这个对象中有affectRows这个属性来判断是否陈功</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入成功&#x27;</span>)</span><br><span class="line">&#125;)<span class="comment">//填写两个占位符的值</span></span><br></pre></td></tr></table></figure><h4 id="4-更新数据"><a href="#4-更新数据" class="headerlink" title="4.更新数据"></a>4.更新数据</h4><p>通过如下方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>:<span class="number">10</span>,<span class="attr">name</span>:<span class="string">&#x27;zz&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">`insert into user set ?`</span></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, user, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br><span class="line">  <span class="comment">//判断成功</span></span><br><span class="line">  <span class="comment">//注意，如果执行的是insert，则res是一个对象，在这个对象中有affectRows这个属性来判断是否陈功</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入成功&#x27;</span>)</span><br><span class="line">&#125;)<span class="comment">//填写两个占位符的值</span></span><br></pre></td></tr></table></figure><h4 id="5-更新数据的便捷方式"><a href="#5-更新数据的便捷方式" class="headerlink" title="5.更新数据的便捷方式"></a>5.更新数据的便捷方式</h4><p>如果数据对象的每一个属性都和数据表的字段一一对应，则可以通过如下方式来快速更新表数据:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新数据的便捷方式</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>:<span class="number">10</span>,<span class="attr">user</span>:<span class="string">&#x27;无敌逆神&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;1234567&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">`update user set ? where id=?`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user,user.<span class="property">id</span>], <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意，在提供数据的时候还要加一个额外的参数<strong>user.id</strong>&#x3D;&#x3D;</p><h4 id="6-删除数据"><a href="#6-删除数据" class="headerlink" title="6.删除数据"></a>6.删除数据</h4><p><strong>删除数据时，推荐使用id来，因为它具有唯一标识</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除id为5的数据</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;delete from user where id=?&#x27;</span></span><br><span class="line"></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, <span class="number">5</span>, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="comment">//删除结果执行后，也会生成一个结果对象，其中也包含affectedRows这个属性</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="7-标记删除"><a href="#7-标记删除" class="headerlink" title="7.标记删除"></a>7.标记删除</h4><p>使用delete时，会真正的将数据从表中删除掉，推荐使用标记<strong>删除</strong>的方式，来<strong>模拟删除</strong>的动作</p><blockquote><p>所谓的标记删除时，就是在表中设置类似于status这样的状态字段，来标记这条数据是否被删除</p><p>当用户执行了删除的动作后，并不与执行delete语句将其删除掉，而是执行了<strong>UPDATE</strong>语句，将status更新为删除</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update user set status=? where id=?&#x27;</span></span><br><span class="line"></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [<span class="number">1</span>, <span class="number">6</span>], <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="comment">//删除结果执行后，也会生成一个结果对象，其中也包含affectedRows这个属性</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">affectedRows</span> === <span class="number">1</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-前后端身份认证"><a href="#5-前后端身份认证" class="headerlink" title="5.前后端身份认证"></a>5.前后端身份认证</h2><h3 id="5-1Web开发模式"><a href="#5-1Web开发模式" class="headerlink" title="5.1Web开发模式"></a>5.1Web开发模式</h3><h4 id="1-服务器渲染的Web开发模式"><a href="#1-服务器渲染的Web开发模式" class="headerlink" title="1.服务器渲染的Web开发模式"></a>1.服务器渲染的Web开发模式</h4><blockquote><p>服务器渲染的概念：服务器发送给客户端的HTML页面，是在服务器通过字符串的拼接动态生成的，因此，客户端不需要Ajax这样的技术请求额外的数据</p></blockquote><h4 id="2-服务器渲染Web开发模式的优缺点"><a href="#2-服务器渲染Web开发模式的优缺点" class="headerlink" title="2.服务器渲染Web开发模式的优缺点"></a>2.服务器渲染Web开发模式的优缺点</h4><p>&#x3D;&#x3D;优点&#x3D;&#x3D;</p><blockquote><p>前端耗时少，因此服务器负责动态生成HTML内容，浏览器只需要渲染页面即可</p><p>有利于SEO，因为服务器端响应的时完整的HTML内容，所以爬虫更容易获取信息，有利于SEO</p></blockquote><hr><p>&#x3D;&#x3D;缺点&#x3D;&#x3D;</p><blockquote><p>占用服务器端资源，即服务器端完成HTML内容页面的拼接，如果请求比较多，会对服务器造成一定的压力</p><p>不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行合作分工，尤其对于前端复杂度给高的项目，不利于项目高效开发</p></blockquote><h4 id="3-前后端分离的Web开发模式"><a href="#3-前后端分离的Web开发模式" class="headerlink" title="3.前后端分离的Web开发模式"></a>3.前后端分离的Web开发模式</h4><blockquote><p>前后端分离的概念：前后端分离的开发模式，依赖于Ajax技术的广泛使用，简而言之，前后端分离的Web开发模式就是后端只负责提供API接口，前端使用Ajax调用接口的开发模式</p></blockquote><h4 id="4-前后端分离的优缺点"><a href="#4-前后端分离的优缺点" class="headerlink" title="4.前后端分离的优缺点"></a>4.前后端分离的优缺点</h4><p>&#x3D;&#x3D;优点&#x3D;&#x3D;</p><blockquote><p>开发体验好：前端专注于UI页面开发，后端专注于api的开发，且前端有更多的选择性</p><p>用户体验好：Ajax的广泛应用，极大的提高了用户的体验，可以轻松实现页面的同步刷新</p><p>减轻了服务器端的渲染压力</p></blockquote><p>&#x3D;&#x3D;缺点&#x3D;&#x3D;</p><blockquote><p>不利于SEO，不利于爬虫的爬取</p></blockquote><h4 id="5-如何选择开发模式"><a href="#5-如何选择开发模式" class="headerlink" title="5.如何选择开发模式"></a>5.如何选择开发模式</h4><p>&#x3D;&#x3D;不谈业务场景选使用都是耍流氓&#x3D;&#x3D;</p><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329211010552.png" alt="image-20240329211010552"></p><h3 id="5-2什么是身份认证"><a href="#5-2什么是身份认证" class="headerlink" title="5.2什么是身份认证"></a>5.2什么是身份认证</h3><h4 id="1-什么是身份认证"><a href="#1-什么是身份认证" class="headerlink" title="1.什么是身份认证"></a>1.什么是身份认证</h4><blockquote><p>身份认证又称“身份验证”，“鉴权”，是指通过一定的手段，完成对用户的身份确认</p></blockquote><h4 id="2-为什么需要身份验证"><a href="#2-为什么需要身份验证" class="headerlink" title="2.为什么需要身份验证"></a>2.为什么需要身份验证</h4><blockquote><p>身份验证的目的，是为了确认**当前用户所声称某种身份的用户确实是某种用户</p></blockquote><h4 id="3-不同开发模式下的身份验证"><a href="#3-不同开发模式下的身份验证" class="headerlink" title="3.不同开发模式下的身份验证"></a>3.不同开发模式下的身份验证</h4><p><strong>服务器渲染推荐使用Session认证机制</strong></p><p><strong>前后端分离推荐使用JWT认证机制</strong></p><h3 id="5-3Session认证机制"><a href="#5-3Session认证机制" class="headerlink" title="5.3Session认证机制"></a>5.3Session认证机制</h3><h4 id="1-HTTP协议的无状态性"><a href="#1-HTTP协议的无状态性" class="headerlink" title="1.HTTP协议的无状态性"></a>1.HTTP协议的无状态性</h4><blockquote><p>HTTP协议的无状态性，指的是客户端每次HTTP请求都是独立的，连续多个请求之间没有直接的关系，服务器不会主动保留每次HTTP请求的状态</p></blockquote><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329212001957.png" alt="image-20240329212001957"></p><h4 id="2-如何突破HTTP无状态的限制"><a href="#2-如何突破HTTP无状态的限制" class="headerlink" title="2.如何突破HTTP无状态的限制"></a>2.如何突破HTTP无状态的限制</h4><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329212149180.png" alt="image-20240329212149180"></p><p>&#x3D;&#x3D;现实生活中的会员卡身份认证方式，就叫做Cookie&#x3D;&#x3D;</p><h4 id="3-什么是Cookie"><a href="#3-什么是Cookie" class="headerlink" title="3.什么是Cookie"></a>3.什么是Cookie</h4><blockquote><p>Cookie就是存储在浏览器中的一段键值对，他的大小不超过4kb，它由一个值(value)和一个键值(key)和其他几个用于控制Cookie有效期，安全性，适用范围的可选属性组成</p><p>不同域名下的Cookie各自独立，每当客户端发起请求时，会自动把当前域名下的所有未过期的Cookie一起发送给服务器</p></blockquote><p>&#x3D;&#x3D;四大特性&#x3D;&#x3D;</p><ol><li>自动发送</li><li>域名独立</li><li>过期时限</li><li>4kb限制</li></ol><h4 id="4-Cookie在身份验证的作用"><a href="#4-Cookie在身份验证的作用" class="headerlink" title="4.Cookie在身份验证的作用"></a>4.Cookie在身份验证的作用</h4><blockquote><p>客户端第一次请求服务器的时候，服务器会通过响应头的方式，向客户端发送一个身份验证的Cookie，客户端会自动将COOKIE保存在浏览器中</p><p>随后当客户端浏览器每次请求服务器的时候，浏览器都会自动将身份认证相关的Cookie，通过请求头的方式发送给服务器，服务器即可验明客户端的身份</p></blockquote><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329213207760.png" alt="image-20240329213207760"></p><h4 id="5-Cookie的安全性"><a href="#5-Cookie的安全性" class="headerlink" title="5.Cookie的安全性"></a>5.Cookie的安全性</h4><p>&#x3D;&#x3D;COOKIE不具有安全性&#x3D;&#x3D;</p><blockquote><p>由于Cookie是存储在浏览器中的，而且浏览器也提供了读写Cookie的API，也难辞Cookie也很容易被伪造，不具有安全性</p></blockquote><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329213612017.png" alt="image-20240329213612017"></p><p><strong>所以千万不要使用Cookie来存储用户隐私且敏感的数据</strong></p><h4 id="6-提高身份认证的安全性"><a href="#6-提高身份认证的安全性" class="headerlink" title="6.提高身份认证的安全性"></a>6.提高身份认证的安全性</h4><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329213730371.png" alt="image-20240329213730371"></p><p><strong>这种会员卡+刷卡认证的设计理念，就是Session认证机制的精髓</strong></p><p>在服务器会验证这个Cookie是否真正存在</p><h4 id="7-Session的工作原理"><a href="#7-Session的工作原理" class="headerlink" title="7.Session的工作原理"></a>7.Session的工作原理</h4><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240329213923164.png" alt="image-20240329213923164"></p><h3 id="5-4在Express中使用Session认证"><a href="#5-4在Express中使用Session认证" class="headerlink" title="5.4在Express中使用Session认证"></a>5.4在Express中使用Session认证</h3><h4 id="1-安装express-session认证"><a href="#1-安装express-session认证" class="headerlink" title="1.安装express-session认证"></a>1.安装express-session认证</h4><npm i express-session><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><p>安装成功后，需要通过app.use()来注册session中间件，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TODO：配置Session中间件</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;ycx&#x27;</span>,</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>:<span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="3-如何向session中存入数据"><a href="#3-如何向session中存入数据" class="headerlink" title="3.如何向session中存入数据"></a>3.如何向session中存入数据</h4><p>配置成功后，就可以通过req.session来访问和配置session对象，从而存储用户关键信息</p><p>&#x3D;&#x3D;只有配置成功后，才能通过req.出来session这个属性&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">username</span> != <span class="string">&#x27;admin&#x27;</span> || req.<span class="property">body</span>.<span class="property">password</span> != <span class="string">&#x27;000000&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">stats</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;登陆失败&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//TODO2:将登陆成功后的用户信息，保存在Session中</span></span><br><span class="line"><span class="comment">//只有配置成功后，才能通过req.出来session这个属性</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span><span class="comment">//用户信息</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">islogin</span> = <span class="literal">true</span><span class="comment">//登陆状态</span></span><br><span class="line"></span><br><span class="line">res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">ms</span>: <span class="string">&#x27;登录成功&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h4 id="4-从session中取数据"><a href="#4-从session中取数据" class="headerlink" title="4.从session中取数据"></a>4.从session中取数据</h4><p>可以直接从req.session中取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TODO3从session中获取用户名称，响应给客户端</span></span><br><span class="line"> <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">islogin</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;fail&#x27;</span>&#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">   <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">   <span class="attr">username</span>: <span class="string">&#x27;req.session.user.username&#x27;</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h4 id="5-清空session"><a href="#5-清空session" class="headerlink" title="5.清空session"></a>5.清空session</h4><p>使用req.session.destroy()函数，&#x3D;&#x3D;只会清空当前用户服务器保存的session&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出登录的接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-5JWT认证机制"><a href="#5-5JWT认证机制" class="headerlink" title="5.5JWT认证机制"></a>5.5JWT认证机制</h3><h4 id="1-了解session的缺点"><a href="#1-了解session的缺点" class="headerlink" title="1.了解session的缺点"></a>1.了解session的缺点</h4><blockquote><p>session认证机制需要配合Cookie才能实现，由于Cookie默认不支持跨域访问，所以当涉及到前端跨域请求后端接口时，需要很多额外的配置，</p><p>前后端需要跨域问题时，推荐session</p><p>不需要时，推荐jwt</p></blockquote><h4 id="2-什么是JWT"><a href="#2-什么是JWT" class="headerlink" title="2.什么是JWT"></a>2.什么是JWT</h4><p>JWT是目前最流行的跨域认证解决方案</p><h4 id="3-JWT工作原理"><a href="#3-JWT工作原理" class="headerlink" title="3.JWT工作原理"></a>3.JWT工作原理</h4><h4 id><a href="#" class="headerlink" title></a><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240402201227994.png" alt="image-20240402201227994"></h4><blockquote><p>用户的信息通过Token字符串的方式，保存在客户端浏览器中，服务器通过还原Token字符串的形式来验证用户的身份。</p></blockquote><h4 id="4-JWT字符串组成"><a href="#4-JWT字符串组成" class="headerlink" title="4.JWT字符串组成"></a>4.JWT字符串组成</h4><p>JWT通常由三部分组成</p><blockquote><p>Header、Payload(有效荷载)、Signature(签名)</p></blockquote><p>三者之间使用”.”分隔</p><h4 id="5-JWT三个部分的代表含义"><a href="#5-JWT三个部分的代表含义" class="headerlink" title="5.JWT三个部分的代表含义"></a>5.JWT三个部分的代表含义</h4><p>&#x3D;&#x3D;Header&#x3D;&#x3D;&#x3D;&#x3D;Signature&#x3D;&#x3D;</p><blockquote><p>是安全性相关的部分，只是为了保证Token的安全性</p></blockquote><p>&#x3D;&#x3D;Payload&#x3D;&#x3D;</p><blockquote><p>是真正的用户信息，他是用户信息经过加密之后生成的字符串</p></blockquote><p><img src="/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20240402220156590.png" alt="image-20240402220156590"></p><h4 id="6-JWT的使用方式"><a href="#6-JWT的使用方式" class="headerlink" title="6.JWT的使用方式"></a>6.JWT的使用方式</h4><p>客户端收到服务器返回的JWT之后，将他存储在</p><p><strong>localStorage或者sessionStorage</strong>之中</p><p>此后，客户端每次与服务器端通信，都要带上这个JWT字符串，从而进行身份验证。</p><p><strong>推荐的做法：</strong></p><blockquote><p>将JWT放在HTTP请求头的Authorization字段中</p></blockquote><p><strong>其格式为：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Authorization</span>: <span class="title class_">Bearer</span> &lt;token&gt;</span><br></pre></td></tr></table></figure><h3 id="5-6在Express中使用JWT"><a href="#5-6在Express中使用JWT" class="headerlink" title="5.6在Express中使用JWT"></a>5.6在Express中使用JWT</h3><h4 id="1-安装JWT相关包"><a href="#1-安装JWT相关包" class="headerlink" title="1.安装JWT相关包"></a>1.安装JWT相关包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><p><strong>其中</strong></p><ul><li>jsonwebtoken用于生成JWT字符串</li><li>express-jwt用于将JWT字符串解析还原成JSON对象</li></ul><h4 id="2-导入相关包"><a href="#2-导入相关包" class="headerlink" title="2.导入相关包"></a>2.导入相关包</h4><p>使用require()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span></span><br><span class="line"><span class="keyword">const</span> jsonwebtoken = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJwt = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-定义Secret密钥"><a href="#3-定义Secret密钥" class="headerlink" title="3.定义Secret密钥"></a>3.定义Secret密钥</h4><blockquote><p>为了保证JWT字符串安全性，防止</p></blockquote></npm>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库与身份验证&quot;&gt;&lt;a href=&quot;#数据库与身份验证&quot; class=&quot;headerlink&quot; title=&quot;数据库与身份验证&quot;&gt;&lt;/a&gt;数据库与身份验证&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;
  &lt;br&gt;
  &lt;/p&gt;&lt;h2 style=&quot;text-a</summary>
      
    
    
    
    <category term="数据库" scheme="https://ycx6666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="nodejs" scheme="https://ycx6666.github.io/tags/nodejs/"/>
    
    <category term="npm" scheme="https://ycx6666.github.io/tags/npm/"/>
    
    <category term="身份验证" scheme="https://ycx6666.github.io/tags/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
    
    <category term="数据库" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统第三章课后作业</title>
    <link href="https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E4%B8%89/"/>
    <id>https://ycx6666.github.io/2024/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E4%B8%89/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-12T15:21:57.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库作业三"><a href="#数据库作业三" class="headerlink" title="数据库作业三"></a>数据库作业三</h1><h2 id="习题一"><a href="#习题一" class="headerlink" title="习题一"></a>习题一</h2><p>大学教务管理数据库中，操作系统(courseNo为H61030008)是一门专业核心课，请为2019级软件工程专业（专业编号为‘24）的每个学生，向选课表enroll（studentNo, courseNo,semester,score)中添加一行选修该课的记录。将这个操作定义为一个事务。学号的样式为yyyyddssccnm.其中yyyy表示是哪一年级，dd表示所属学院的编号，ss表示专业编号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TRANSACTION <span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Enroll (studentNo,courseNo,semester,score) </span><br><span class="line"><span class="keyword">VALUES</span>(</span><br><span class="line">(<span class="keyword">SELECT</span> studentNo,<span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentNo <span class="keyword">LIKE</span> <span class="string">&#x27;2019__24%&#x27;</span>),</span><br><span class="line">  <span class="string">&#x27;H61030008&#x27;</span>,</span><br><span class="line">(<span class="keyword">SELECT</span> semester <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> courseNo<span class="operator">=</span><span class="string">&#x27;H6103008&#x27;</span>),</span><br><span class="line">   <span class="number">60</span><span class="operator">/</span><span class="operator">/</span>这个数据貌似只有选课表中有，插入数值应该更具实际情况而定</span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h2 id="习题二"><a href="#习题二" class="headerlink" title="习题二"></a>习题二</h2><p>在图6-7所示的事务执行框架中，从其开始执行，直至执行logCommit()之前，其前面的数更新日志已写入了日志磁盘，有可能吗?在这期间，那些已写人日志磁盘的日志记录，能从日志缓存区删除吗?请说明理由。logCommit()不只是给日志缓存区添加一条&lt;t_id，COMMIT日志记录，还要等待，直至其所有日志记录被写入日志磁盘为止。为什么?对于logAbort()它只是给日志缓存区添加一条&lt;tid，ABORT&gt;日志记录，但并不需要等待。为什么?当一个事务被放弃，其所有日志记录还需要写入日志磁盘吗?请说明理由。</p><ol><li>在提交之前，不一定会将所有的日志全部都写入磁盘，但这些日志一定会在适当的时候异步写入磁盘；在执行logCommit()时，必须将之前的所有日志全部写入磁盘，这样才能在发生崩溃之后完整的执行回滚。</li><li>可能，但这通常由数据库系统管理，可能涉及缓存替换策略和数据库的持久化策略。</li><li>这是为了崩溃后能够完整的执行回滚操作，因为只有等待所有的日志记录全都被写入后，才能保证回滚时能够执行每一步操作。</li><li>一个事务被中止时，他的变更不需要保存到数据库，因此也不需要等待前面的日志全部写入。</li><li>也需要，因为如果系统在回滚时发生崩溃，这些日志将用于再次恢复和回滚，以保证数据库的一致性。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库作业三&quot;&gt;&lt;a href=&quot;#数据库作业三&quot; class=&quot;headerlink&quot; title=&quot;数据库作业三&quot;&gt;&lt;/a&gt;数据库作业三&lt;/h1&gt;&lt;h2 id=&quot;习题一&quot;&gt;&lt;a href=&quot;#习题一&quot; class=&quot;headerlink&quot; title=&quot;习题一</summary>
      
    
    
    
    <category term="作业" scheme="https://ycx6666.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="数据库系统" scheme="https://ycx6666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统第四章课后作业</title>
    <link href="https://ycx6666.github.io/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/"/>
    <id>https://ycx6666.github.io/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/</id>
    <published>2024-03-21T05:44:57.000Z</published>
    <updated>2024-04-12T15:22:14.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-61"><a href="#2-61" class="headerlink" title="2.61"></a>2.61</h3><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324110351074.png" alt="image-20240324110351074"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">judge</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((x+<span class="number">1</span>)||x||(!(x&gt;&gt;<span class="number">24</span>)+<span class="number">1</span>)||(!(x&amp;<span class="number">0xff</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, judge(x));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-71"><a href="#2-71" class="headerlink" title="2.71"></a>2.71</h3><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324112741611.png" alt="image-20240324112741611"></p><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324112902304.png" alt="image-20240324112902304"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">packed_t</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">xbyte</span><span class="params">(<span class="type">packed_t</span> word, <span class="type">int</span> bytenum)</span> </span><br><span class="line">&#123; </span><br><span class="line">   <span class="keyword">return</span> ((<span class="type">int</span>)(word&lt;&lt;((<span class="number">3</span>-bytenum)&lt;&lt;<span class="number">3</span>)))&gt;&gt;<span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> x,num;-</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x,&amp;num);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;0x%hx&quot;</span>, xbyte(x,num));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-87"><a href="#2-87" class="headerlink" title="2.87"></a>2.87</h3><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324142831618.png" alt="image-20240324142831618"></p><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324142847715.png" alt="image-20240324142847715"></p><table><thead><tr><th>格式A</th><th>格式A</th><th>格式B</th><th>格式B</th></tr></thead><tbody><tr><td>位</td><td>值</td><td>位</td><td>值</td></tr><tr><td>1 01110 001</td><td>-9&#x2F;16</td><td>1 0110 0010</td><td>-9&#x2F;16</td></tr><tr><td>0 10110 101</td><td>208</td><td>0 1110 1010</td><td>208</td></tr><tr><td>1 00111 110</td><td>-7&#x2F;1024</td><td>1 0000 0111</td><td>-7&#x2F;1024</td></tr><tr><td>0 00000 101</td><td>5&#x2F;2^17</td><td>0 0000 0001</td><td>1&#x2F;1024</td></tr><tr><td>1 11011 000</td><td>-2^12</td><td>1 1110 1111</td><td>-248</td></tr><tr><td>0 11000 100</td><td>768</td><td>0 1111 0000</td><td>+∞</td></tr></tbody></table><h3 id="2-88"><a href="#2-88" class="headerlink" title="2.88"></a>2.88</h3><p><img src="/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A1/image-20240324152512538.png" alt="image-20240324152512538"></p><p>**A:**正确，int转float，double转float有可能小数部分损失，但两者仍然相等</p><p>**B:**错误，当x、y其中一者为INT_MAX，其他一个为整数时，会导致int溢出，导致两者不相等</p><p>**C:**正确，改变运算顺序并不影响浮点数相加运算</p><p>**D:**正确，改变运算顺序并不影响浮点数相乘运算</p><p>**E:**错误，当dx&#x3D;0，dy&#x3D;1或者dx&#x3D;1，dy&#x3D;0时，会导致除法表达式不成立从而不总是为0。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;2-61&quot;&gt;&lt;a href=&quot;#2-61&quot; class=&quot;headerlink&quot; title=&quot;2.61&quot;&gt;&lt;/a&gt;2.61&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2024/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%</summary>
      
    
    
    
    <category term="作业" scheme="https://ycx6666.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="计算机系统" scheme="https://ycx6666.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Express</title>
    <link href="https://ycx6666.github.io/2019/11/Express%E4%BD%BF%E7%94%A8/"/>
    <id>https://ycx6666.github.io/2019/11/Express%E4%BD%BF%E7%94%A8/</id>
    <published>2019-11-21T05:44:57.000Z</published>
    <updated>2024-04-12T15:21:36.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p align="center">  <br>  </p><h2 style="text-align:center;color:#F4E0EA">    樱春雪  </h2>  <br>  <br>  <div style="text-align:center">    <a href="https://codeload.github.com/liangjingkanji/DrakeTyporaTheme/zip/refs/heads/master">湖南大学</a>  | <a href="https://theme.typora.io/theme/Drake/">软件工程</a>  | <a href="https://github.com/liangjingkanji/DrakeTyporaTheme/blob/master/issues.md">2204</a></div><br><br><img style="clear:both;display:block;margin:auto;width:400px;height:100px" src="/2019/11/Express%E4%BD%BF%E7%94%A8/7HN)MKDR%[2BI2$@Q69A8$H.png">  <br><p></p><h2 id="1-初识Express"><a href="#1-初识Express" class="headerlink" title="1.初识Express"></a>1.初识Express</h2><h3 id="1-1Express简介"><a href="#1-1Express简介" class="headerlink" title="1.1Express简介"></a>1.1Express简介</h3><h4 id="1-什么是Express"><a href="#1-什么是Express" class="headerlink" title="1.什么是Express"></a>1.什么是Express</h4><blockquote><p>Express是基于Node.js平台，快速、开放、极简的Web开发框架</p></blockquote><h4 id="2-进一步理解"><a href="#2-进一步理解" class="headerlink" title="2.进一步理解"></a>2.进一步理解</h4><p>http内部模块使用很复杂，开发效率低；EXpress是基于http封装出来的。</p><h4 id="3-Express能做什么"><a href="#3-Express能做什么" class="headerlink" title="3.Express能做什么"></a>3.Express能做什么</h4><p>两种服务器</p><blockquote><p>Web网站服务器：专门提供Web网页的服务器</p><p>API接口服务器：专门提供API接口的服务器</p></blockquote><p><strong>使用Express，可以方便快捷的创建两种服务器</strong></p><h3 id="1-2Express的基本使用"><a href="#1-2Express的基本使用" class="headerlink" title="1.2Express的基本使用"></a>1.2Express的基本使用</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express@4.17.1</span><br></pre></td></tr></table></figure><h4 id="2-创建最基本Web服务器"><a href="#2-创建最基本Web服务器" class="headerlink" title="2.创建最基本Web服务器"></a>2.创建最基本Web服务器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//3.启动Web服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at localhost&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-监听GET请求"><a href="#3-监听GET请求" class="headerlink" title="3.监听GET请求"></a>3.监听GET请求</h4><p>通过app.get()方法，可以监听</p><p>具体语法格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求url&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;<span class="comment">//req 请求对象 res 响应对象</span></span><br><span class="line">  <span class="comment">/**待处理函数**/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-监听POST请求"><a href="#4-监听POST请求" class="headerlink" title="4.监听POST请求"></a>4.监听POST请求</h4><p>通过app.post()方法</p><p>具体格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求url&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;<span class="comment">//req 请求对象 res 响应对象</span></span><br><span class="line">  <span class="comment">/**待处理函数**/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-把内容响应给客户端"><a href="#5-把内容响应给客户端" class="headerlink" title="5.把内容响应给客户端"></a>5.把内容响应给客户端</h4><p>通过res.send()方法，可以把处理好的内容，发送给客户端</p><p>这个方法既可以发送JSON字符串，也可以发送文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//调用express提供的send方法相应一个对象</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="6-获取URL中携带的查询参数"><a href="#6-获取URL中携带的查询参数" class="headerlink" title="6.获取URL中携带的查询参数"></a>6.获取URL中携带的查询参数</h4><p>通过req.query对象，可以访问客户端通过查询字符穿的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//默认是空对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="7-获取url中的动态参数"><a href="#7-获取url中的动态参数" class="headerlink" title="7.获取url中的动态参数"></a>7.获取url中的动态参数</h4><p>通过&#x3D;&#x3D;req.params&#x3D;&#x3D;对象，可以访问到URL中，通过&#x3D;&#x3D;：&#x3D;&#x3D;匹配到的动态参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240325211442354.png" alt="image-20240325211442354"></p><p>也可以匹配两个至多个动态参数例如 <code>/:id/:name</code>，返回一个对象</p><h3 id="1-3托管动态资源"><a href="#1-3托管动态资源" class="headerlink" title="1.3托管动态资源"></a>1.3托管动态资源</h3><h4 id="1-express-static"><a href="#1-express-static" class="headerlink" title="1.express.static()"></a>1.express.static()</h4><p>express提供了该函数，叫做express.static(),可以方便快捷的创建一个静态资源服务器</p><p>例如，通过以下代码就可以将public目录下的图片、CSS文件、Js文件对外开放访问了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><p>现在就可以访问public下所有问价了</p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;</p><blockquote><p>Express在指定的静态目录中查找文件，存放文件的路径名不会出现在路径名中</p></blockquote><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240325212444542.png" alt="image-20240325212444542"></p><p>打开成功</p><h4 id="2-托管多个静态资源目录"><a href="#2-托管多个静态资源目录" class="headerlink" title="2.托管多个静态资源目录"></a>2.托管多个静态资源目录</h4><p>可以多次调用express.statci()函数</p><blockquote><p>访问静态资源时候，会按照顺序依次访问资源。</p></blockquote><h4 id="3-挂载路径前缀"><a href="#3-挂载路径前缀" class="headerlink" title="3.挂载路径前缀"></a>3.挂载路径前缀</h4><p>需要在托管的资源访问路径之前，挂载路径前缀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="1-4nodemon"><a href="#1-4nodemon" class="headerlink" title="1.4nodemon"></a>1.4nodemon</h3><h4 id="1-为什么要使用"><a href="#1-为什么要使用" class="headerlink" title="1.为什么要使用"></a>1.为什么要使用</h4><blockquote><p>在编写Node.js项目的时候，如果修改了项目代码，需要频繁close掉，然后重新启动 </p><p>使用nodemon之后，它可以监听项目文件的变动，当代码被修改之后，nodemon会帮助重启项目</p></blockquote><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><h2 id="2-Express路由"><a href="#2-Express路由" class="headerlink" title="2.Express路由"></a>2.Express路由</h2><h3 id="2-1介绍"><a href="#2-1介绍" class="headerlink" title="2.1介绍"></a>2.1介绍</h3><h3 id="2-2路由的使用"><a href="#2-2路由的使用" class="headerlink" title="2.2路由的使用"></a>2.2路由的使用</h3><h4 id="1-最简单的路由"><a href="#1-最简单的路由" class="headerlink" title="1.最简单的路由"></a>1.最简单的路由</h4><p>在Express中，最简单的路由的使用方式，就是把路由挂载到app上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//来get</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//来post</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Post ing&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-模块化路由"><a href="#2-模块化路由" class="headerlink" title="2.模块化路由"></a>2.模块化路由</h4><p>方便对路由进行模块化管理，不建议将路由直接挂载到app上，而是推荐&#x3D;&#x3D;将路由抽离为单独的模块&#x3D;&#x3D;</p><p>将路由抽离为单独模块步骤</p><blockquote><ol><li>创建路由.js文件</li><li>调用express.static()方法创建路由对象</li><li>向路由对象上挂载具体的路由</li><li>室友moudule.exports向外共享路由对象</li><li>使用app.use函数注册路由模块</li></ol></blockquote><h4 id="3-创建路由-js文件"><a href="#3-创建路由-js文件" class="headerlink" title="3.创建路由.js文件"></a>3.创建路由.js文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">//挂载具体的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;user/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Add new user successfully&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//向外导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=router</span><br></pre></td></tr></table></figure><h4 id="4-如何注册路由模块"><a href="#4-如何注册路由模块" class="headerlink" title="4.如何注册路由模块"></a>4.如何注册路由模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"><span class="comment">//2.注册</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>app.use()的作用就是用于注册全局的中间件</strong></p><h4 id="5-为路由模块添加前缀"><a href="#5-为路由模块添加前缀" class="headerlink" title="5.为路由模块添加前缀"></a>5.为路由模块添加前缀</h4><p>类似于为静态资源统一挂载前缀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;api&#x27;</span>,router)</span><br></pre></td></tr></table></figure><h2 id="3-Express中间件"><a href="#3-Express中间件" class="headerlink" title="3.Express中间件"></a>3.Express中间件</h2><h3 id="3-1中间件概念"><a href="#3-1中间件概念" class="headerlink" title="3.1中间件概念"></a>3.1中间件概念</h3><h4 id="1-2-概念等等"><a href="#1-2-概念等等" class="headerlink" title="1.2.概念等等"></a>1.2.概念等等</h4><p>略</p><h4 id="3-Express中间件的调用流程"><a href="#3-Express中间件的调用流程" class="headerlink" title="3.Express中间件的调用流程"></a>3.Express中间件的调用流程</h4><p>当一个请求到达Express的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326163045849.png" alt="image-20240326163045849"></p><h4 id="4-Express中间件的格式"><a href="#4-Express中间件的格式" class="headerlink" title="4.Express中间件的格式"></a>4.Express中间件的格式</h4><p>中间件的本质就是一个function函数，其格式如下</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326163143550.png" alt="image-20240326163143550"></p><p><strong>中间间函数形参列表中，必须包含一个next形参，而路由处理函数中只有req、res</strong></p><p>&#x3D;&#x3D;next形参必须放到最后一个&#x3D;&#x3D;</p><h4 id="5-next函数的作用"><a href="#5-next函数的作用" class="headerlink" title="5.next函数的作用"></a>5.next函数的作用</h4><p>&#x3D;&#x3D;next 函数是实现多个中间件连续调用的关键&#x3D;&#x3D;，他表示把流转关系转交给下一个中间件或路由</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326163407998.png" alt="image-20240326163407998"></p><h3 id="3-2定义中间件函数"><a href="#3-2定义中间件函数" class="headerlink" title="3.2定义中间件函数"></a>3.2定义中间件函数</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><p>可以通过如下方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个最简单的中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req,res,next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最简单的中间件函数&#x27;</span>)</span><br><span class="line">  <span class="comment">//把流转关系交给下一个中间件或者函数</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Running&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-全局生效的中间件"><a href="#2-全局生效的中间件" class="headerlink" title="2.全局生效的中间件"></a>2.全局生效的中间件</h4><p>客户端发起的<strong>任何请求</strong>，到达服务器之后，都会触发的中间件，成为&#x3D;&#x3D;全局生效的中间件&#x3D;&#x3D;</p><p>通过调用**app.use(中间件函数)**，即可定义一个全局生效的中间件，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(mw)</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326164327361.png" alt="image-20240326164327361"></p><h4 id="3-定义全局中间件的简化形式"><a href="#3-定义全局中间件的简化形式" class="headerlink" title="3.定义全局中间件的简化形式"></a>3.定义全局中间件的简化形式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is the app&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-中间件的作用"><a href="#4-中间件的作用" class="headerlink" title="4.中间件的作用"></a>4.中间件的作用</h4><blockquote><p>多个中间件之间，可以共享<strong>req和res</strong>，基于这样的特性，我么可以在上游的中间件中，<strong>统一为</strong>req或者res添加自定义属性或者方法，<strong>供下游</strong>中间件或者路由使用</p></blockquote><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326164904111.png" alt="image-20240326164904111">&#96;</p><p>现在需要在每一个需求都获取时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> time=<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is get&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> time=<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在中间件函数中添加自定义属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//为req对象，添加自定义属性</span></span><br><span class="line">  <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  <span class="comment">//添加自定义属性</span></span><br><span class="line">  req.<span class="property">startTime</span>=time</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is the app&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-定义多个全局中间件"><a href="#5-定义多个全局中间件" class="headerlink" title="5.定义多个全局中间件"></a>5.定义多个全局中间件</h4><p>可以使用app.use连续定义多个全局中间件，客户端请求到达服务器之后，会按照前后顺序执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//第二个</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二个&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User page&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326165934807.png" alt="image-20240326165934807"></p><h4 id="6-局部生效的中间件"><a href="#6-局部生效的中间件" class="headerlink" title="6.局部生效的中间件"></a>6.局部生效的中间件</h4><blockquote><p>不使用app.use()定义的中间件，叫做局部生效的中间件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mwl</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;局部生效&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User page&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里面只有第一个路由才能被正确设置</p><h4 id="7-连续定义多个局部中间件"><a href="#7-连续定义多个局部中间件" class="headerlink" title="7.连续定义多个局部中间件"></a>7.连续定义多个局部中间件</h4><p>可以如下定义，顺序从前到后:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mwl1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;局部生效1&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mwl2</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;局部生效2&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,mwl1,mwl2,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;<span class="comment">//(&#x27;/&#x27;,[mwl1,mwl2],(req,res))</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="8-中间件五个使用注意事项"><a href="#8-中间件五个使用注意事项" class="headerlink" title="8.中间件五个使用注意事项"></a>8.中间件五个使用注意事项</h4><blockquote><ol><li>一定要在路由之前注册中间件</li><li>客户但发送的请求可以连续调用多个中间件函数</li><li>执行完中间件业务代码后，一定要使用next()</li><li>在调用next()后，不用再写其他业务代码了，防止代码逻辑混乱</li><li>连续调用多个中间件，多个中间件之间是共享(req,res)对象的</li></ol></blockquote><h3 id="3-3中间件分类"><a href="#3-3中间件分类" class="headerlink" title="3.3中间件分类"></a>3.3中间件分类</h3><p>&#x3D;&#x3D;常用的中间件分类&#x3D;&#x3D;</p><blockquote><ol><li>应用级别</li><li>路由级别</li><li>错误级别</li><li>Express内置</li><li>第三方</li></ol></blockquote><h4 id="1-应用级别"><a href="#1-应用级别" class="headerlink" title="1.应用级别"></a>1.应用级别</h4><blockquote><p>通过app.use()&#x2F;app.get()&#x2F;app.post(),绑定到app实例上的中间件</p></blockquote><h4 id="2-路由级别"><a href="#2-路由级别" class="headerlink" title="2.路由级别"></a>2.路由级别</h4><blockquote><p>绑定到express.Router()实例上的，叫做路由级别中间件</p><blockquote><p><strong>差别</strong></p><p>应用级别中间件是绑定到app上，路由级别绑定到Router上</p></blockquote></blockquote><h4 id="3-错误级别"><a href="#3-错误级别" class="headerlink" title="3.错误级别"></a>3.错误级别</h4><p><strong>作用：</strong>专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</p><p><strong>格式：</strong>错误级别中渐渐暗function()处理函数中，必须有四个形参，形参顺序从前到后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（err,req,res,next)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error occured&#x27;</span>)</span><br><span class="line">  <span class="comment">//1.1人为制造错误</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326172657669.png" alt="image-20240326172657669"></p><p><strong>使用错误级别中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error occured&#x27;</span>)</span><br><span class="line">  <span class="comment">//1.1人为制造错误</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//定义错误级别中间件，防止崩溃</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生了错误&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Error&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326172936210.png" alt="image-20240326172936210"></p><p><strong>程序没有崩溃</strong></p><blockquote><p>注意如果将中间件和路由调换顺序，还是会报错</p></blockquote><h4 id="4-Express内置中间件"><a href="#4-Express内置中间件" class="headerlink" title="4.Express内置中间件"></a>4.Express内置中间件</h4><p>Express再4.16.0之后有三个常用中间件，</p><blockquote><p>express.static()快速托管静态资源的内置中间件，</p><p>express.json()解析JSON格式的请求体数据(有兼容性，再4.16.0及之后)</p><p>express.urlencoded()解析URL-encoded格式的请求日数据(有兼容性)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="property">json</span>)<span class="comment">//配置解析application/json格式化数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))<span class="comment">//配置解析application/x-www-form-urlencoded格式数据的中间件</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;express.json()使用&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//再服务器，可以使用req.body属性来接受来自客户端的请求体数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">  <span class="comment">//默认情况下，如果不配置解析表单数据的中间件，则req.body默认等于Undefined</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出Undefined</p><p><strong>注意，除了错误级别中间件，其他中间件必须在路由之前进行配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过express.json这个中间件解析</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//再服务器，可以使用req.body属性来接受来自客户端的请求体数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">  <span class="comment">//默认情况下，如果不配置解析表单数据的中间件，则req.body默认等于Undefined</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>成功输出json字符串</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326174434765.png" alt="image-20240326174434765"></p><p>&#x3D;&#x3D;express.urlencoded()&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/book&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326174712500.png" alt="image-20240326174712500"></p><p>解析不了，得到空对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过express.urlencoded()中间件来解析表单中的urlencoded</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326174852564.png" alt="image-20240326174852564"></p><p><strong>解析成功！</strong></p><h4 id="5-第三方中间件"><a href="#5-第三方中间件" class="headerlink" title="5.第三方中间件"></a>5.第三方中间件</h4><blockquote><p>非express官方的，由第三方出来的中间件，叫做第三方中间件</p></blockquote><p><strong>步骤</strong></p><p>例如安装 body-parser</p><ol><li>npm i body-parser</li><li>const parser&#x3D;require(‘body-parser’)</li><li>app.use(parser.urlencoded({ extended: false }))</li></ol><p><strong>express中内置的express.urlencoded就是基于body-parser这个进一步封装的</strong></p><h3 id="3-4自定义中间件"><a href="#3-4自定义中间件" class="headerlink" title="3.4自定义中间件"></a>3.4自定义中间件</h3><h4 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h4><p>实现步骤：</p><ol><li>定义中间件</li><li>监听req的data事件</li><li>监听req的end事件</li><li>使用queryString模块解析请求体数据</li><li>将解析出来的数据对象挂载为req.body</li><li>将子定义中间件封装为模块</li></ol><h4 id="2-定义"><a href="#2-定义" class="headerlink" title="2.定义"></a>2.定义</h4><p>通过app.use()定义</p><h4 id="3-监听req的data事件"><a href="#3-监听req的data事件" class="headerlink" title="3.监听req的data事件"></a>3.监听req的data事件</h4><p>通过监听req的data事件，就可以获取客户端发送到服务器的数据</p><p><strong>如果数据量比较大，客户端会把数据切割分批发送到服务器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义变量存储客户端发送的请求体数据</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">//2.监听req的data事件</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">  str+=chunk</span><br></pre></td></tr></table></figure><h4 id="4-监听req的end事件"><a href="#4-监听req的end事件" class="headerlink" title="4.监听req的end事件"></a>4.监听req的end事件</h4><p>当end事件触发，代表数据接收完毕</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在str村发的是完整的请求体数据</span></span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span>把字符串请求体数据，转换成对象格式</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="5-使用querystring解析请求体数据"><a href="#5-使用querystring解析请求体数据" class="headerlink" title="5.使用querystring解析请求体数据"></a>5.使用querystring解析请求体数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(body)</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326200337095.png" alt="image-20240326200337095"></p><h4 id="6-将解析出来的数据对象挂载为req-body"><a href="#6-将解析出来的数据对象挂载为req-body" class="headerlink" title="6.将解析出来的数据对象挂载为req.body"></a>6.将解析出来的数据对象挂载为req.body</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="property">body</span> = body</span><br><span class="line"><span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326200614669.png" alt="image-20240326200614669"></p><h4 id="7-将子定义中间件封装为模块"><a href="#7-将子定义中间件封装为模块" class="headerlink" title="7.将子定义中间件封装为模块"></a>7.将子定义中间件封装为模块</h4><p>为了优化代码，需要把子定义中间件封装为独立模块</p><h2 id="4-使用Express写接口"><a href="#4-使用Express写接口" class="headerlink" title="4.使用Express写接口"></a>4.使用Express写接口</h2><h3 id="4-1创建最基本的Express服务器"><a href="#4-1创建最基本的Express服务器" class="headerlink" title="4.1创建最基本的Express服务器"></a>4.1创建最基本的Express服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Running...&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-2创建API路由模块"><a href="#4-2创建API路由模块" class="headerlink" title="4.2创建API路由模块"></a>4.2创建API路由模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="property">Router</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Running&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="built_in">exports</span>(router)</span><br></pre></td></tr></table></figure><h3 id="4-3编写GET接口"><a href="#4-3编写GET接口" class="headerlink" title="4.3编写GET接口"></a>4.3编写GET接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//通过req.query获取查询字符串，发送到服务器的数据</span></span><br><span class="line">  <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">  <span class="comment">//调用res.send()方法，向客户端相应处理的结果</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,<span class="comment">//0成功</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;GET 请求成功&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:query</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过上述操作成功获得了数据</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326202743866.png" alt="image-20240326202743866"></p><h3 id="4-4编写POST接口"><a href="#4-4编写POST接口" class="headerlink" title="4.4编写POST接口"></a>4.4编写POST接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取请求体包含的url-encoded格式数据</span></span><br><span class="line">  <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">  <span class="comment">//通过send方法，响应结果</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;POST请求成功&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:body</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>成功获取了表单数据</p><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326203222926.png" alt="image-20240326203222926"></p><h3 id="4-5CORS跨域资源共享"><a href="#4-5CORS跨域资源共享" class="headerlink" title="4.5CORS跨域资源共享"></a>4.5CORS跨域资源共享</h3><h4 id="1-接口的跨域问题"><a href="#1-接口的跨域问题" class="headerlink" title="1.接口的跨域问题"></a>1.接口的跨域问题</h4><p>&#x3D;&#x3D;严重的问题&#x3D;&#x3D;</p><p>编写的接口不支持跨域问题。</p><p><strong>解决接口的跨域问题主要有两种方法</strong></p><blockquote><p>1.CORS(主流的解决方案，推荐)</p><p>2.JSONP(有缺陷，只支持GET)</p><p>也可以使用响应头</p></blockquote><h4 id="2-使用CORS中间件"><a href="#2-使用CORS中间件" class="headerlink" title="2.使用CORS中间件"></a>2.使用CORS中间件</h4><p>使用步骤</p><ol><li><p>运行 npm install cors</p></li><li><p>使用 const cors&#x3D;require(‘cors’)</p></li><li><p>app.use(cors())</p></li></ol><h4 id="3-什么是CORS"><a href="#3-什么是CORS" class="headerlink" title="3.什么是CORS"></a>3.什么是CORS</h4><blockquote><p>cors跨区域资源共享由一系列HTTP响应头组成，这些HTTP响应头决定浏览器是否组织前端js代码是否共享</p></blockquote><h4 id="4-cors注意"><a href="#4-cors注意" class="headerlink" title="4.cors注意"></a>4.cors注意</h4><blockquote><ol><li>cors主要在服务器端进行部署，客户端浏览器无需做任何配置</li><li>cors在浏览器中由兼容性，支支持XMLHttpRequest Level2的浏览器，才能正常访问开启了cors的服务器端接口</li></ol></blockquote><h4 id="5-cors响应头部-Access-Control-Allow-Origin"><a href="#5-cors响应头部-Access-Control-Allow-Origin" class="headerlink" title="5.cors响应头部- Access-Control-Allow-Origin"></a>5.cors响应头部- Access-Control-Allow-Origin</h4><p>响应头部中携带一个 Access-Control-Allow-Origin 字段其语法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>:&lt;origin&gt;|*</span><br></pre></td></tr></table></figure><p>其中 origin参数的值制定了允许访问人该资源的外域URL。</p><p>例如，下面字段将只允许来自<a href="http://itcast.cn的请求/">http://itcast.cn的请求</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;http//itcast.cn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>*****号代表通配符，表示允许任何域名请求</p><h4 id="6-cors响应头-Access-Control-Allow-Headers"><a href="#6-cors响应头-Access-Control-Allow-Headers" class="headerlink" title="6.cors响应头 Access-Control-Allow-Headers"></a>6.cors响应头 Access-Control-Allow-Headers</h4><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240326213549750.png" alt="image-20240326213549750"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//允许客户端向服务器发送 Content-Type请求头和 X-Custom-Header请求头</span></span><br><span class="line"><span class="comment">//多个请求头之间用 “，”分隔</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;Content-Type,X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="7-cors响应头部-Access-Control-Allow-Methods"><a href="#7-cors响应头部-Access-Control-Allow-Methods" class="headerlink" title="7.cors响应头部 - Access-Control-Allow-Methods"></a>7.cors响应头部 - Access-Control-Allow-Methods</h4><p>默认情况下，cors仅支持客户端发起&#x3D;&#x3D;GET、POST、HEAD&#x3D;&#x3D;请求</p><p>如果客户端希望通过 &#x3D;&#x3D;PUT、DELETE&#x3D;&#x3D;等方式请求服务器，需要在该响应头指明允许所使用的HTTP方法</p><h4 id="8-cors请求的分类"><a href="#8-cors请求的分类" class="headerlink" title="8.cors请求的分类"></a>8.cors请求的分类</h4><p>简单请求、预检请求</p><h4 id="9-简单请求"><a href="#9-简单请求" class="headerlink" title="9.简单请求"></a>9.简单请求</h4><p><img src="/2019/11/Express%E4%BD%BF%E7%94%A8/image-20240327224520915.png" alt="image-20240327224520915"></p><h4 id="10-预检请求"><a href="#10-预检请求" class="headerlink" title="10.预检请求"></a>10.预检请求</h4><p>符合以下任何一个条件按</p><blockquote><ol><li>请求方式为GET\POST\HEAD之外的Method类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了application\json格式的数据</li></ol></blockquote><p>在浏览器和服务器正式通信之前，浏览器会先发送OPTION请求进行预检，以获知服务器是否允许该实际请求，**服务器成功响应预检请求之后，才会发送真正的请求，并且携带真实数据。</p><h4 id="11-简单请求和预检请求的区别"><a href="#11-简单请求和预检请求的区别" class="headerlink" title="11.简单请求和预检请求的区别"></a>11.简单请求和预检请求的区别</h4><blockquote><p>网络请求的特点：客户端和服务器之间之会发生一次请求</p><p>预检请求的特点：客户端与服务器直接会发生两次请求，OPTION预检请求成功之后，才会发其真正的请求</p></blockquote><h3 id="4-6JSONP接口"><a href="#4-6JSONP接口" class="headerlink" title="4.6JSONP接口"></a>4.6JSONP接口</h3><h4 id="1-jsonp的概念和特点"><a href="#1-jsonp的概念和特点" class="headerlink" title="1.jsonp的概念和特点"></a>1.jsonp的概念和特点</h4><p><strong>概念</strong></p><p>浏览器通过<scirpt>标签的src属性，请求服务器上的数据，同时，服务器返回一个函数的调用，这种请求的方式叫做jsonp。</scirpt></p><hr><p><strong>特点</strong></p><ol><li>jsonp不属于真正的ajax请求，因为他没有使用XMLHTTPRequest这个对象</li><li>jsonp仅支持GET请求，不支持其他请求</li></ol><h4 id="2-创建jsonp接口的注意事项"><a href="#2-创建jsonp接口的注意事项" class="headerlink" title="2.创建jsonp接口的注意事项"></a>2.创建jsonp接口的注意事项</h4><p>如果已经配置了CORS跨域资源共享，必须在配置CORS之前配置jsonp接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//TODO 创建</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//必须在配置cors之前配置jsonp</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br></pre></td></tr></table></figure><h4 id="3-实现jsonp接口"><a href="#3-实现jsonp接口" class="headerlink" title="3.实现jsonp接口"></a>3.实现jsonp接口</h4><p><strong>步骤：</strong></p><blockquote><ol><li>获取客户端发送过来的回调函数的名字</li><li>得到通过jsonp形式发送给客户端的数据</li><li>根据前两步得到的数据，拼接处一个函数调用的字符串</li><li>把上一步拼接得到的字符串，响应给客户端<script>标签进行解析执行。</li></ol></blockquote><h4 id="4-具体步骤"><a href="#4-具体步骤" class="headerlink" title="4.具体步骤"></a>4.具体步骤</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//TODO 创建</span></span><br><span class="line">  <span class="comment">//得到函数名称</span></span><br><span class="line">  <span class="keyword">const</span> funcName = req.<span class="property">query</span>.<span class="property">callback</span></span><br><span class="line">  <span class="comment">//2.得到数据对象</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span> &#125;</span><br><span class="line">  <span class="comment">//拼接</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`<span class="subst">$&#123;funcName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line">  <span class="comment">//响应</span></span><br><span class="line">  res.<span class="title function_">send</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-使用JQUERY发起jsonp请求"><a href="#5-使用JQUERY发起jsonp请求" class="headerlink" title="5.使用JQUERY发起jsonp请求"></a>5.使用JQUERY发起jsonp请求</h4><p>略</p></script></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Express&quot;&gt;&lt;a href=&quot;#Express&quot; class=&quot;headerlink&quot; title=&quot;Express&quot;&gt;&lt;/a&gt;Express&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;
  &lt;br&gt;
  &lt;/p&gt;&lt;h2 style=&quot;text-align</summary>
      
    
    
    
    <category term="node.js" scheme="https://ycx6666.github.io/categories/node-js/"/>
    
    
    <category term="express" scheme="https://ycx6666.github.io/tags/express/"/>
    
    <category term="入门" scheme="https://ycx6666.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
